{"version":3,"file":"src_js_plugins_settingsMenu_settingsMenu_ts.975a93427d940454c3a8.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAsD;AACE;AACA;AACjC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,IAAI,6CAAC,uBAAuB,uEAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,cAAc;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,cAAc;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,cAAc;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4IAA4I;AAC5I;AACA;AACA;AACA,iGAAiG,4BAA4B;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6CAAC,yBAAyB,uEAAiB;AAC/C;AACA;AACA;AACA;AACA,qBAAqB,wDAAW,CAAC;AACjC;AACA;AACA;AACA;AACA,IAAI,6CAAC;AACL,IAAI,6CAAC;AACL,IAAI,6CAAC;AACL;AACA;AACA;AACA,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB,YAAY,2DAAM;AAClB;AACA,QAAQ,6CAAC;AACT,0BAA0B,2DAAM;AAChC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,QAAQ,6CAAC;AACT,0BAA0B,2DAAM;AAChC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,QAAQ,6CAAC;AACT,0BAA0B,2DAAM;AAChC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,QAAQ,6CAAC;AACT,0BAA0B,2DAAM;AAChC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,QAAQ,6CAAC;AACT,0BAA0B,2DAAM;AAChC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,QAAQ,6CAAC;AACT,0BAA0B,2DAAM;AAChC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,QAAQ,6CAAC;AACT,0BAA0B,2DAAM;AAChC;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,KAAK;AACL;AACO;AACP,YAAY,YAAY,EAAE,2EAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAC,qCAAqC,iCAAiC;AACnF;AACA,YAAY,6CAAC;AACb;AACA;AACA;AACA;AACO;AACP,IAAI,6CAAC,qCAAqC,iCAAiC;AAC3E,IAAI,6CAAC;AACL;AACA;AACO;AACP,YAAY,oBAAoB,EAAE,2EAAqB;AACvD;AACA;AACA;AACA;AACA,wDAAwD,eAAe,YAAY,SAAS,eAAe;AAC3G;AACA,2CAA2C,8DAAS;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAC;AACT;AACA;AACA;AACA,QAAQ,6CAAC;AACT;AACA;AACO;AACP;AACA;AACA,YAAY,wCAAwC,EAAE,2EAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6CAAC;AACrC;AACA,QAAQ,6CAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+DAA+D;AAC/D;AACA;AACO;AACP,YAAY,YAAY,EAAE,2EAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keeptrack.space/./src/js/plugins/settingsMenu/settingsMenu.ts"],"sourcesContent":["import settingsPng from '@app/img/icons/settings.png';\nimport { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport { parseRgba, rgbCss } from '@app/js/lib/helpers';\nimport $ from 'jquery';\n/**\n * /////////////////////////////////////////////////////////////////////////////\n *\n * planetarium.ts is a plugin for showing the satellites above from the perspective\n * of a view on the earth.\n *\n * http://keeptrack.space\n *\n * @Copyright (C) 2016-2022 Theodore Kruczek\n *\n * KeepTrack is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any later version.\n *\n * KeepTrack is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License along with\n * KeepTrack. If not, see <http://www.gnu.org/licenses/>.\n *\n * TESTING: This plugin requires php to be installed on the server. It won't work\n * with the default http npm module.\n *\n * /////////////////////////////////////////////////////////////////////////////\n */\nlet isSettingsMenuOpen = false;\nlet isNotColorPickerInitialSetup = false;\nexport const init = () => {\n    // Add HTML\n    keepTrackApi.register({\n        method: 'uiManagerInit',\n        cbName: 'settingsMenu',\n        cb: () => uiManagerInit(),\n    });\n    // Add JavaScript\n    keepTrackApi.register({\n        method: 'bottomMenuClick',\n        cbName: 'settingsMenu',\n        cb: (iconName) => bottomMenuClick(iconName),\n    });\n    keepTrackApi.register({\n        method: 'hideSideMenus',\n        cbName: 'sensor',\n        cb: () => hideSideMenus(),\n    });\n};\nexport const uiManagerInit = () => {\n    // Side Menu\n    $('#left-menus').append(keepTrackApi.html `\n    <div id=\"settings-menu\" class=\"side-menu-parent start-hidden text-select\">\n      <div id=\"settings-content\" class=\"side-menu\">\n        <div class=\"row\">\n          <form id=\"settings-form\">\n            <div id=\"settings-general\">\n              <h5 class=\"center-align\">General Settings</h5>\n              <div class=\"switch row\">\n                <label class=\"tooltipped\" data-position=\"right\" data-delay=\"50\" data-tooltip=\"Orbits will be drawn using ECF vs ECI (Mainly for GEO Orbits)\">\n                  <input id=\"settings-drawEcf\" type=\"checkbox\" />\n                  <span class=\"lever\"></span>\n                  Draw Orbits in ECF\n                </label>\n              </div>\n              <div class=\"switch row\">\n                <label class=\"tooltipped\" data-position=\"right\" data-delay=\"50\" data-tooltip=\"Non-selectable satellites will be hidden instead of grayed out.\">\n                  <input id=\"settings-hos\" type=\"checkbox\" />\n                  <span class=\"lever\"></span>\n                  Hide Other Satellites\n                </label>\n              </div>\n              <div class=\"switch row\">\n                <label class=\"tooltipped\" data-position=\"right\" data-delay=\"50\" data-tooltip=\"Every 3 seconds a new satellite will be selected from FOV\">\n                  <input id=\"settings-demo-mode\" type=\"checkbox\" />\n                  <span class=\"lever\"></span>\n                  Enable Demo Mode\n                </label>\n              </div>\n              <div class=\"switch row\">\n                <label class=\"tooltipped\" data-position=\"right\" data-delay=\"50\" data-tooltip=\"Small text labels will appear next to all satellites in FOV.\">\n                  <input id=\"settings-sat-label-mode\" type=\"checkbox\" checked />\n                  <span class=\"lever\"></span>\n                  Enable Satellite Label Mode\n                </label>\n              </div>\n            </div>\n            <div class=\"row light-blue darken-3\" style=\"height:4px; display:block;\"></div>\n            <div id=\"settings-colors\">\n              <h5 class=\"center-align\">Color Settings</h5>\n              <div class=\"input-field col s6\">\n                <center>\n                  <p>Payload</p>\n                  <button id=\"settings-color-payload\" class=\"btn waves-effect waves-light\"></button>\n                </center>\n              </div>\n              <div class=\"input-field col s6\">\n                <center>\n                  <p>Rocket Body</p>\n                  <button id=\"settings-color-rocketBody\" class=\"btn waves-effect waves-light\"></button>\n                </center>\n              </div>\n              <div class=\"input-field col s6\">\n                <center>\n                  <p>Debris</p>\n                  <button id=\"settings-color-debris\" class=\"btn waves-effect waves-light\"></button>\n                </center>\n              </div>\n              <div class=\"input-field col s6\">\n                <center>\n                  <p>In View</p>\n                  <button id=\"settings-color-inview\" class=\"btn waves-effect waves-light\"></button>\n                </center>\n              </div>\n              <div class=\"input-field col s6\">\n                <center>\n                  <p>Missile</p>\n                  <button id=\"settings-color-missile\" class=\"btn waves-effect waves-light\"></button>\n                </center>\n              </div>\n              <div class=\"input-field col s6\">\n                <center>\n                  <p>Missile (FOV)</p>\n                  <button id=\"settings-color-missileInview\" class=\"btn waves-effect waves-light\"></button>\n                </center>\n              </div>\n              <div class=\"input-field col s6\">\n                <center>\n                  <p>TruSat</p>\n                  <button id=\"settings-color-trusat\" class=\"btn waves-effect waves-light\"></button>\n                </center>\n              </div>\n            </div>\n            <div class=\"row\"></div>\n            <div class=\"row light-blue darken-3\" style=\"height:4px; display:block;\"></div>\n            <div id=\"satOverfly-opt\">\n              <h5 class=\"center-align\">Satellite Overfly Settings</h5>\n              <div class=\"input-field col s12\">\n                <input value=\"30\" id=\"satFieldOfView\" type=\"text\" class=\"tooltipped\" data-position=\"right\" data-delay=\"50\" data-tooltip=\"What is the satellite's field of view in degrees\" />\n                <label for=\"satFieldOfView\" class=\"active\">Satellite Field of View</label>\n              </div>\n              <div class=\"row\"></div>\n            </div>\n            <div class=\"row light-blue darken-3\" style=\"height:4px; display:block;\"></div>\n            <div id=\"fastCompSettings\">\n              <h5 class=\"center-align\">Fast CPU Required</h5>\n              <div class=\"switch row\">\n                <label>\n                  <input id=\"settings-snp\" type=\"checkbox\" />\n                  <span class=\"lever\"></span>\n                  Show Next Pass on Hover\n                </label>\n              </div>\n              <div class=\"row\"></div>\n              <br />\n              <div class=\"row center\">\n                <button id=\"settings-submit\" class=\"btn btn-ui waves-effect waves-light\" type=\"submit\" name=\"action\">Update Settings &#9658;</button>\n              </div>\n            </div>\n            <!-- <div id=\"settings-lowperf\" class=\"row center\">\n              <button class=\"red btn waves-effect waves-light\" onclick=\"uiManager.startLowPerf();\">Low End PC Version &#9658;</button>\n            </div> -->\n          </form>\n        </div>\n      </div>\n    </div>\n  `);\n    // Bottom Icon\n    $('#bottom-icons').append(keepTrackApi.html `\n    <div id=\"menu-settings\" class=\"bmenu-item\">\n      <img\n        alt=\"settings\"\n        src=\"\"\n        delayedsrc=${settingsPng}/>\n      <span class=\"bmenu-title\">Settings</span>\n      <div class=\"status-icon\"></div>\n    </div>\n  `);\n    $('#settings-form').on('change', settingsFormChange);\n    $('#settings-riseset').on('change', settingsRisesetChange);\n    $('#settings-form').on('submit', settingsFormSubmit);\n    (() => {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const colorPalette = [\n            rgbCss([1.0, 0.0, 0.0, 1.0]),\n            rgbCss([1.0, 0.75, 0.0, 1.0]),\n            rgbCss([0.85, 0.5, 0.0, 1.0]),\n            rgbCss([1.0, 1.0, 0.0, 1.0]),\n            rgbCss([0, 1, 0, 1]),\n            rgbCss([0.2, 1.0, 0.0, 0.5]),\n            rgbCss([0.2, 1.0, 1.0, 1.0]),\n            rgbCss([0, 0, 1, 1]),\n            rgbCss([0.2, 0.4, 1.0, 1]),\n            rgbCss([0.64, 0.0, 0.64, 1.0]),\n            rgbCss([1.0, 0.0, 0.6, 1.0]),\n            rgbCss([0.5, 0.5, 0.5, 1]),\n            rgbCss([1, 1, 1, 1]), // White\n        ];\n        $('#settings-color-payload').colorPick({\n            initialColor: rgbCss(((_a = settingsManager.colors) === null || _a === void 0 ? void 0 : _a.payload) || [0.2, 1.0, 0.0, 0.5]),\n            palette: colorPalette,\n            onColorSelected: function () {\n                onColorSelected(this, 'payload');\n            },\n        });\n        $('#settings-color-rocketBody').colorPick({\n            initialColor: rgbCss(((_b = settingsManager.colors) === null || _b === void 0 ? void 0 : _b.rocketBody) || [0.2, 0.4, 1.0, 1]),\n            palette: colorPalette,\n            onColorSelected: function () {\n                onColorSelected(this, 'rocketBody');\n            },\n        });\n        $('#settings-color-debris').colorPick({\n            initialColor: rgbCss(((_c = settingsManager.colors) === null || _c === void 0 ? void 0 : _c.debris) || [0.5, 0.5, 0.5, 1]),\n            palette: colorPalette,\n            onColorSelected: function () {\n                onColorSelected(this, 'debris');\n            },\n        });\n        $('#settings-color-inview').colorPick({\n            initialColor: rgbCss(((_d = settingsManager.colors) === null || _d === void 0 ? void 0 : _d.inView) || [0.85, 0.5, 0.0, 1.0]),\n            palette: colorPalette,\n            onColorSelected: function () {\n                onColorSelected(this, 'inview');\n            },\n        });\n        $('#settings-color-missile').colorPick({\n            initialColor: rgbCss(((_e = settingsManager.colors) === null || _e === void 0 ? void 0 : _e.missile) || [1.0, 1.0, 0.0, 1.0]),\n            palette: colorPalette,\n            onColorSelected: function () {\n                onColorSelected(this, 'missile');\n            },\n        });\n        $('#settings-color-missileInview').colorPick({\n            initialColor: rgbCss(((_f = settingsManager.colors) === null || _f === void 0 ? void 0 : _f.missileInview) || [1.0, 0.0, 0.0, 1.0]),\n            palette: colorPalette,\n            onColorSelected: function () {\n                onColorSelected(this, 'missileInview');\n            },\n        });\n        $('#settings-color-trusat').colorPick({\n            initialColor: rgbCss(((_g = settingsManager.colors) === null || _g === void 0 ? void 0 : _g.trusat) || [1.0, 0.0, 0.6, 1.0]),\n            palette: colorPalette,\n            onColorSelected: function () {\n                onColorSelected(this, 'trusat');\n            },\n        });\n        isNotColorPickerInitialSetup = true;\n    })();\n};\nexport const bottomMenuClick = (iconName) => {\n    const { uiManager } = keepTrackApi.programs;\n    if (iconName === 'menu-settings') {\n        if (isSettingsMenuOpen) {\n            isSettingsMenuOpen = false;\n            uiManager.hideSideMenus();\n            return;\n        }\n        else {\n            if (settingsManager.isMobileModeEnabled)\n                uiManager.searchToggle(false);\n            uiManager.hideSideMenus();\n            $('#settings-menu').effect('slide', { direction: 'left', mode: 'show' }, 1000);\n            isSettingsMenuOpen = true;\n            $('#menu-settings').addClass('bmenu-item-selected');\n            return;\n        }\n    }\n};\nexport const hideSideMenus = () => {\n    $('#settings-menu').effect('slide', { direction: 'left', mode: 'hide' }, 1000);\n    $('#menu-settings').removeClass('bmenu-item-selected');\n    isSettingsMenuOpen = false;\n};\nexport const onColorSelected = (context, colorStr) => {\n    const { satSet, uiManager } = keepTrackApi.programs;\n    if (typeof context === 'undefined' || context === null)\n        throw new Error('context is undefined');\n    if (typeof colorStr === 'undefined' || colorStr === null)\n        throw new Error('colorStr is undefined');\n    context.element.css('cssText', `background-color: ${context.color} !important; color: ${context.color};`);\n    if (isNotColorPickerInitialSetup) {\n        settingsManager.colors[colorStr] = parseRgba(context.color);\n        uiManager.legendColorsChange();\n        satSet.setColorScheme(settingsManager.currentColorScheme, true);\n        try {\n            localStorage.setItem('settingsManager-colors', JSON.stringify(settingsManager.colors));\n        }\n        catch (_a) {\n            console.warn('Settings Manager: Unable to save color settings - localStorage issue!');\n        }\n    }\n};\nexport const settingsFormChange = (e, isDMChecked, isSLMChecked) => {\n    if (typeof e === 'undefined' || e === null)\n        throw new Error('e is undefined');\n    isDMChecked !== null && isDMChecked !== void 0 ? isDMChecked : (isDMChecked = document.getElementById('settings-demo-mode').checked);\n    isSLMChecked !== null && isSLMChecked !== void 0 ? isSLMChecked : (isSLMChecked = document.getElementById('settings-sat-label-mode').checked);\n    if (isSLMChecked && e.target.id === 'settings-demo-mode') {\n        document.getElementById('settings-sat-label-mode').checked = false;\n        $('#settings-demo-mode').removeClass('lever:after');\n    }\n    if (isDMChecked && e.target.id === 'settings-sat-label-mode') {\n        document.getElementById('settings-demo-mode').checked = false;\n        $('#settings-sat-label-mode').removeClass('lever:after');\n    }\n};\nexport const settingsFormSubmit = (e, isHOSChecked, isDMChecked, isSLMChecked, isSNPChecked, isDrawEcfChecked) => {\n    if (typeof e === 'undefined' || e === null)\n        throw new Error('e is undefined');\n    const { satSet, colorSchemeManager, uiManager } = keepTrackApi.programs;\n    isDrawEcfChecked !== null && isDrawEcfChecked !== void 0 ? isDrawEcfChecked : (isDrawEcfChecked = document.getElementById('settings-drawEcf').checked);\n    isHOSChecked !== null && isHOSChecked !== void 0 ? isHOSChecked : (isHOSChecked = document.getElementById('settings-hos').checked);\n    isDMChecked !== null && isDMChecked !== void 0 ? isDMChecked : (isDMChecked = document.getElementById('settings-demo-mode').checked);\n    isSLMChecked !== null && isSLMChecked !== void 0 ? isSLMChecked : (isSLMChecked = document.getElementById('settings-sat-label-mode').checked);\n    isSNPChecked !== null && isSNPChecked !== void 0 ? isSNPChecked : (isSNPChecked = document.getElementById('settings-snp').checked);\n    settingsManager.isSatLabelModeOn = isSLMChecked;\n    settingsManager.isDemoModeOn = isDMChecked;\n    settingsManager.colors.transparent = isHOSChecked ? [1.0, 1.0, 1.0, 0] : [1.0, 1.0, 1.0, 0.1];\n    settingsManager.isOrbitCruncherInEcf = isDrawEcfChecked;\n    colorSchemeManager.reloadColors();\n    settingsManager.isShowNextPass = isSNPChecked;\n    const newFieldOfView = parseInt($('#satFieldOfView').val());\n    if (isNaN(newFieldOfView)) {\n        $('#satFieldOfView').val('30');\n        uiManager.toast('Invalid field of view value!', 'critical');\n    }\n    else {\n        satSet.satCruncher.postMessage({\n            typ: 'isShowSatOverfly',\n            selectedSatFOV: newFieldOfView,\n        });\n    }\n    settingsManager.isForceColorScheme = true;\n    satSet.setColorScheme(settingsManager.currentColorScheme); // force color recalc\n    e.preventDefault();\n};\nexport const settingsRisesetChange = (e, isRiseSetChecked) => {\n    const { satellite } = keepTrackApi.programs;\n    if (typeof e === 'undefined' || e === null)\n        throw new Error('e is undefined');\n    isRiseSetChecked !== null && isRiseSetChecked !== void 0 ? isRiseSetChecked : (isRiseSetChecked = document.getElementById('settings-riseset').checked);\n    if (isRiseSetChecked) {\n        satellite.isRiseSetLookangles = true;\n    }\n    else {\n        satellite.isRiseSetLookangles = false;\n    }\n};\n"],"names":[],"sourceRoot":""}