{"version":3,"file":"src_js_plugins_orbitReferences_orbitReferences_ts.1f2611fe47f14da67d3d.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAwD;AACR;AACA;AACzB;AACvB;AACO;AACP;AACA,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,QAAQ,6CAAC,+BAA+B,uEAAiB;AACzD;AACA;AACA,QAAQ,6CAAC;AACT;AACA;AACA;AACO;AACP,YAAY,8CAA8C,EAAE,2EAAqB;AACjF;AACA;AACA,yDAAyD;AACzD;AACA;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA,mCAAmC,0DAAO;AAC1C;AACA;AACA;AACA;AACA,oCAAoC,0DAAO;AAC3C;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,gBAAgB,+DAAc;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAuB,+DAAc;AACrC,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keeptrack.space/./src/js/plugins/orbitReferences/orbitReferences.ts"],"sourcesContent":["import { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport { RAD2DEG } from '@app/js/lib/constants';\nimport { stringPad } from '@app/js/lib/helpers';\nimport $ from 'jquery';\nlet doOnce = false;\nexport const init = () => {\n    // Add HTML\n    keepTrackApi.register({\n        method: 'uiManagerInit',\n        cbName: 'orbitReferences',\n        cb: () => uiManagerInit(),\n    });\n};\nexport const uiManagerInit = () => {\n    // Register orbital element data\n    keepTrackApi.register({\n        method: 'selectSatData',\n        cbName: 'orbitReferences',\n        cb: selectSatData,\n    });\n};\nexport const selectSatData = () => {\n    if (!doOnce) {\n        $('#sat-info-top-links').append(keepTrackApi.html `\n        <div id=\"orbit-references-link\" class=\"link sat-infobox-links\">Generate Orbit Reference Satellites...</div>\n      `);\n        $('#orbit-references-link').on('click', orbitReferencesLinkClick);\n        doOnce = true;\n    }\n};\nexport const orbitReferencesLinkClick = () => {\n    const { satSet, objectManager, uiManager, satellite } = keepTrackApi.programs;\n    // Determine which satellite is selected\n    const sat = satSet.getSat(objectManager.selectedSat);\n    let satNum = objectManager.analSatSet[0].id + 20000; // Find Analyst satellite 10,000\n    let searchStr = '';\n    // Add the satellites\n    for (let i = 0; i < 360; i++) {\n        const satrec = satellite.twoline2satrec(sat.TLE1, sat.TLE2);\n        const ecen = satrec.ecco.toPrecision(7).substr(2, 7);\n        let rasc = (satrec.nodeo * RAD2DEG).toPrecision(7);\n        const rascA = rasc.split('.');\n        rascA[0] = rascA[0].substr(-3, 3);\n        rascA[1] = rascA[1].substr(0, 4);\n        rasc = (rascA[0] + '.' + rascA[1]).toString();\n        let argPe = (satrec.argpo * RAD2DEG).toPrecision(7);\n        const argPeA = argPe.split('.');\n        argPeA[0] = argPeA[0].substr(-3, 3);\n        argPeA[1] = argPeA[1].substr(0, 4);\n        argPe = (argPeA[0] + '.' + argPeA[1]).toString();\n        let meana = i.toPrecision(10); // sat.TLE2.substr(44 - 1, 7 + 1);\n        const meanaA = meana.split('.');\n        meanaA[0] = meanaA[0].substr(-3, 3);\n        meanaA[1] = meanaA[1].substr(0, 4);\n        meana = (meanaA[0] + '.' + meanaA[1]).toString();\n        meana = stringPad.pad0(meana, 8);\n        const inc = sat.TLE2.substr(8, 8);\n        const meanmo = sat.TLE2.substr(52, 10);\n        const epochyr = sat.TLE1.substr(18, 2);\n        const epochday = sat.TLE1.substr(20, 12);\n        const intl = sat.TLE1.substr(9, 8);\n        const sccNum = stringPad.pad0(sat.TLE1.substr(2, 5).trim(), 5);\n        const { TLE1, TLE2 } = satellite.createTle(sat, inc, meanmo, rasc, argPe, meana, ecen, epochyr, epochday, intl, sccNum);\n        searchStr += satSet.insertNewAnalystSatellite(TLE1, TLE2, satNum + i, (100000 + i).toString()).sccNum.toString();\n        if (i !== 359)\n            searchStr += ',';\n    }\n    uiManager.doSearch(searchStr);\n};\n"],"names":[],"sourceRoot":""}