{"version":3,"file":"src_js_plugins_gamepad_gamepad_ts.fc7c55db56f2915f0c63.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAwD;AACxD;AACA;AACA;AACO;AACP,IAAI,mFAA6B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2EAAqB;AACjC;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,gBAAgB,YAAY,EAAE,2EAAqB;AACnD;AACA,QAAQ,mFAA6B;AACrC;AACA;AACA,KAAK;AACL;AACO;AACP,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL,IAAI,mFAA6B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,IAAI,gGAA0C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gGAA0C,GAAG,UAAU;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,MAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,gBAAgB;AAChB,YAAY,0BAA0B,EAAE,2EAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,YAAY,0BAA0B,EAAE,2EAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,YAAY,0BAA0B,EAAE,2EAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,YAAY,YAAY,EAAE,2EAAqB;AAC/C;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA","sources":["webpack://keeptrack.space/./src/js/plugins/gamepad/gamepad.ts"],"sourcesContent":["import { keepTrackApi } from '@app/js/api/keepTrackApi';\nconst gamepadSettings = {\n    deadzone: 0.15,\n};\nexport const init = () => {\n    keepTrackApi.programs.gamepad = {\n        currentState: null,\n    };\n    window.addEventListener('gamepadconnected', (evt) => {\n        if (settingsManager.cruncherReady) {\n            gamepadConnected(event);\n        }\n        else {\n            keepTrackApi.register({\n                method: 'uiManagerInit',\n                cbName: 'gamepad',\n                cb: () => gamepadConnected(evt),\n            });\n        }\n    });\n    window.addEventListener('gamepaddisconnected', () => {\n        const { uiManager } = keepTrackApi.programs;\n        uiManager.toast('Gamepad disconnected', 'critical');\n        keepTrackApi.programs.gamepad = {\n            currentState: null,\n        };\n    });\n};\nexport const initializeGamepad = (gamepad) => {\n    keepTrackApi.register({\n        method: 'updateLoop',\n        cbName: 'gamepad',\n        cb: updateGamepad,\n    });\n    keepTrackApi.programs.gamepad = {\n        settings: gamepadSettings,\n        index: gamepad.index,\n        currentState: null,\n        getController: (index) => getController(index),\n        vibrate: vibrate,\n    };\n};\nexport const updateGamepad = (index) => {\n    index !== null && index !== void 0 ? index : (index = 0);\n    const controller = getController(index);\n    keepTrackApi.programs.gamepad.currentState = controller;\n    updateZoom(controller.buttons[6].value, controller.buttons[7].value);\n    updateLeftStick(controller.axes[0], controller.axes[1]);\n    updateRightStick(controller.axes[2], controller.axes[3]);\n    updateButtons(controller.buttons);\n};\nconst buttonsPressed = [];\nexport const updateButtons = (buttons) => {\n    buttons.forEach((button, index) => {\n        // if the button is pressed and wasnt pressed before\n        if (button.pressed && !buttonsPressed[index]) {\n            // button state is now pressed\n            buttonsPressed[index] = true;\n            // Perform action\n            switch (index) {\n                case 0:\n                    console.log('A');\n                    break;\n                case 1:\n                    console.log('B');\n                    break;\n                case 2:\n                    console.log('X');\n                    break;\n                case 3:\n                    console.log('Y');\n                    keepTrackApi.programs.uiManager.keyHandler({ key: 'C' });\n                    break;\n                case 4:\n                    console.log('Left Bumper');\n                    break;\n                case 5:\n                    console.log('Right Bumper');\n                    break;\n                case 8:\n                    console.log('Home');\n                    break;\n                case 9:\n                    console.log('Start');\n                    break;\n                case 10:\n                    console.log('Left Stick');\n                    break;\n                case 11:\n                    console.log('Right Stick');\n                    break;\n                case 12:\n                    console.log('D-Pad Up');\n                    break;\n                case 13:\n                    console.log('D-Pad Down');\n                    break;\n                case 14:\n                    console.log('D-Pad Left');\n                    break;\n                case 15:\n                    console.log('Right');\n                    break;\n                case 16:\n                    console.log('Xbox Button');\n                    break;\n                default:\n                    // console.debug(`Button ${index}`);\n                    break;\n            }\n            // if the button is not pressed and was pressed before\n        }\n        else if (!button.pressed && buttonsPressed[index]) {\n            // button state is now not pressed\n            buttonsPressed[index] = false;\n        }\n    });\n};\nexport const updateZoom = (zoomOut, zoomIn) => {\n    if (zoomOut === 0 && zoomIn === 0)\n        return; // Not Zooming\n    const { mainCamera, drawManager } = keepTrackApi.programs;\n    let zoomTarget = mainCamera.zoomLevel();\n    switch (mainCamera.cameraType.current) {\n        case mainCamera.cameraType.Default:\n        case mainCamera.cameraType.Offset:\n        case mainCamera.cameraType.FixedToSat:\n            zoomTarget += (zoomOut / 500) * drawManager.dt;\n            zoomTarget -= (zoomIn / 500) * drawManager.dt;\n            mainCamera.zoomTarget(zoomTarget);\n            mainCamera.camZoomSnappedOnSat = false;\n            mainCamera.isCamSnapMode = false;\n            if (zoomTarget < mainCamera.zoomLevel()) {\n                mainCamera.isZoomIn = true;\n            }\n            else {\n                mainCamera.isZoomIn = false;\n            }\n            break;\n        case mainCamera.cameraType.Fps:\n        case mainCamera.cameraType.Satellite:\n        case mainCamera.cameraType.Planetarium:\n        case mainCamera.cameraType.Astronomy:\n            if (zoomOut !== 0) {\n                mainCamera.fpsVertSpeed += Math.pow((zoomOut * 2), 3) * drawManager.dt * settingsManager.cameraMovementSpeed;\n            }\n            if (zoomIn !== 0) {\n                mainCamera.fpsVertSpeed -= Math.pow((zoomIn * 2), 3) * drawManager.dt * settingsManager.cameraMovementSpeed;\n            }\n            break;\n    }\n};\nexport const updateLeftStick = (x, y) => {\n    const { mainCamera, drawManager } = keepTrackApi.programs;\n    if (x > gamepadSettings.deadzone || x < -gamepadSettings.deadzone || y > gamepadSettings.deadzone || y < -gamepadSettings.deadzone) {\n        mainCamera.autoRotate(false);\n        switch (mainCamera.cameraType.current) {\n            case mainCamera.cameraType.Default:\n            case mainCamera.cameraType.Offset:\n            case mainCamera.cameraType.FixedToSat:\n                mainCamera.camAngleSnappedOnSat = false;\n                mainCamera.isCamSnapMode = false;\n                mainCamera.camPitchSpeed -= (Math.pow(y, 3) / 100) * drawManager.dt * settingsManager.cameraMovementSpeed;\n                mainCamera.camYawSpeed += (Math.pow(x, 3) / 100) * drawManager.dt * settingsManager.cameraMovementSpeed;\n                break;\n            case mainCamera.cameraType.Fps:\n            case mainCamera.cameraType.Satellite:\n            case mainCamera.cameraType.Planetarium:\n            case mainCamera.cameraType.Astronomy:\n                if (y > gamepadSettings.deadzone || y < -gamepadSettings.deadzone) {\n                    mainCamera.fpsForwardSpeed = -(Math.pow(y, 3)) * drawManager.dt;\n                }\n                if (x > gamepadSettings.deadzone || x < -gamepadSettings.deadzone) {\n                    mainCamera.fpsSideSpeed = Math.pow(x, 3) * drawManager.dt;\n                }\n                break;\n        }\n    }\n};\nexport const updateRightStick = (x, y) => {\n    const { mainCamera, drawManager } = keepTrackApi.programs;\n    mainCamera.isLocalRotateOverride = false;\n    if (y > gamepadSettings.deadzone || y < -gamepadSettings.deadzone || x > gamepadSettings.deadzone || x < -gamepadSettings.deadzone) {\n        mainCamera.autoRotate(false);\n        switch (mainCamera.cameraType.current) {\n            case mainCamera.cameraType.Default:\n            case mainCamera.cameraType.Offset:\n            case mainCamera.cameraType.FixedToSat:\n                mainCamera.isLocalRotateOverride = true;\n                mainCamera.localRotateDif.pitch = -y * 200;\n                mainCamera.localRotateDif.yaw = -x * 200;\n                break;\n            case mainCamera.cameraType.Fps:\n            case mainCamera.cameraType.Satellite:\n            case mainCamera.cameraType.Planetarium:\n            case mainCamera.cameraType.Astronomy:\n                mainCamera.camPitchSpeed += (y / 50) * drawManager.dt * settingsManager.cameraMovementSpeed;\n                mainCamera.camYawSpeed -= (x / 50) * drawManager.dt * settingsManager.cameraMovementSpeed;\n                break;\n        }\n    }\n};\nexport const vibrate = (vibrateTime, gamepad) => {\n    // If gamepad is not explicit then get the current one\n    gamepad !== null && gamepad !== void 0 ? gamepad : (gamepad = getController());\n    if (!gamepad)\n        return; // No controller - give up\n    gamepad.vibrationActuator.playEffect('dual-rumble', {\n        duration: vibrateTime || 300,\n        strongMagnitude: 1.0,\n        weakMagnitude: 1.0,\n        startDelay: 0,\n    });\n};\nexport const gamepadConnected = (e) => {\n    const { uiManager } = keepTrackApi.programs;\n    uiManager.toast('Gamepad connected', 'normal');\n    initializeGamepad(e.gamepad);\n};\nexport const getController = (index) => {\n    // If gamepad not specified then try the first one\n    index !== null && index !== void 0 ? index : (index = 0);\n    // Get the gamepad or return null if not connected\n    return navigator.getGamepads()[index];\n};\n"],"names":[],"sourceRoot":""}