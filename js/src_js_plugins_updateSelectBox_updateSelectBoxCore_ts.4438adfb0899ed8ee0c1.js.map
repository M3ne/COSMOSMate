{"version":3,"file":"src_js_plugins_updateSelectBox_updateSelectBoxCore_ts.4438adfb0899ed8ee0c1.js","mappings":";;;;;;;;;;;;;;;;;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACwD;AACE;AACnD;AACP;AACA;AACA,gBAAgB,kFAAkF,EAAE,2EAAqB;AACzH;AACA;AACA;AACA,gBAAgB,+GAAyD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA,QAAQ,CAAC;AACT,kGAAkG,oGAA8C;AAChJ,YAAY,gGAA0C;AACtD;AACA;AACA;AACA,YAAY,CAAC;AACb,YAAY,CAAC;AACb;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA;AACA,gBAAgB,CAAC,mEAAmE;AACpF,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB,0HAA0H,0DAAO;AACjI,gBAAgB,CAAC;AACjB,gBAAgB,CAAC,oDAAoD,2DAAQ,4BAA4B;AACzG;AACA;AACA,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB;AACA,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB,gBAAgB,CAAC;AACjB;AACA;AACA;AACA,YAAY,CAAC;AACb,YAAY,CAAC;AACb,YAAY,CAAC;AACb,YAAY,CAAC;AACb,YAAY,CAAC;AACb;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA;AACA;AACA,YAAY,CAAC,0BAA0B,MAAM;AAC7C,YAAY,CAAC,yBAAyB,2BAA2B;AACjE,YAAY,CAAC,6BAA6B,2BAA2B;AACrE,YAAY,CAAC,gCAAgC,2BAA2B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,CAAC;AACzB;AACA;AACA,wBAAwB,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC;AACjB;AACA;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA;AACA;AACA;AACA,CAAC;AACM;AACP;AACA,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL","sources":["webpack://keeptrack.space/./src/js/plugins/updateSelectBox/updateSelectBoxCore.ts"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport { cKmPerMs, DEG2RAD } from '@app/js/lib/constants';\nexport const updateSelectBoxCoreCallback = (sat) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a, _b, _c, _d, _e;\n    try {\n        const { satellite, missileManager, timeManager, objectManager, sensorManager, uiManager } = keepTrackApi.programs;\n        if (typeof sat === 'undefined' || sat == null)\n            throw new Error('updateSelectBoxCoreCallback: sat is undefined');\n        if (!sat.missile) {\n            if (keepTrackApi.programs.objectManager.isSensorManagerLoaded) {\n                sat.getTEARR();\n            }\n        }\n        else {\n            satellite.setTEARR(missileManager.getMissileTEARR(sat));\n        }\n        if (satellite.degreesLong(satellite.currentTEARR.lon) >= 0) {\n            $('#sat-longitude').html(satellite.degreesLong(satellite.currentTEARR.lon).toFixed(3) + '°E');\n        }\n        else {\n            $('#sat-longitude').html((satellite.degreesLong(satellite.currentTEARR.lon) * -1).toFixed(3) + '°W');\n        }\n        if (satellite.degreesLat(satellite.currentTEARR.lat) >= 0) {\n            $('#sat-latitude').html(satellite.degreesLat(satellite.currentTEARR.lat).toFixed(3) + '°N');\n        }\n        else {\n            $('#sat-latitude').html((satellite.degreesLat(satellite.currentTEARR.lat) * -1).toFixed(3) + '°S');\n        }\n        const jday = timeManager.getDayOfYear(timeManager.simulationTimeObj);\n        $('#jday').html(jday);\n        if (((_a = settingsManager.plugins) === null || _a === void 0 ? void 0 : _a.stereoMap) && keepTrackApi.programs.mapManager.isMapMenuOpen && timeManager.realTime > settingsManager.lastMapUpdateTime + 30000) {\n            keepTrackApi.programs.mapManager.updateMap();\n            settingsManager.lastMapUpdateTime = timeManager.realTime;\n        }\n        if (!sat.missile) {\n            $('#sat-altitude').html(sat.getAltitude().toFixed(2) + ' km');\n            $('#sat-velocity').html(sat.velocity.total.toFixed(2) + ' km/s');\n        }\n        else {\n            $('#sat-altitude').html(satellite.currentTEARR.alt.toFixed(2) + ' km');\n        }\n        if (objectManager.isSensorManagerLoaded) {\n            if (satellite.currentTEARR.inView) {\n                $('#sat-azimuth').html(satellite.currentTEARR.az.toFixed(0) + '°'); // Convert to Degrees\n                $('#sat-elevation').html(satellite.currentTEARR.el.toFixed(1) + '°');\n                $('#sat-range').html(satellite.currentTEARR.rng.toFixed(2) + ' km');\n                const beamwidthString = sensorManager.currentSensor[0].beamwidth ? (satellite.currentTEARR.rng * Math.sin(DEG2RAD * sensorManager.currentSensor[0].beamwidth)).toFixed(2) + ' km' : 'Unknown';\n                $('#sat-beamwidth').html(beamwidthString);\n                $('#sat-maxTmx').html(((satellite.currentTEARR.rng / cKmPerMs) * 2).toFixed(2) + ' ms'); // Time for RF to hit target and bounce back\n            }\n            else {\n                $('#sat-azimuth').html('Out of FOV');\n                $('#sat-azimuth').prop('title', 'Azimuth: ' + satellite.currentTEARR.az.toFixed(0) + '°');\n                $('#sat-elevation').html('Out of FOV');\n                $('#sat-elevation').prop('title', 'Elevation: ' + satellite.currentTEARR.el.toFixed(1) + '°');\n                $('#sat-range').html('Out of FOV');\n                $('#sat-range').prop('title', 'Range: ' + satellite.currentTEARR.rng.toFixed(2) + ' km');\n                const beamwidthString = sensorManager.currentSensor[0].beamwidth ? sensorManager.currentSensor[0].beamwidth + '°' : 'Unknown';\n                $('#sat-beamwidth').html('Out of FOV');\n                $('#sat-beamwidth').prop('title', beamwidthString);\n                $('#sat-maxTmx').html('Out of FOV');\n            }\n        }\n        else {\n            $('#sat-azimuth').parent().hide();\n            $('#sat-elevation').parent().hide();\n            $('#sat-range').parent().hide();\n            $('#sat-beamwidth').parent().hide();\n            $('#sat-maxTmx').parent().hide();\n        }\n        if (objectManager.secondarySat !== -1 && ((_c = (_b = document.getElementById('secondary-sat-info')) === null || _b === void 0 ? void 0 : _b.style) === null || _c === void 0 ? void 0 : _c.display) === 'none') {\n            $('#secondary-sat-info').show();\n        }\n        else if (objectManager.secondarySat === -1 && ((_e = (_d = document.getElementById('secondary-sat-info')) === null || _d === void 0 ? void 0 : _d.style) === null || _e === void 0 ? void 0 : _e.display) !== 'none') {\n            $('#secondary-sat-info').hide();\n        }\n        if (objectManager.secondarySat !== -1) {\n            const ric = satellite.sat2ric(objectManager.secondarySatObj, sat);\n            const dist = satellite.distance(sat, objectManager.secondarySatObj).split(' ')[2];\n            $('#sat-sec-dist').html(`${dist} km`);\n            $('#sat-sec-rad').html(`${ric.position[0].toFixed(2)}km`);\n            $('#sat-sec-intrack').html(`${ric.position[1].toFixed(2)}km`);\n            $('#sat-sec-crosstrack').html(`${ric.position[2].toFixed(2)}km`);\n        }\n        if (objectManager.isSensorManagerLoaded) {\n            if (sensorManager.checkSensorSelected()) {\n                // If we didn't just calculate next pass time for this satellite and sensor combination do it\n                // TODO: Make new logic for this to allow it to be updated while selected\n                if (objectManager.selectedSat !== uiManager.lastNextPassCalcSatId && sensorManager.currentSensor[0].shortName !== uiManager.lastNextPassCalcSensorId && !sat.missile) {\n                    if (sat.perigee > sensorManager.currentSensor[0].obsmaxrange) {\n                        $('#sat-nextpass').html('Beyond Max Range');\n                    }\n                    else {\n                        $('#sat-nextpass').html(satellite.nextpass(sat, sensorManager.currentSensor, 2, 5));\n                    }\n                    // IDEA: Code isInSun()\n                    //sun.getXYZ();\n                    //lineManager.create('ref',[sun.sunvar.position.x,sun.sunvar.position.y,sun.sunvar.position.z]);\n                }\n                uiManager.lastNextPassCalcSatId = objectManager.selectedSat;\n                uiManager.lastNextPassCalcSensorId = sensorManager.currentSensor[0].shortName;\n            }\n            else {\n                $('#sat-nextpass').html('Unavailable');\n            }\n        }\n        else {\n            $('#sat-nextpass').parent().hide();\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n});\nexport const init = () => {\n    // Register updateSelectBox\n    keepTrackApi.register({\n        method: 'updateSelectBox',\n        cbName: 'updateSelectBoxCore',\n        cb: updateSelectBoxCoreCallback,\n    });\n};\n"],"names":[],"sourceRoot":""}