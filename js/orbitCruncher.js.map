{"version":3,"file":"orbitCruncher.js","mappings":";;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,GAAG,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtBD,EAAAA,GAAG,GAAGE,MAAM,CAACF,GAAD,CAAZ;AACAC,EAAAA,GAAG,GAAGA,GAAG,IAAI,CAAb;;AACA,SAAOD,GAAG,CAACG,MAAJ,GAAaF,GAApB;AAAyBD,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AAAzB;;AACA,SAAOA,GAAP;AACD,CALD;;AAOA,IAAII,OAAO,GAAG;AACZC,EAAAA,KAAK,EAAE;AACL;AACAC,IAAAA,OAAO,EAAE,0BAFJ;AAGLC,IAAAA,SAAS,EAAE,QAHN;AAILC,IAAAA,UAAU,EAAE,aAJP;AAKLC,IAAAA,QAAQ,EAAE,cALL;AAMLC,IAAAA,QAAQ,EAAE,oBANL;AAOLC,IAAAA,SAAS,EAAE,SAPN;AAQLC,IAAAA,UAAU,EAAE,YARP;AASLC,IAAAA,QAAQ,EAAE,cATL;AAULC,IAAAA,OAAO,EAAE,YAVJ;AAWLC,IAAAA,OAAO,EAAE,UAXJ;AAYLC,IAAAA,WAAW,EAAE,uBAZR;AAaLC,IAAAA,cAAc,EAAE;AAbX,GADK;AAgBZC,EAAAA,IAAI,EAAE;AACJ;AACAC,IAAAA,QAAQ,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,QAAlD,EAA4D,QAA5D,EAAsE,SAAtE,EAAiF,WAAjF,EAA8F,UAA9F,EAA0G,QAA1G,EAAoH,UAApH,CAFN;AAGJC,IAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,EAAqF,SAArF,EAAgG,UAAhG,EAA4G,OAA5G,EAAqH,OAArH,EAA8H,KAA9H,EAAqI,MAArI,EAA6I,MAA7I,EAAqJ,QAArJ,EAA+J,WAA/J,EAA4K,SAA5K,EAAuL,UAAvL,EAAmM,UAAnM;AAHR;AAhBM,CAAd,EAuBA;;AACA,IAAIC,KAAK,GAAG,sFAAZ;AACA,IAAIC,QAAQ,GAAG,6IAAf;AACA,IAAIC,YAAY,GAAG,+BAAnB;;AACA,IAAIC,UAAU,GAAG,SAAbA,UAAa,CAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,GAAtB,EAA2B;AAC1C;AACA,MAAIC,SAAS,CAACzB,MAAV,KAAqB,CAArB,IAA0B0B,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,IAA/B,MAAyC,iBAAnE,IAAwF,CAAC,QAAMQ,IAAN,CAAWR,IAAX,CAA7F,EAA+G;AAC7GC,IAAAA,IAAI,GAAGD,IAAP,CAD6G,CAE7G;;AACAA,IAAAA,IAAI,GAAGS,SAAP;AACD,GANyC,CAQ1C;;;AACAT,EAAAA,IAAI,GAAGA,IAAI,GAAG,IAAIU,IAAJ,CAASV,IAAT,CAAH,GAAoB,IAAIU,IAAJ,EAA/B;AACA,MAAIC,MAAM,CAACC,KAAP,CAAaZ,IAAb,CAAJ,EAAwB,MAAMa,WAAW,0BAAmBb,IAAnB,EAAjB;AAExBC,EAAAA,IAAI,GAAGxB,MAAM,CAACE,OAAO,CAACC,KAAR,CAAcqB,IAAd,KAAuBA,IAAvB,IAA+BtB,OAAO,CAACC,KAAR,CAAc,SAAd,CAAhC,CAAb,CAZ0C,CAc1C;;AACA,MAAIqB,IAAI,CAACa,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,MAAzB,EAAiC;AAC/Bb,IAAAA,IAAI,GAAGA,IAAI,CAACa,KAAL,CAAW,CAAX,CAAP;AACAZ,IAAAA,GAAG,GAAG,IAAN;AACD;;AAED,MAAIa,CAAC,GAAGb,GAAG,GAAG,QAAH,GAAc,KAAzB;;AACA,MAAIc,CAAC,GAAGhB,IAAI,CAACe,CAAC,GAAG,MAAL,CAAJ,EAAR;;AACA,MAAIE,CAAC,GAAGjB,IAAI,CAACe,CAAC,GAAG,KAAL,CAAJ,EAAR;;AACA,MAAIG,CAAC,GAAGlB,IAAI,CAACe,CAAC,GAAG,OAAL,CAAJ,EAAR;;AACA,MAAII,CAAC,GAAGnB,IAAI,CAACe,CAAC,GAAG,UAAL,CAAJ,EAAR;;AACA,MAAIK,CAAC,GAAGpB,IAAI,CAACe,CAAC,GAAG,OAAL,CAAJ,EAAR;;AACA,MAAIM,CAAC,GAAGrB,IAAI,CAACe,CAAC,GAAG,SAAL,CAAJ,EAAR;;AACA,MAAIO,CAAC,GAAGtB,IAAI,CAACe,CAAC,GAAG,SAAL,CAAJ,EAAR;;AACA,MAAIQ,CAAC,GAAGvB,IAAI,CAACe,CAAC,GAAG,cAAL,CAAJ,EAAR;;AACA,MAAIS,CAAC,GAAGtB,GAAG,GAAG,CAAH,GAAOF,IAAI,CAACyB,iBAAL,EAAlB;AACA,MAAIC,KAAK,GAAG;AACVV,IAAAA,CAAC,EAAEA,CADO;AAEVW,IAAAA,EAAE,EAAErD,GAAG,CAAC0C,CAAD,CAFG;AAGVY,IAAAA,GAAG,EAAEjD,OAAO,CAACc,IAAR,CAAaC,QAAb,CAAsBuB,CAAtB,CAHK;AAIVY,IAAAA,IAAI,EAAElD,OAAO,CAACc,IAAR,CAAaC,QAAb,CAAsBuB,CAAC,GAAG,CAA1B,CAJI;AAKVC,IAAAA,CAAC,EAAEA,CAAC,GAAG,CALG;AAMVY,IAAAA,EAAE,EAAExD,GAAG,CAAC4C,CAAC,GAAG,CAAL,CANG;AAOVa,IAAAA,GAAG,EAAEpD,OAAO,CAACc,IAAR,CAAaE,UAAb,CAAwBuB,CAAxB,CAPK;AAQVc,IAAAA,IAAI,EAAErD,OAAO,CAACc,IAAR,CAAaE,UAAb,CAAwBuB,CAAC,GAAG,EAA5B,CARI;AASVe,IAAAA,EAAE,EAAExD,MAAM,CAAC0C,CAAD,CAAN,CAAUL,KAAV,CAAgB,CAAhB,CATM;AAUVoB,IAAAA,IAAI,EAAEf,CAVI;AAWVgB,IAAAA,CAAC,EAAEf,CAAC,GAAG,EAAJ,IAAU,EAXH;AAYVgB,IAAAA,EAAE,EAAE9D,GAAG,CAAC8C,CAAC,GAAG,EAAJ,IAAU,EAAX,CAZG;AAaVA,IAAAA,CAAC,EAAEA,CAbO;AAcViB,IAAAA,EAAE,EAAE/D,GAAG,CAAC8C,CAAD,CAdG;AAeVC,IAAAA,CAAC,EAAEA,CAfO;AAgBViB,IAAAA,EAAE,EAAEhE,GAAG,CAAC+C,CAAD,CAhBG;AAiBVC,IAAAA,CAAC,EAAEA,CAjBO;AAkBViB,IAAAA,EAAE,EAAEjE,GAAG,CAACgD,CAAD,CAlBG;AAmBVkB,IAAAA,CAAC,EAAElE,GAAG,CAACiD,CAAD,EAAI,CAAJ,CAnBI;AAoBVA,IAAAA,CAAC,EAAEjD,GAAG,CAACiD,CAAC,GAAG,EAAJ,GAASkB,IAAI,CAACC,KAAL,CAAWnB,CAAC,GAAG,EAAf,CAAT,GAA8BA,CAA/B,CApBI;AAqBVoB,IAAAA,CAAC,EAAEvB,CAAC,GAAG,EAAJ,GAAS,GAAT,GAAe,GArBR;AAsBVwB,IAAAA,EAAE,EAAExB,CAAC,GAAG,EAAJ,GAAS,IAAT,GAAgB,IAtBV;AAuBVyB,IAAAA,CAAC,EAAEzB,CAAC,GAAG,EAAJ,GAAS,GAAT,GAAe,GAvBR;AAwBV0B,IAAAA,EAAE,EAAE1B,CAAC,GAAG,EAAJ,GAAS,IAAT,GAAgB,IAxBV;AAyBV2B,IAAAA,CAAC,EAAE7C,GAAG,GAAG,KAAH,GAAW,CAACzB,MAAM,CAACuB,IAAD,CAAN,CAAagD,KAAb,CAAmBnD,QAAnB,KAAgC,CAAC,EAAD,CAAjC,EAAuCoD,GAAvC,GAA6CC,OAA7C,CAAqDpD,YAArD,EAAmE,EAAnE,CAzBP;AA0BV0B,IAAAA,CAAC,EAAE,CAACA,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,GAAf,IAAsBlD,GAAG,CAACmE,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACW,GAAL,CAAS5B,CAAT,IAAc,EAAzB,IAA+B,GAA/B,GAAsCiB,IAAI,CAACW,GAAL,CAAS5B,CAAT,IAAc,EAArD,EAA0D,CAA1D,CA1BlB;AA2BV6B,IAAAA,CAAC,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBrC,CAAC,GAAG,EAAJ,GAAS,CAAT,GAAa,CAAb,GAAkB,CAAEA,CAAC,GAAG,GAAL,GAAaA,CAAC,GAAG,EAAjB,KAAyB,EAA1B,IAAgCA,CAAjC,GAAsC,EAAhF;AA3BO,GAAZ;AA8BA,SAAOf,IAAI,CAACiD,OAAL,CAAatD,KAAb,EAAoB,UAAU0D,EAAV,EAAc;AACvC,WAAOA,EAAE,IAAI5B,KAAN,GAAcA,KAAK,CAAC4B,EAAD,CAAnB,GAA0BA,EAAE,CAACxC,KAAH,CAAS,CAAT,EAAYwC,EAAE,CAAC5E,MAAH,GAAY,CAAxB,CAAjC;AACD,GAFM,CAAP;AAGD,CA/DD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;AAEnB,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD;;AAElD,uEAAuE;;AAEvE;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB;;AAErB,uBAAuB;;AAEvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;;AAExsCAAsC;;AAEtC;AACA;AACA;AACA,wBAAwB;;AAExB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC;;AAEhC;AACA;AACA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8HAA8H;;AAE9H,yCAAyC;AACzC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;AAEpB;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA,MAAM;AACN;AACA;;AAEA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;;AAGA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;;AAEvB;AACA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA,IAAI;;;AAGJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sCAAsC;;AAEtC;AACA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;;AAExB;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA,yCAAyC;;AAEzC;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,4DAA4D;;AAE5D;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAEA,mGAAmG;;AAEnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wFAAwF;;AAExF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzuBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB,kCAAkC;AAClC;;AAEA,qCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC;;AAEvC;AACA;;AAEA;AACA;AACA,QAAQ;;;AAGR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qCAAqC;;AAErC;AACA;AACA,MAAM;AACN;AACA;;AAEA,yCAAyC;;AAEzC;AACA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;;AAGN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kKAAkK;;AAElK;AACA;AACA;AACA;AACA;AACA,sDAAsD;;AAEtD,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA,kCAAkC;;AAElC,0CAA0C;;AAE1C;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yCAAyC,SAAS;;AAElD;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sEAAsE,aAAa;AACnF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;;AAEA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;;AAEA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;;AAEA;AACA;AACA;AACA;AACA,oEAAoE;AACpE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa;AACb;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEqP;;;;;;;;;;;;;;;AC/+F9O;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BpC;AACA;AACA;AACA;AACA;AACP;AACA;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,kCAAkC;AAClC,8BAA8B;AAC9B,8BAA8B;AAC9B,mCAAmC;;;;;;;;;;;;;;;ACrB1C;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B,MAAM;AACjC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjigBAAigB,QAAQ;AACzgB;AACA;AACA;AACA;AACA,iBAAiB;AACjiBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iBAAiB;AACjB,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACa;;;;;;;;;;;;;;;;;;;;;AC30B2C;AACA;AACjD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,qCAAqC,gEAAoB;AACzD;AACA;AACA;AACA;AACA;AACO;AACP,oBAAoB,oEAAU;AAC9B;AACA;AACA;AACA;AACO;AACP,oCAAoC;AACpC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9B0C;AACkB;AACqB;AAClC;AACK;AACX;AACzC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAuB;AACvC;AACA;AACA;AACA;AACA;AACA,kBAAkB,mDAAO;AACzB,kBAAkB,mDAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP,kBAAkB,8DAAW,KAAK;AAClC,gBAAgB,sEAAmB;AACnC,iBAAiB,sEAAmB,8BAA8B,mDAAO,gCAAgC,mDAAO;AAChH;AACA,aAAa,8EAA2B;AACxC,gBAAgB,8EAA2B;AAC3C,6BAA6B,mDAAO;AACpC,+BAA+B,mDAAO;AACtC,qCAAqC,mDAAO;AAC5C;AACA,gBAAgB,8DAAW,CAAC,uEAAoB;AAChD,gBAAgB,sEAAmB,aAAa,8CAAE;AAClD;AACA;AACA,mDAAmD;AACnD;AACA,mBAAmB,kDAAkB;AACrC,iCAAiC,iDAAS,qBAAqB,yEAAuB,oBAAoB,0EAAwB;AAClI;AACA;AACA;AACO;AACP,yCAAyC,mDAAO;AAChD,6CAA6C,mDAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,cAAc,6DAAI;AAClB;AACA,mCAAmC,gEAAoB;AACvD,iBAAiB,gDAAgB;AACjC;AACA,mBAAmB;AACnB;AACA;AACA;AACA,eAAe,6DAAI;AACnB;AACA,mCAAmC,gEAAoB;AACvD,qBAAqB,gDAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,CAAC;AACM,kFAAkF,mDAAO,oCAAoC,mDAAO;AACpI;AACP;AACA,8CAA8C,yEAAuB;AACrE;AACA,8CAA8C,0EAAwB;AACtE;AACA,8CAA8C,4EAA0B;AACxE;AACA;AACA;;;;;;;UCxIA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACN0C;AACkB;AACX;AACU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wDAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAwB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wEAAQ;AAChC,qBAAqB,6DAAI;AACzB,uDAAuD;AACvD,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wEAAQ;AAC5C,0BAA0B,6DAAI;AAC9B;AACA,mEAAmE;AACnE,6BAA6B,gDAAgB;AAC7C,6DAA6D,mDAAO;AACpE,6DAA6D,mDAAO;AACpE,6DAA6D,mDAAO;AACpE,6DAA6D,mDAAO;AACpE,oCAAoC,2DAAe;AACnD,wCAAwC,2DAAe;AACvD,wCAAwC,2DAAe;AACvD;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA,gCAAgC,8CAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA","sources":["webpack://keeptrack.space/./src/js/lib/external/dateFormat.js","webpack://keeptrack.space/./node_modules/satellite.js/dist/satellite.es.js","webpack://keeptrack.space/./src/js/api/SpaceObjectType.ts","webpack://keeptrack.space/./src/js/lib/constants.ts","webpack://keeptrack.space/./src/js/lib/external/meuusjs.ts","webpack://keeptrack.space/./src/js/timeManager/transforms.ts","webpack://keeptrack.space/./src/js/webworker/constants.ts","webpack://keeptrack.space/./src/js/webworker/positionCruncher/calculations.ts","webpack://keeptrack.space/webpack/bootstrap","webpack://keeptrack.space/webpack/runtime/define property getters","webpack://keeptrack.space/webpack/runtime/hasOwnProperty shorthand","webpack://keeptrack.space/webpack/runtime/make namespace object","webpack://keeptrack.space/./src/js/webworker/orbitCruncher.ts"],"sourcesContent":["/* */\n\n/*! Date Format 1.2.4\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by:\n * Scott Trenda <scott.trenda.net>\n * Kris Kowal <cixar.com/~kris.kowal/>\n * Theodore Kruczek\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to formats.masks.default.\n */\n\nvar pad = (val, len) => {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) val = '0' + val;\n  return val;\n};\n\nvar formats = {\n  masks: {\n    // Common Formats\n    default: 'ddd mmm dd yyyy HH:MM:ss',\n    shortDate: 'm/d/yy',\n    mediumDate: 'mmm d, yyyy',\n    longDate: 'mmmm d, yyyy',\n    fullDate: 'dddd, mmmm d, yyyy',\n    shortTime: 'h:MM TT',\n    mediumTime: 'h:MM:ss TT',\n    longTime: 'h:MM:ss TT Z',\n    isoDate: 'yyyy-mm-dd',\n    isoTime: 'HH:MM:ss',\n    isoDateTime: \"yyyy-mm-dd' 'HH:MM:ss\",\n    isoUtcDateTime: \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\",\n  },\n  i18n: {\n    // Internationalization strings\n    dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    monthNames: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  },\n};\n\n// eslint-disable-next-line prefer-named-capture-group\nvar token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZ]|\"[^\"]*\"|'[^']*'/gu;\nvar timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/gu;\nvar timezoneClip = /[^-+\\dA-Z]/gu;\nvar dateFormat = function (date, mask, utc) {\n  // You can't provide utc if you skip other args (use the \"UTC:\" mask prefix)\n  if (arguments.length === 1 && Object.prototype.toString.call(date) === '[object String]' && !/\\d/u.test(date)) {\n    mask = date;\n    // eslint-disable-next-line no-undefined\n    date = undefined;\n  }\n\n  // Passing date through Date applies Date.parse, if necessary\n  date = date ? new Date(date) : new Date();\n  if (Number.isNaN(date)) throw SyntaxError(`invalid date - ${date}`);\n\n  mask = String(formats.masks[mask] || mask || formats.masks['default']);\n\n  // Allow setting the utc argument via the mask\n  if (mask.slice(0, 4) === 'UTC:') {\n    mask = mask.slice(4);\n    utc = true;\n  }\n\n  var _ = utc ? 'getUTC' : 'get';\n  var d = date[_ + 'Date']();\n  var D = date[_ + 'Day']();\n  var m = date[_ + 'Month']();\n  var y = date[_ + 'FullYear']();\n  var H = date[_ + 'Hours']();\n  var M = date[_ + 'Minutes']();\n  var s = date[_ + 'Seconds']();\n  var L = date[_ + 'Milliseconds']();\n  var o = utc ? 0 : date.getTimezoneOffset();\n  var flags = {\n    d: d,\n    dd: pad(d),\n    ddd: formats.i18n.dayNames[D],\n    dddd: formats.i18n.dayNames[D + 7],\n    m: m + 1,\n    mm: pad(m + 1),\n    mmm: formats.i18n.monthNames[m],\n    mmmm: formats.i18n.monthNames[m + 12],\n    yy: String(y).slice(2),\n    yyyy: y,\n    h: H % 12 || 12,\n    hh: pad(H % 12 || 12),\n    H: H,\n    HH: pad(H),\n    M: M,\n    MM: pad(M),\n    s: s,\n    ss: pad(s),\n    l: pad(L, 3),\n    L: pad(L > 99 ? Math.round(L / 10) : L),\n    t: H < 12 ? 'a' : 'p',\n    tt: H < 12 ? 'am' : 'pm',\n    T: H < 12 ? 'A' : 'P',\n    TT: H < 12 ? 'AM' : 'PM',\n    Z: utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n    o: (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + (Math.abs(o) % 60), 4),\n    S: ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (((d % 100) - (d % 10) !== 10) * d) % 10],\n  };\n\n  return mask.replace(token, function ($0) {\n    return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n  });\n};\n\nexport { dateFormat };\n","/*!\n * satellite-js v4.1.3\n * (c) 2013 Shashwat Kandadai and UCSC\n * https://github.com/shashwatak/satellite-js\n * License: MIT\n */\n\nvar pi = Math.PI;\nvar twoPi = pi * 2;\nvar deg2rad = pi / 180.0;\nvar rad2deg = 180 / pi;\nvar minutesPerDay = 1440.0;\nvar mu = 398600.5; // in km3 / s2\n\nvar earthRadius = 6378.137; // in km\n\nvar xke = 60.0 / Math.sqrt(earthRadius * earthRadius * earthRadius / mu);\nvar vkmpersec = earthRadius * xke / 60.0;\nvar tumin = 1.0 / xke;\nvar j2 = 0.00108262998905;\nvar j3 = -0.00000253215306;\nvar j4 = -0.00000161098761;\nvar j3oj2 = j3 / j2;\nvar x2o3 = 2.0 / 3.0;\n\nvar constants = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  pi: pi,\n  twoPi: twoPi,\n  deg2rad: deg2rad,\n  rad2deg: rad2deg,\n  minutesPerDay: minutesPerDay,\n  mu: mu,\n  earthRadius: earthRadius,\n  xke: xke,\n  vkmpersec: vkmpersec,\n  tumin: tumin,\n  j2: j2,\n  j3: j3,\n  j4: j4,\n  j3oj2: j3oj2,\n  x2o3: x2o3\n});\n\n/* -----------------------------------------------------------------------------\n *\n *                           procedure days2mdhms\n *\n *  this procedure converts the day of the year, days, to the equivalent month\n *    day, hour, minute and second.\n *\n *  algorithm     : set up array for the number of days per month\n *                  find leap year - use 1900 because 2000 is a leap year\n *                  loop through a temp value while the value is < the days\n *                  perform int conversions to the correct day and month\n *                  convert remainder into h m s using type conversions\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    year        - year                           1900 .. 2100\n *    days        - julian day of the year         0.0  .. 366.0\n *\n *  outputs       :\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - hour                           0 .. 23\n *    min         - minute                         0 .. 59\n *    sec         - second                         0.0 .. 59.999\n *\n *  locals        :\n *    dayofyr     - day of year\n *    temp        - temporary extended values\n *    inttemp     - temporary int value\n *    i           - index\n *    lmonth[12]  - int array containing the number of days per month\n *\n *  coupling      :\n *    none.\n * --------------------------------------------------------------------------- */\nfunction days2mdhms(year, days) {\n  var lmonth = [31, year % 4 === 0 ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  var dayofyr = Math.floor(days); //  ----------------- find month and day of month ----------------\n\n  var i = 1;\n  var inttemp = 0;\n\n  while (dayofyr > inttemp + lmonth[i - 1] && i < 12) {\n    inttemp += lmonth[i - 1];\n    i += 1;\n  }\n\n  var mon = i;\n  var day = dayofyr - inttemp; //  ----------------- find hours minutes and seconds -------------\n\n  var temp = (days - dayofyr) * 24.0;\n  var hr = Math.floor(temp);\n  temp = (temp - hr) * 60.0;\n  var minute = Math.floor(temp);\n  var sec = (temp - minute) * 60.0;\n  return {\n    mon: mon,\n    day: day,\n    hr: hr,\n    minute: minute,\n    sec: sec\n  };\n}\n/* -----------------------------------------------------------------------------\n *\n *                           procedure jday\n *\n *  this procedure finds the julian date given the year, month, day, and time.\n *    the julian date is defined by each elapsed day since noon, jan 1, 4713 bc.\n *\n *  algorithm     : calculate the answer in one step for efficiency\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    year        - year                           1900 .. 2100\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - universal time hour            0 .. 23\n *    min         - universal time min             0 .. 59\n *    sec         - universal time sec             0.0 .. 59.999\n *\n *  outputs       :\n *    jd          - julian date                    days from 4713 bc\n *\n *  locals        :\n *    none.\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    vallado       2007, 189, alg 14, ex 3-14\n *\n * --------------------------------------------------------------------------- */\n\nfunction jdayInternal(year, mon, day, hr, minute, sec) {\n  var msec = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  return 367.0 * year - Math.floor(7 * (year + Math.floor((mon + 9) / 12.0)) * 0.25) + Math.floor(275 * mon / 9.0) + day + 1721013.5 + ((msec / 60000 + sec / 60.0 + minute) / 60.0 + hr) / 24.0 // ut in days\n  // # - 0.5*sgn(100.0*year + mon - 190002.5) + 0.5;\n  ;\n}\n\nfunction jday(year, mon, day, hr, minute, sec, msec) {\n  if (year instanceof Date) {\n    var date = year;\n    return jdayInternal(date.getUTCFullYear(), date.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n    date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  }\n\n  return jdayInternal(year, mon, day, hr, minute, sec, msec);\n}\n/* -----------------------------------------------------------------------------\n *\n *                           procedure invjday\n *\n *  this procedure finds the year, month, day, hour, minute and second\n *  given the julian date. tu can be ut1, tdt, tdb, etc.\n *\n *  algorithm     : set up starting values\n *                  find leap year - use 1900 because 2000 is a leap year\n *                  find the elapsed days through the year in a loop\n *                  call routine to find each individual value\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    jd          - julian date                    days from 4713 bc\n *\n *  outputs       :\n *    year        - year                           1900 .. 2100\n *    mon         - month                          1 .. 12\n *    day         - day                            1 .. 28,29,30,31\n *    hr          - hour                           0 .. 23\n *    min         - minute                         0 .. 59\n *    sec         - second                         0.0 .. 59.999\n *\n *  locals        :\n *    days        - day of year plus fractional\n *                  portion of a day               days\n *    tu          - julian centuries from 0 h\n *                  jan 0, 1900\n *    temp        - temporary double values\n *    leapyrs     - number of leap years from 1900\n *\n *  coupling      :\n *    days2mdhms  - finds month, day, hour, minute and second given days and year\n *\n *  references    :\n *    vallado       2007, 208, alg 22, ex 3-13\n * --------------------------------------------------------------------------- */\n\nfunction invjday(jd, asArray) {\n  // --------------- find year and days of the year -\n  var temp = jd - 2415019.5;\n  var tu = temp / 365.25;\n  var year = 1900 + Math.floor(tu);\n  var leapyrs = Math.floor((year - 1901) * 0.25); // optional nudge by 8.64x10-7 sec to get even outputs\n\n  var days = temp - ((year - 1900) * 365.0 + leapyrs) + 0.00000000001; // ------------ check for case of beginning of a year -----------\n\n  if (days < 1.0) {\n    year -= 1;\n    leapyrs = Math.floor((year - 1901) * 0.25);\n    days = temp - ((year - 1900) * 365.0 + leapyrs);\n  } // ----------------- find remaing data  -------------------------\n\n\n  var mdhms = days2mdhms(year, days);\n  var mon = mdhms.mon,\n      day = mdhms.day,\n      hr = mdhms.hr,\n      minute = mdhms.minute;\n  var sec = mdhms.sec - 0.00000086400;\n\n  if (asArray) {\n    return [year, mon, day, hr, minute, Math.floor(sec)];\n  }\n\n  return new Date(Date.UTC(year, mon - 1, day, hr, minute, Math.floor(sec)));\n}\n\n/* -----------------------------------------------------------------------------\n *\n *                           procedure dpper\n *\n *  this procedure provides deep space long period periodic contributions\n *    to the mean elements.  by design, these periodics are zero at epoch.\n *    this used to be dscom which included initialization, but it's really a\n *    recurring function.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    e3          -\n *    ee2         -\n *    peo         -\n *    pgho        -\n *    pho         -\n *    pinco       -\n *    plo         -\n *    se2 , se3 , sgh2, sgh3, sgh4, sh2, sh3, si2, si3, sl2, sl3, sl4 -\n *    t           -\n *    xh2, xh3, xi2, xi3, xl2, xl3, xl4 -\n *    zmol        -\n *    zmos        -\n *    ep          - eccentricity                           0.0 - 1.0\n *    inclo       - inclination - needed for lyddane modification\n *    nodep       - right ascension of ascending node\n *    argpp       - argument of perigee\n *    mp          - mean anomaly\n *\n *  outputs       :\n *    ep          - eccentricity                           0.0 - 1.0\n *    inclp       - inclination\n *    nodep        - right ascension of ascending node\n *    argpp       - argument of perigee\n *    mp          - mean anomaly\n *\n *  locals        :\n *    alfdp       -\n *    betdp       -\n *    cosip  , sinip  , cosop  , sinop  ,\n *    dalf        -\n *    dbet        -\n *    dls         -\n *    f2, f3      -\n *    pe          -\n *    pgh         -\n *    ph          -\n *    pinc        -\n *    pl          -\n *    sel   , ses   , sghl  , sghs  , shl   , shs   , sil   , sinzf , sis   ,\n *    sll   , sls\n *    xls         -\n *    xnoh        -\n *    zf          -\n *    zm          -\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction dpper(satrec, options) {\n  var e3 = satrec.e3,\n      ee2 = satrec.ee2,\n      peo = satrec.peo,\n      pgho = satrec.pgho,\n      pho = satrec.pho,\n      pinco = satrec.pinco,\n      plo = satrec.plo,\n      se2 = satrec.se2,\n      se3 = satrec.se3,\n      sgh2 = satrec.sgh2,\n      sgh3 = satrec.sgh3,\n      sgh4 = satrec.sgh4,\n      sh2 = satrec.sh2,\n      sh3 = satrec.sh3,\n      si2 = satrec.si2,\n      si3 = satrec.si3,\n      sl2 = satrec.sl2,\n      sl3 = satrec.sl3,\n      sl4 = satrec.sl4,\n      t = satrec.t,\n      xgh2 = satrec.xgh2,\n      xgh3 = satrec.xgh3,\n      xgh4 = satrec.xgh4,\n      xh2 = satrec.xh2,\n      xh3 = satrec.xh3,\n      xi2 = satrec.xi2,\n      xi3 = satrec.xi3,\n      xl2 = satrec.xl2,\n      xl3 = satrec.xl3,\n      xl4 = satrec.xl4,\n      zmol = satrec.zmol,\n      zmos = satrec.zmos;\n  var init = options.init,\n      opsmode = options.opsmode;\n  var ep = options.ep,\n      inclp = options.inclp,\n      nodep = options.nodep,\n      argpp = options.argpp,\n      mp = options.mp; // Copy satellite attributes into local variables for convenience\n  // and symmetry in writing formulae.\n\n  var alfdp;\n  var betdp;\n  var cosip;\n  var sinip;\n  var cosop;\n  var sinop;\n  var dalf;\n  var dbet;\n  var dls;\n  var f2;\n  var f3;\n  var pe;\n  var pgh;\n  var ph;\n  var pinc;\n  var pl;\n  var sinzf;\n  var xls;\n  var xnoh;\n  var zf;\n  var zm; //  ---------------------- constants -----------------------------\n\n  var zns = 1.19459e-5;\n  var zes = 0.01675;\n  var znl = 1.5835218e-4;\n  var zel = 0.05490; //  --------------- calculate time varying periodics -----------\n\n  zm = zmos + zns * t; // be sure that the initial call has time set to zero\n\n  if (init === 'y') {\n    zm = zmos;\n  }\n\n  zf = zm + 2.0 * zes * Math.sin(zm);\n  sinzf = Math.sin(zf);\n  f2 = 0.5 * sinzf * sinzf - 0.25;\n  f3 = -0.5 * sinzf * Math.cos(zf);\n  var ses = se2 * f2 + se3 * f3;\n  var sis = si2 * f2 + si3 * f3;\n  var sls = sl2 * f2 + sl3 * f3 + sl4 * sinzf;\n  var sghs = sgh2 * f2 + sgh3 * f3 + sgh4 * sinzf;\n  var shs = sh2 * f2 + sh3 * f3;\n  zm = zmol + znl * t;\n\n  if (init === 'y') {\n    zm = zmol;\n  }\n\n  zf = zm + 2.0 * zel * Math.sin(zm);\n  sinzf = Math.sin(zf);\n  f2 = 0.5 * sinzf * sinzf - 0.25;\n  f3 = -0.5 * sinzf * Math.cos(zf);\n  var sel = ee2 * f2 + e3 * f3;\n  var sil = xi2 * f2 + xi3 * f3;\n  var sll = xl2 * f2 + xl3 * f3 + xl4 * sinzf;\n  var sghl = xgh2 * f2 + xgh3 * f3 + xgh4 * sinzf;\n  var shll = xh2 * f2 + xh3 * f3;\n  pe = ses + sel;\n  pinc = sis + sil;\n  pl = sls + sll;\n  pgh = sghs + sghl;\n  ph = shs + shll;\n\n  if (init === 'n') {\n    pe -= peo;\n    pinc -= pinco;\n    pl -= plo;\n    pgh -= pgho;\n    ph -= pho;\n    inclp += pinc;\n    ep += pe;\n    sinip = Math.sin(inclp);\n    cosip = Math.cos(inclp);\n    /* ----------------- apply periodics directly ------------ */\n    // sgp4fix for lyddane choice\n    // strn3 used original inclination - this is technically feasible\n    // gsfc used perturbed inclination - also technically feasible\n    // probably best to readjust the 0.2 limit value and limit discontinuity\n    // 0.2 rad = 11.45916 deg\n    // use next line for original strn3 approach and original inclination\n    // if (inclo >= 0.2)\n    // use next line for gsfc version and perturbed inclination\n\n    if (inclp >= 0.2) {\n      ph /= sinip;\n      pgh -= cosip * ph;\n      argpp += pgh;\n      nodep += ph;\n      mp += pl;\n    } else {\n      //  ---- apply periodics with lyddane modification ----\n      sinop = Math.sin(nodep);\n      cosop = Math.cos(nodep);\n      alfdp = sinip * sinop;\n      betdp = sinip * cosop;\n      dalf = ph * cosop + pinc * cosip * sinop;\n      dbet = -ph * sinop + pinc * cosip * cosop;\n      alfdp += dalf;\n      betdp += dbet;\n      nodep %= twoPi; //  sgp4fix for afspc written intrinsic functions\n      //  nodep used without a trigonometric function ahead\n\n      if (nodep < 0.0 && opsmode === 'a') {\n        nodep += twoPi;\n      }\n\n      xls = mp + argpp + cosip * nodep;\n      dls = pl + pgh - pinc * nodep * sinip;\n      xls += dls;\n      xnoh = nodep;\n      nodep = Math.atan2(alfdp, betdp); //  sgp4fix for afspc written intrinsic functions\n      //  nodep used without a trigonometric function ahead\n\n      if (nodep < 0.0 && opsmode === 'a') {\n        nodep += twoPi;\n      }\n\n      if (Math.abs(xnoh - nodep) > pi) {\n        if (nodep < xnoh) {\n          nodep += twoPi;\n        } else {\n          nodep -= twoPi;\n        }\n      }\n\n      mp += pl;\n      argpp = xls - mp - cosip * nodep;\n    }\n  }\n\n  return {\n    ep: ep,\n    inclp: inclp,\n    nodep: nodep,\n    argpp: argpp,\n    mp: mp\n  };\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dscom\n *\n *  this procedure provides deep space common items used by both the secular\n *    and periodics subroutines.  input is provided as shown. this routine\n *    used to be called dpper, but the functions inside weren't well organized.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    epoch       -\n *    ep          - eccentricity\n *    argpp       - argument of perigee\n *    tc          -\n *    inclp       - inclination\n *    nodep       - right ascension of ascending node\n *    np          - mean motion\n *\n *  outputs       :\n *    sinim  , cosim  , sinomm , cosomm , snodm  , cnodm\n *    day         -\n *    e3          -\n *    ee2         -\n *    em          - eccentricity\n *    emsq        - eccentricity squared\n *    gam         -\n *    peo         -\n *    pgho        -\n *    pho         -\n *    pinco       -\n *    plo         -\n *    rtemsq      -\n *    se2, se3         -\n *    sgh2, sgh3, sgh4        -\n *    sh2, sh3, si2, si3, sl2, sl3, sl4         -\n *    s1, s2, s3, s4, s5, s6, s7          -\n *    ss1, ss2, ss3, ss4, ss5, ss6, ss7, sz1, sz2, sz3         -\n *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n *    xgh2, xgh3, xgh4, xh2, xh3, xi2, xi3, xl2, xl3, xl4         -\n *    nm          - mean motion\n *    z1, z2, z3, z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n *    zmol        -\n *    zmos        -\n *\n *  locals        :\n *    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10         -\n *    betasq      -\n *    cc          -\n *    ctem, stem        -\n *    x1, x2, x3, x4, x5, x6, x7, x8          -\n *    xnodce      -\n *    xnoi        -\n *    zcosg  , zsing  , zcosgl , zsingl , zcosh  , zsinh  , zcoshl , zsinhl ,\n *    zcosi  , zsini  , zcosil , zsinil ,\n *    zx          -\n *    zy          -\n *\n *  coupling      :\n *    none.\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction dscom(options) {\n  var epoch = options.epoch,\n      ep = options.ep,\n      argpp = options.argpp,\n      tc = options.tc,\n      inclp = options.inclp,\n      nodep = options.nodep,\n      np = options.np;\n  var a1;\n  var a2;\n  var a3;\n  var a4;\n  var a5;\n  var a6;\n  var a7;\n  var a8;\n  var a9;\n  var a10;\n  var cc;\n  var x1;\n  var x2;\n  var x3;\n  var x4;\n  var x5;\n  var x6;\n  var x7;\n  var x8;\n  var zcosg;\n  var zsing;\n  var zcosh;\n  var zsinh;\n  var zcosi;\n  var zsini;\n  var ss1;\n  var ss2;\n  var ss3;\n  var ss4;\n  var ss5;\n  var ss6;\n  var ss7;\n  var sz1;\n  var sz2;\n  var sz3;\n  var sz11;\n  var sz12;\n  var sz13;\n  var sz21;\n  var sz22;\n  var sz23;\n  var sz31;\n  var sz32;\n  var sz33;\n  var s1;\n  var s2;\n  var s3;\n  var s4;\n  var s5;\n  var s6;\n  var s7;\n  var z1;\n  var z2;\n  var z3;\n  var z11;\n  var z12;\n  var z13;\n  var z21;\n  var z22;\n  var z23;\n  var z31;\n  var z32;\n  var z33; // -------------------------- constants -------------------------\n\n  var zes = 0.01675;\n  var zel = 0.05490;\n  var c1ss = 2.9864797e-6;\n  var c1l = 4.7968065e-7;\n  var zsinis = 0.39785416;\n  var zcosis = 0.91744867;\n  var zcosgs = 0.1945905;\n  var zsings = -0.98088458; //  --------------------- local variables ------------------------\n\n  var nm = np;\n  var em = ep;\n  var snodm = Math.sin(nodep);\n  var cnodm = Math.cos(nodep);\n  var sinomm = Math.sin(argpp);\n  var cosomm = Math.cos(argpp);\n  var sinim = Math.sin(inclp);\n  var cosim = Math.cos(inclp);\n  var emsq = em * em;\n  var betasq = 1.0 - emsq;\n  var rtemsq = Math.sqrt(betasq); //  ----------------- initialize lunar solar terms ---------------\n\n  var peo = 0.0;\n  var pinco = 0.0;\n  var plo = 0.0;\n  var pgho = 0.0;\n  var pho = 0.0;\n  var day = epoch + 18261.5 + tc / 1440.0;\n  var xnodce = (4.5236020 - 9.2422029e-4 * day) % twoPi;\n  var stem = Math.sin(xnodce);\n  var ctem = Math.cos(xnodce);\n  var zcosil = 0.91375164 - 0.03568096 * ctem;\n  var zsinil = Math.sqrt(1.0 - zcosil * zcosil);\n  var zsinhl = 0.089683511 * stem / zsinil;\n  var zcoshl = Math.sqrt(1.0 - zsinhl * zsinhl);\n  var gam = 5.8351514 + 0.0019443680 * day;\n  var zx = 0.39785416 * stem / zsinil;\n  var zy = zcoshl * ctem + 0.91744867 * zsinhl * stem;\n  zx = Math.atan2(zx, zy);\n  zx += gam - xnodce;\n  var zcosgl = Math.cos(zx);\n  var zsingl = Math.sin(zx); //  ------------------------- do solar terms ---------------------\n\n  zcosg = zcosgs;\n  zsing = zsings;\n  zcosi = zcosis;\n  zsini = zsinis;\n  zcosh = cnodm;\n  zsinh = snodm;\n  cc = c1ss;\n  var xnoi = 1.0 / nm;\n  var lsflg = 0;\n\n  while (lsflg < 2) {\n    lsflg += 1;\n    a1 = zcosg * zcosh + zsing * zcosi * zsinh;\n    a3 = -zsing * zcosh + zcosg * zcosi * zsinh;\n    a7 = -zcosg * zsinh + zsing * zcosi * zcosh;\n    a8 = zsing * zsini;\n    a9 = zsing * zsinh + zcosg * zcosi * zcosh;\n    a10 = zcosg * zsini;\n    a2 = cosim * a7 + sinim * a8;\n    a4 = cosim * a9 + sinim * a10;\n    a5 = -sinim * a7 + cosim * a8;\n    a6 = -sinim * a9 + cosim * a10;\n    x1 = a1 * cosomm + a2 * sinomm;\n    x2 = a3 * cosomm + a4 * sinomm;\n    x3 = -a1 * sinomm + a2 * cosomm;\n    x4 = -a3 * sinomm + a4 * cosomm;\n    x5 = a5 * sinomm;\n    x6 = a6 * sinomm;\n    x7 = a5 * cosomm;\n    x8 = a6 * cosomm;\n    z31 = 12.0 * x1 * x1 - 3.0 * x3 * x3;\n    z32 = 24.0 * x1 * x2 - 6.0 * x3 * x4;\n    z33 = 12.0 * x2 * x2 - 3.0 * x4 * x4;\n    z1 = 3.0 * (a1 * a1 + a2 * a2) + z31 * emsq;\n    z2 = 6.0 * (a1 * a3 + a2 * a4) + z32 * emsq;\n    z3 = 3.0 * (a3 * a3 + a4 * a4) + z33 * emsq;\n    z11 = -6.0 * a1 * a5 + emsq * (-24.0 * x1 * x7 - 6.0 * x3 * x5);\n    z12 = -6.0 * (a1 * a6 + a3 * a5) + emsq * (-24.0 * (x2 * x7 + x1 * x8) + -6.0 * (x3 * x6 + x4 * x5));\n    z13 = -6.0 * a3 * a6 + emsq * (-24.0 * x2 * x8 - 6.0 * x4 * x6);\n    z21 = 6.0 * a2 * a5 + emsq * (24.0 * x1 * x5 - 6.0 * x3 * x7);\n    z22 = 6.0 * (a4 * a5 + a2 * a6) + emsq * (24.0 * (x2 * x5 + x1 * x6) - 6.0 * (x4 * x7 + x3 * x8));\n    z23 = 6.0 * a4 * a6 + emsq * (24.0 * x2 * x6 - 6.0 * x4 * x8);\n    z1 = z1 + z1 + betasq * z31;\n    z2 = z2 + z2 + betasq * z32;\n    z3 = z3 + z3 + betasq * z33;\n    s3 = cc * xnoi;\n    s2 = -0.5 * s3 / rtemsq;\n    s4 = s3 * rtemsq;\n    s1 = -15.0 * em * s4;\n    s5 = x1 * x3 + x2 * x4;\n    s6 = x2 * x3 + x1 * x4;\n    s7 = x2 * x4 - x1 * x3; //  ----------------------- do lunar terms -------------------\n\n    if (lsflg === 1) {\n      ss1 = s1;\n      ss2 = s2;\n      ss3 = s3;\n      ss4 = s4;\n      ss5 = s5;\n      ss6 = s6;\n      ss7 = s7;\n      sz1 = z1;\n      sz2 = z2;\n      sz3 = z3;\n      sz11 = z11;\n      sz12 = z12;\n      sz13 = z13;\n      sz21 = z21;\n      sz22 = z22;\n      sz23 = z23;\n      sz31 = z31;\n      sz32 = z32;\n      sz33 = z33;\n      zcosg = zcosgl;\n      zsing = zsingl;\n      zcosi = zcosil;\n      zsini = zsinil;\n      zcosh = zcoshl * cnodm + zsinhl * snodm;\n      zsinh = snodm * zcoshl - cnodm * zsinhl;\n      cc = c1l;\n    }\n  }\n\n  var zmol = (4.7199672 + (0.22997150 * day - gam)) % twoPi;\n  var zmos = (6.2565837 + 0.017201977 * day) % twoPi; //  ------------------------ do solar terms ----------------------\n\n  var se2 = 2.0 * ss1 * ss6;\n  var se3 = 2.0 * ss1 * ss7;\n  var si2 = 2.0 * ss2 * sz12;\n  var si3 = 2.0 * ss2 * (sz13 - sz11);\n  var sl2 = -2.0 * ss3 * sz2;\n  var sl3 = -2.0 * ss3 * (sz3 - sz1);\n  var sl4 = -2.0 * ss3 * (-21.0 - 9.0 * emsq) * zes;\n  var sgh2 = 2.0 * ss4 * sz32;\n  var sgh3 = 2.0 * ss4 * (sz33 - sz31);\n  var sgh4 = -18.0 * ss4 * zes;\n  var sh2 = -2.0 * ss2 * sz22;\n  var sh3 = -2.0 * ss2 * (sz23 - sz21); //  ------------------------ do lunar terms ----------------------\n\n  var ee2 = 2.0 * s1 * s6;\n  var e3 = 2.0 * s1 * s7;\n  var xi2 = 2.0 * s2 * z12;\n  var xi3 = 2.0 * s2 * (z13 - z11);\n  var xl2 = -2.0 * s3 * z2;\n  var xl3 = -2.0 * s3 * (z3 - z1);\n  var xl4 = -2.0 * s3 * (-21.0 - 9.0 * emsq) * zel;\n  var xgh2 = 2.0 * s4 * z32;\n  var xgh3 = 2.0 * s4 * (z33 - z31);\n  var xgh4 = -18.0 * s4 * zel;\n  var xh2 = -2.0 * s2 * z22;\n  var xh3 = -2.0 * s2 * (z23 - z21);\n  return {\n    snodm: snodm,\n    cnodm: cnodm,\n    sinim: sinim,\n    cosim: cosim,\n    sinomm: sinomm,\n    cosomm: cosomm,\n    day: day,\n    e3: e3,\n    ee2: ee2,\n    em: em,\n    emsq: emsq,\n    gam: gam,\n    peo: peo,\n    pgho: pgho,\n    pho: pho,\n    pinco: pinco,\n    plo: plo,\n    rtemsq: rtemsq,\n    se2: se2,\n    se3: se3,\n    sgh2: sgh2,\n    sgh3: sgh3,\n    sgh4: sgh4,\n    sh2: sh2,\n    sh3: sh3,\n    si2: si2,\n    si3: si3,\n    sl2: sl2,\n    sl3: sl3,\n    sl4: sl4,\n    s1: s1,\n    s2: s2,\n    s3: s3,\n    s4: s4,\n    s5: s5,\n    s6: s6,\n    s7: s7,\n    ss1: ss1,\n    ss2: ss2,\n    ss3: ss3,\n    ss4: ss4,\n    ss5: ss5,\n    ss6: ss6,\n    ss7: ss7,\n    sz1: sz1,\n    sz2: sz2,\n    sz3: sz3,\n    sz11: sz11,\n    sz12: sz12,\n    sz13: sz13,\n    sz21: sz21,\n    sz22: sz22,\n    sz23: sz23,\n    sz31: sz31,\n    sz32: sz32,\n    sz33: sz33,\n    xgh2: xgh2,\n    xgh3: xgh3,\n    xgh4: xgh4,\n    xh2: xh2,\n    xh3: xh3,\n    xi2: xi2,\n    xi3: xi3,\n    xl2: xl2,\n    xl3: xl3,\n    xl4: xl4,\n    nm: nm,\n    z1: z1,\n    z2: z2,\n    z3: z3,\n    z11: z11,\n    z12: z12,\n    z13: z13,\n    z21: z21,\n    z22: z22,\n    z23: z23,\n    z31: z31,\n    z32: z32,\n    z33: z33,\n    zmol: zmol,\n    zmos: zmos\n  };\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dsinit\n *\n *  this procedure provides deep space contributions to mean motion dot due\n *    to geopotential resonance with half day and one day orbits.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    cosim, sinim-\n *    emsq        - eccentricity squared\n *    argpo       - argument of perigee\n *    s1, s2, s3, s4, s5      -\n *    ss1, ss2, ss3, ss4, ss5 -\n *    sz1, sz3, sz11, sz13, sz21, sz23, sz31, sz33 -\n *    t           - time\n *    tc          -\n *    gsto        - greenwich sidereal time                   rad\n *    mo          - mean anomaly\n *    mdot        - mean anomaly dot (rate)\n *    no          - mean motion\n *    nodeo       - right ascension of ascending node\n *    nodedot     - right ascension of ascending node dot (rate)\n *    xpidot      -\n *    z1, z3, z11, z13, z21, z23, z31, z33 -\n *    eccm        - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    xn          - mean motion\n *    nodem       - right ascension of ascending node\n *\n *  outputs       :\n *    em          - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    nodem       - right ascension of ascending node\n *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n *    atime       -\n *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433    -\n *    dedt        -\n *    didt        -\n *    dmdt        -\n *    dndt        -\n *    dnodt       -\n *    domdt       -\n *    del1, del2, del3        -\n *    ses  , sghl , sghs , sgs  , shl  , shs  , sis  , sls\n *    theta       -\n *    xfact       -\n *    xlamo       -\n *    xli         -\n *    xni\n *\n *  locals        :\n *    ainv2       -\n *    aonv        -\n *    cosisq      -\n *    eoc         -\n *    f220, f221, f311, f321, f322, f330, f441, f442, f522, f523, f542, f543  -\n *    g200, g201, g211, g300, g310, g322, g410, g422, g520, g521, g532, g533  -\n *    sini2       -\n *    temp        -\n *    temp1       -\n *    theta       -\n *    xno2        -\n *\n *  coupling      :\n *    getgravconst\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction dsinit(options) {\n  var cosim = options.cosim,\n      argpo = options.argpo,\n      s1 = options.s1,\n      s2 = options.s2,\n      s3 = options.s3,\n      s4 = options.s4,\n      s5 = options.s5,\n      sinim = options.sinim,\n      ss1 = options.ss1,\n      ss2 = options.ss2,\n      ss3 = options.ss3,\n      ss4 = options.ss4,\n      ss5 = options.ss5,\n      sz1 = options.sz1,\n      sz3 = options.sz3,\n      sz11 = options.sz11,\n      sz13 = options.sz13,\n      sz21 = options.sz21,\n      sz23 = options.sz23,\n      sz31 = options.sz31,\n      sz33 = options.sz33,\n      t = options.t,\n      tc = options.tc,\n      gsto = options.gsto,\n      mo = options.mo,\n      mdot = options.mdot,\n      no = options.no,\n      nodeo = options.nodeo,\n      nodedot = options.nodedot,\n      xpidot = options.xpidot,\n      z1 = options.z1,\n      z3 = options.z3,\n      z11 = options.z11,\n      z13 = options.z13,\n      z21 = options.z21,\n      z23 = options.z23,\n      z31 = options.z31,\n      z33 = options.z33,\n      ecco = options.ecco,\n      eccsq = options.eccsq;\n  var emsq = options.emsq,\n      em = options.em,\n      argpm = options.argpm,\n      inclm = options.inclm,\n      mm = options.mm,\n      nm = options.nm,\n      nodem = options.nodem,\n      irez = options.irez,\n      atime = options.atime,\n      d2201 = options.d2201,\n      d2211 = options.d2211,\n      d3210 = options.d3210,\n      d3222 = options.d3222,\n      d4410 = options.d4410,\n      d4422 = options.d4422,\n      d5220 = options.d5220,\n      d5232 = options.d5232,\n      d5421 = options.d5421,\n      d5433 = options.d5433,\n      dedt = options.dedt,\n      didt = options.didt,\n      dmdt = options.dmdt,\n      dnodt = options.dnodt,\n      domdt = options.domdt,\n      del1 = options.del1,\n      del2 = options.del2,\n      del3 = options.del3,\n      xfact = options.xfact,\n      xlamo = options.xlamo,\n      xli = options.xli,\n      xni = options.xni;\n  var f220;\n  var f221;\n  var f311;\n  var f321;\n  var f322;\n  var f330;\n  var f441;\n  var f442;\n  var f522;\n  var f523;\n  var f542;\n  var f543;\n  var g200;\n  var g201;\n  var g211;\n  var g300;\n  var g310;\n  var g322;\n  var g410;\n  var g422;\n  var g520;\n  var g521;\n  var g532;\n  var g533;\n  var sini2;\n  var temp;\n  var temp1;\n  var xno2;\n  var ainv2;\n  var aonv;\n  var cosisq;\n  var eoc;\n  var q22 = 1.7891679e-6;\n  var q31 = 2.1460748e-6;\n  var q33 = 2.2123015e-7;\n  var root22 = 1.7891679e-6;\n  var root44 = 7.3636953e-9;\n  var root54 = 2.1765803e-9;\n  var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n\n  var root32 = 3.7393792e-7;\n  var root52 = 1.1428639e-7;\n  var znl = 1.5835218e-4;\n  var zns = 1.19459e-5; // -------------------- deep space initialization ------------\n\n  irez = 0;\n\n  if (nm < 0.0052359877 && nm > 0.0034906585) {\n    irez = 1;\n  }\n\n  if (nm >= 8.26e-3 && nm <= 9.24e-3 && em >= 0.5) {\n    irez = 2;\n  } // ------------------------ do solar terms -------------------\n\n\n  var ses = ss1 * zns * ss5;\n  var sis = ss2 * zns * (sz11 + sz13);\n  var sls = -zns * ss3 * (sz1 + sz3 - 14.0 - 6.0 * emsq);\n  var sghs = ss4 * zns * (sz31 + sz33 - 6.0);\n  var shs = -zns * ss2 * (sz21 + sz23); // sgp4fix for 180 deg incl\n\n  if (inclm < 5.2359877e-2 || inclm > pi - 5.2359877e-2) {\n    shs = 0.0;\n  }\n\n  if (sinim !== 0.0) {\n    shs /= sinim;\n  }\n\n  var sgs = sghs - cosim * shs; // ------------------------- do lunar terms ------------------\n\n  dedt = ses + s1 * znl * s5;\n  didt = sis + s2 * znl * (z11 + z13);\n  dmdt = sls - znl * s3 * (z1 + z3 - 14.0 - 6.0 * emsq);\n  var sghl = s4 * znl * (z31 + z33 - 6.0);\n  var shll = -znl * s2 * (z21 + z23); // sgp4fix for 180 deg incl\n\n  if (inclm < 5.2359877e-2 || inclm > pi - 5.2359877e-2) {\n    shll = 0.0;\n  }\n\n  domdt = sgs + sghl;\n  dnodt = shs;\n\n  if (sinim !== 0.0) {\n    domdt -= cosim / sinim * shll;\n    dnodt += shll / sinim;\n  } // ----------- calculate deep space resonance effects --------\n\n\n  var dndt = 0.0;\n  var theta = (gsto + tc * rptim) % twoPi;\n  em += dedt * t;\n  inclm += didt * t;\n  argpm += domdt * t;\n  nodem += dnodt * t;\n  mm += dmdt * t; // sgp4fix for negative inclinations\n  // the following if statement should be commented out\n  // if (inclm < 0.0)\n  // {\n  //   inclm  = -inclm;\n  //   argpm  = argpm - pi;\n  //   nodem = nodem + pi;\n  // }\n  // -------------- initialize the resonance terms -------------\n\n  if (irez !== 0) {\n    aonv = Math.pow(nm / xke, x2o3); // ---------- geopotential resonance for 12 hour orbits ------\n\n    if (irez === 2) {\n      cosisq = cosim * cosim;\n      var emo = em;\n      em = ecco;\n      var emsqo = emsq;\n      emsq = eccsq;\n      eoc = em * emsq;\n      g201 = -0.306 - (em - 0.64) * 0.440;\n\n      if (em <= 0.65) {\n        g211 = 3.616 - 13.2470 * em + 16.2900 * emsq;\n        g310 = -19.302 + 117.3900 * em - 228.4190 * emsq + 156.5910 * eoc;\n        g322 = -18.9068 + 109.7927 * em - 214.6334 * emsq + 146.5816 * eoc;\n        g410 = -41.122 + 242.6940 * em - 471.0940 * emsq + 313.9530 * eoc;\n        g422 = -146.407 + 841.8800 * em - 1629.014 * emsq + 1083.4350 * eoc;\n        g520 = -532.114 + 3017.977 * em - 5740.032 * emsq + 3708.2760 * eoc;\n      } else {\n        g211 = -72.099 + 331.819 * em - 508.738 * emsq + 266.724 * eoc;\n        g310 = -346.844 + 1582.851 * em - 2415.925 * emsq + 1246.113 * eoc;\n        g322 = -342.585 + 1554.908 * em - 2366.899 * emsq + 1215.972 * eoc;\n        g410 = -1052.797 + 4758.686 * em - 7193.992 * emsq + 3651.957 * eoc;\n        g422 = -3581.690 + 16178.110 * em - 24462.770 * emsq + 12422.520 * eoc;\n\n        if (em > 0.715) {\n          g520 = -5149.66 + 29936.92 * em - 54087.36 * emsq + 31324.56 * eoc;\n        } else {\n          g520 = 1464.74 - 4664.75 * em + 3763.64 * emsq;\n        }\n      }\n\n      if (em < 0.7) {\n        g533 = -919.22770 + 4988.6100 * em - 9064.7700 * emsq + 5542.21 * eoc;\n        g521 = -822.71072 + 4568.6173 * em - 8491.4146 * emsq + 5337.524 * eoc;\n        g532 = -853.66600 + 4690.2500 * em - 8624.7700 * emsq + 5341.4 * eoc;\n      } else {\n        g533 = -37995.780 + 161616.52 * em - 229838.20 * emsq + 109377.94 * eoc;\n        g521 = -51752.104 + 218913.95 * em - 309468.16 * emsq + 146349.42 * eoc;\n        g532 = -40023.880 + 170470.89 * em - 242699.48 * emsq + 115605.82 * eoc;\n      }\n\n      sini2 = sinim * sinim;\n      f220 = 0.75 * (1.0 + 2.0 * cosim + cosisq);\n      f221 = 1.5 * sini2;\n      f321 = 1.875 * sinim * (1.0 - 2.0 * cosim - 3.0 * cosisq);\n      f322 = -1.875 * sinim * (1.0 + 2.0 * cosim - 3.0 * cosisq);\n      f441 = 35.0 * sini2 * f220;\n      f442 = 39.3750 * sini2 * sini2;\n      f522 = 9.84375 * sinim * (sini2 * (1.0 - 2.0 * cosim - 5.0 * cosisq) + 0.33333333 * (-2.0 + 4.0 * cosim + 6.0 * cosisq));\n      f523 = sinim * (4.92187512 * sini2 * (-2.0 - 4.0 * cosim + 10.0 * cosisq) + 6.56250012 * (1.0 + 2.0 * cosim - 3.0 * cosisq));\n      f542 = 29.53125 * sinim * (2.0 - 8.0 * cosim + cosisq * (-12.0 + 8.0 * cosim + 10.0 * cosisq));\n      f543 = 29.53125 * sinim * (-2.0 - 8.0 * cosim + cosisq * (12.0 + 8.0 * cosim - 10.0 * cosisq));\n      xno2 = nm * nm;\n      ainv2 = aonv * aonv;\n      temp1 = 3.0 * xno2 * ainv2;\n      temp = temp1 * root22;\n      d2201 = temp * f220 * g201;\n      d2211 = temp * f221 * g211;\n      temp1 *= aonv;\n      temp = temp1 * root32;\n      d3210 = temp * f321 * g310;\n      d3222 = temp * f322 * g322;\n      temp1 *= aonv;\n      temp = 2.0 * temp1 * root44;\n      d4410 = temp * f441 * g410;\n      d4422 = temp * f442 * g422;\n      temp1 *= aonv;\n      temp = temp1 * root52;\n      d5220 = temp * f522 * g520;\n      d5232 = temp * f523 * g532;\n      temp = 2.0 * temp1 * root54;\n      d5421 = temp * f542 * g521;\n      d5433 = temp * f543 * g533;\n      xlamo = (mo + nodeo + nodeo - (theta + theta)) % twoPi;\n      xfact = mdot + dmdt + 2.0 * (nodedot + dnodt - rptim) - no;\n      em = emo;\n      emsq = emsqo;\n    } //  ---------------- synchronous resonance terms --------------\n\n\n    if (irez === 1) {\n      g200 = 1.0 + emsq * (-2.5 + 0.8125 * emsq);\n      g310 = 1.0 + 2.0 * emsq;\n      g300 = 1.0 + emsq * (-6.0 + 6.60937 * emsq);\n      f220 = 0.75 * (1.0 + cosim) * (1.0 + cosim);\n      f311 = 0.9375 * sinim * sinim * (1.0 + 3.0 * cosim) - 0.75 * (1.0 + cosim);\n      f330 = 1.0 + cosim;\n      f330 *= 1.875 * f330 * f330;\n      del1 = 3.0 * nm * nm * aonv * aonv;\n      del2 = 2.0 * del1 * f220 * g200 * q22;\n      del3 = 3.0 * del1 * f330 * g300 * q33 * aonv;\n      del1 = del1 * f311 * g310 * q31 * aonv;\n      xlamo = (mo + nodeo + argpo - theta) % twoPi;\n      xfact = mdot + xpidot + dmdt + domdt + dnodt - (no + rptim);\n    } //  ------------ for sgp4, initialize the integrator ----------\n\n\n    xli = xlamo;\n    xni = no;\n    atime = 0.0;\n    nm = no + dndt;\n  }\n\n  return {\n    em: em,\n    argpm: argpm,\n    inclm: inclm,\n    mm: mm,\n    nm: nm,\n    nodem: nodem,\n    irez: irez,\n    atime: atime,\n    d2201: d2201,\n    d2211: d2211,\n    d3210: d3210,\n    d3222: d3222,\n    d4410: d4410,\n    d4422: d4422,\n    d5220: d5220,\n    d5232: d5232,\n    d5421: d5421,\n    d5433: d5433,\n    dedt: dedt,\n    didt: didt,\n    dmdt: dmdt,\n    dndt: dndt,\n    dnodt: dnodt,\n    domdt: domdt,\n    del1: del1,\n    del2: del2,\n    del3: del3,\n    xfact: xfact,\n    xlamo: xlamo,\n    xli: xli,\n    xni: xni\n  };\n}\n\n/* -----------------------------------------------------------------------------\n *\n *                           function gstime\n *\n *  this function finds the greenwich sidereal time.\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs          description                    range / units\n *    jdut1       - julian date in ut1             days from 4713 bc\n *\n *  outputs       :\n *    gstime      - greenwich sidereal time        0 to 2pi rad\n *\n *  locals        :\n *    temp        - temporary variable for doubles   rad\n *    tut1        - julian centuries from the\n *                  jan 1, 2000 12 h epoch (ut1)\n *\n *  coupling      :\n *    none\n *\n *  references    :\n *    vallado       2004, 191, eq 3-45\n * --------------------------------------------------------------------------- */\n\nfunction gstimeInternal(jdut1) {\n  var tut1 = (jdut1 - 2451545.0) / 36525.0;\n  var temp = -6.2e-6 * tut1 * tut1 * tut1 + 0.093104 * tut1 * tut1 + (876600.0 * 3600 + 8640184.812866) * tut1 + 67310.54841; // # sec\n\n  temp = temp * deg2rad / 240.0 % twoPi; // 360/86400 = 1/240, to deg, to rad\n  //  ------------------------ check quadrants ---------------------\n\n  if (temp < 0.0) {\n    temp += twoPi;\n  }\n\n  return temp;\n}\n\nfunction gstime() {\n  if ((arguments.length <= 0 ? undefined : arguments[0]) instanceof Date || arguments.length > 1) {\n    return gstimeInternal(jday.apply(void 0, arguments));\n  }\n\n  return gstimeInternal.apply(void 0, arguments);\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure initl\n *\n *  this procedure initializes the sgp4 propagator. all the initialization is\n *    consolidated here instead of having multiple loops inside other routines.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    ecco        - eccentricity                           0.0 - 1.0\n *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n *    inclo       - inclination of satellite\n *    no          - mean motion of satellite\n *    satn        - satellite number\n *\n *  outputs       :\n *    ainv        - 1.0 / a\n *    ao          - semi major axis\n *    con41       -\n *    con42       - 1.0 - 5.0 cos(i)\n *    cosio       - cosine of inclination\n *    cosio2      - cosio squared\n *    eccsq       - eccentricity squared\n *    method      - flag for deep space                    'd', 'n'\n *    omeosq      - 1.0 - ecco * ecco\n *    posq        - semi-parameter squared\n *    rp          - radius of perigee\n *    rteosq      - square root of (1.0 - ecco*ecco)\n *    sinio       - sine of inclination\n *    gsto        - gst at time of observation               rad\n *    no          - mean motion of satellite\n *\n *  locals        :\n *    ak          -\n *    d1          -\n *    del         -\n *    adel        -\n *    po          -\n *\n *  coupling      :\n *    getgravconst\n *    gstime      - find greenwich sidereal time from the julian date\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction initl(options) {\n  var ecco = options.ecco,\n      epoch = options.epoch,\n      inclo = options.inclo,\n      opsmode = options.opsmode;\n  var no = options.no; // sgp4fix use old way of finding gst\n  // ----------------------- earth constants ---------------------\n  // sgp4fix identify constants and allow alternate values\n  // ------------- calculate auxillary epoch quantities ----------\n\n  var eccsq = ecco * ecco;\n  var omeosq = 1.0 - eccsq;\n  var rteosq = Math.sqrt(omeosq);\n  var cosio = Math.cos(inclo);\n  var cosio2 = cosio * cosio; // ------------------ un-kozai the mean motion -----------------\n\n  var ak = Math.pow(xke / no, x2o3);\n  var d1 = 0.75 * j2 * (3.0 * cosio2 - 1.0) / (rteosq * omeosq);\n  var delPrime = d1 / (ak * ak);\n  var adel = ak * (1.0 - delPrime * delPrime - delPrime * (1.0 / 3.0 + 134.0 * delPrime * delPrime / 81.0));\n  delPrime = d1 / (adel * adel);\n  no /= 1.0 + delPrime;\n  var ao = Math.pow(xke / no, x2o3);\n  var sinio = Math.sin(inclo);\n  var po = ao * omeosq;\n  var con42 = 1.0 - 5.0 * cosio2;\n  var con41 = -con42 - cosio2 - cosio2;\n  var ainv = 1.0 / ao;\n  var posq = po * po;\n  var rp = ao * (1.0 - ecco);\n  var method = 'n'; //  sgp4fix modern approach to finding sidereal time\n\n  var gsto;\n\n  if (opsmode === 'a') {\n    //  sgp4fix use old way of finding gst\n    //  count integer number of days from 0 jan 1970\n    var ts70 = epoch - 7305.0;\n    var ds70 = Math.floor(ts70 + 1.0e-8);\n    var tfrac = ts70 - ds70; //  find greenwich location at epoch\n\n    var c1 = 1.72027916940703639e-2;\n    var thgr70 = 1.7321343856509374;\n    var fk5r = 5.07551419432269442e-15;\n    var c1p2p = c1 + twoPi;\n    gsto = (thgr70 + c1 * ds70 + c1p2p * tfrac + ts70 * ts70 * fk5r) % twoPi;\n\n    if (gsto < 0.0) {\n      gsto += twoPi;\n    }\n  } else {\n    gsto = gstime(epoch + 2433281.5);\n  }\n\n  return {\n    no: no,\n    method: method,\n    ainv: ainv,\n    ao: ao,\n    con41: con41,\n    con42: con42,\n    cosio: cosio,\n    cosio2: cosio2,\n    eccsq: eccsq,\n    omeosq: omeosq,\n    posq: posq,\n    rp: rp,\n    rteosq: rteosq,\n    sinio: sinio,\n    gsto: gsto\n  };\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                           procedure dspace\n *\n *  this procedure provides deep space contributions to mean elements for\n *    perturbing third body.  these effects have been averaged over one\n *    revolution of the sun and moon.  for earth resonance effects, the\n *    effects have been averaged over no revolutions of the satellite.\n *    (mean motion)\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    d2201, d2211, d3210, d3222, d4410, d4422, d5220, d5232, d5421, d5433 -\n *    dedt        -\n *    del1, del2, del3  -\n *    didt        -\n *    dmdt        -\n *    dnodt       -\n *    domdt       -\n *    irez        - flag for resonance           0-none, 1-one day, 2-half day\n *    argpo       - argument of perigee\n *    argpdot     - argument of perigee dot (rate)\n *    t           - time\n *    tc          -\n *    gsto        - gst\n *    xfact       -\n *    xlamo       -\n *    no          - mean motion\n *    atime       -\n *    em          - eccentricity\n *    ft          -\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    xli         -\n *    mm          - mean anomaly\n *    xni         - mean motion\n *    nodem       - right ascension of ascending node\n *\n *  outputs       :\n *    atime       -\n *    em          - eccentricity\n *    argpm       - argument of perigee\n *    inclm       - inclination\n *    xli         -\n *    mm          - mean anomaly\n *    xni         -\n *    nodem       - right ascension of ascending node\n *    dndt        -\n *    nm          - mean motion\n *\n *  locals        :\n *    delt        -\n *    ft          -\n *    theta       -\n *    x2li        -\n *    x2omi       -\n *    xl          -\n *    xldot       -\n *    xnddt       -\n *    xndt        -\n *    xomi        -\n *\n *  coupling      :\n *    none        -\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction dspace(options) {\n  var irez = options.irez,\n      d2201 = options.d2201,\n      d2211 = options.d2211,\n      d3210 = options.d3210,\n      d3222 = options.d3222,\n      d4410 = options.d4410,\n      d4422 = options.d4422,\n      d5220 = options.d5220,\n      d5232 = options.d5232,\n      d5421 = options.d5421,\n      d5433 = options.d5433,\n      dedt = options.dedt,\n      del1 = options.del1,\n      del2 = options.del2,\n      del3 = options.del3,\n      didt = options.didt,\n      dmdt = options.dmdt,\n      dnodt = options.dnodt,\n      domdt = options.domdt,\n      argpo = options.argpo,\n      argpdot = options.argpdot,\n      t = options.t,\n      tc = options.tc,\n      gsto = options.gsto,\n      xfact = options.xfact,\n      xlamo = options.xlamo,\n      no = options.no;\n  var atime = options.atime,\n      em = options.em,\n      argpm = options.argpm,\n      inclm = options.inclm,\n      xli = options.xli,\n      mm = options.mm,\n      xni = options.xni,\n      nodem = options.nodem,\n      nm = options.nm;\n  var fasx2 = 0.13130908;\n  var fasx4 = 2.8843198;\n  var fasx6 = 0.37448087;\n  var g22 = 5.7686396;\n  var g32 = 0.95240898;\n  var g44 = 1.8014998;\n  var g52 = 1.0508330;\n  var g54 = 4.4108898;\n  var rptim = 4.37526908801129966e-3; // equates to 7.29211514668855e-5 rad/sec\n\n  var stepp = 720.0;\n  var stepn = -720.0;\n  var step2 = 259200.0;\n  var delt;\n  var x2li;\n  var x2omi;\n  var xl;\n  var xldot;\n  var xnddt;\n  var xndt;\n  var xomi;\n  var dndt = 0.0;\n  var ft = 0.0; //  ----------- calculate deep space resonance effects -----------\n\n  var theta = (gsto + tc * rptim) % twoPi;\n  em += dedt * t;\n  inclm += didt * t;\n  argpm += domdt * t;\n  nodem += dnodt * t;\n  mm += dmdt * t; // sgp4fix for negative inclinations\n  // the following if statement should be commented out\n  // if (inclm < 0.0)\n  // {\n  //   inclm = -inclm;\n  //   argpm = argpm - pi;\n  //   nodem = nodem + pi;\n  // }\n\n  /* - update resonances : numerical (euler-maclaurin) integration - */\n\n  /* ------------------------- epoch restart ----------------------  */\n  //   sgp4fix for propagator problems\n  //   the following integration works for negative time steps and periods\n  //   the specific changes are unknown because the original code was so convoluted\n  // sgp4fix take out atime = 0.0 and fix for faster operation\n\n  if (irez !== 0) {\n    //  sgp4fix streamline check\n    if (atime === 0.0 || t * atime <= 0.0 || Math.abs(t) < Math.abs(atime)) {\n      atime = 0.0;\n      xni = no;\n      xli = xlamo;\n    } // sgp4fix move check outside loop\n\n\n    if (t > 0.0) {\n      delt = stepp;\n    } else {\n      delt = stepn;\n    }\n\n    var iretn = 381; // added for do loop\n\n    while (iretn === 381) {\n      //  ------------------- dot terms calculated -------------\n      //  ----------- near - synchronous resonance terms -------\n      if (irez !== 2) {\n        xndt = del1 * Math.sin(xli - fasx2) + del2 * Math.sin(2.0 * (xli - fasx4)) + del3 * Math.sin(3.0 * (xli - fasx6));\n        xldot = xni + xfact;\n        xnddt = del1 * Math.cos(xli - fasx2) + 2.0 * del2 * Math.cos(2.0 * (xli - fasx4)) + 3.0 * del3 * Math.cos(3.0 * (xli - fasx6));\n        xnddt *= xldot;\n      } else {\n        // --------- near - half-day resonance terms --------\n        xomi = argpo + argpdot * atime;\n        x2omi = xomi + xomi;\n        x2li = xli + xli;\n        xndt = d2201 * Math.sin(x2omi + xli - g22) + d2211 * Math.sin(xli - g22) + d3210 * Math.sin(xomi + xli - g32) + d3222 * Math.sin(-xomi + xli - g32) + d4410 * Math.sin(x2omi + x2li - g44) + d4422 * Math.sin(x2li - g44) + d5220 * Math.sin(xomi + xli - g52) + d5232 * Math.sin(-xomi + xli - g52) + d5421 * Math.sin(xomi + x2li - g54) + d5433 * Math.sin(-xomi + x2li - g54);\n        xldot = xni + xfact;\n        xnddt = d2201 * Math.cos(x2omi + xli - g22) + d2211 * Math.cos(xli - g22) + d3210 * Math.cos(xomi + xli - g32) + d3222 * Math.cos(-xomi + xli - g32) + d5220 * Math.cos(xomi + xli - g52) + d5232 * Math.cos(-xomi + xli - g52) + 2.0 * d4410 * Math.cos(x2omi + x2li - g44) + d4422 * Math.cos(x2li - g44) + d5421 * Math.cos(xomi + x2li - g54) + d5433 * Math.cos(-xomi + x2li - g54);\n        xnddt *= xldot;\n      } //  ----------------------- integrator -------------------\n      //  sgp4fix move end checks to end of routine\n\n\n      if (Math.abs(t - atime) >= stepp) {\n        iretn = 381;\n      } else {\n        ft = t - atime;\n        iretn = 0;\n      }\n\n      if (iretn === 381) {\n        xli += xldot * delt + xndt * step2;\n        xni += xndt * delt + xnddt * step2;\n        atime += delt;\n      }\n    }\n\n    nm = xni + xndt * ft + xnddt * ft * ft * 0.5;\n    xl = xli + xldot * ft + xndt * ft * ft * 0.5;\n\n    if (irez !== 1) {\n      mm = xl - 2.0 * nodem + 2.0 * theta;\n      dndt = nm - no;\n    } else {\n      mm = xl - nodem - argpm + theta;\n      dndt = nm - no;\n    }\n\n    nm = no + dndt;\n  }\n\n  return {\n    atime: atime,\n    em: em,\n    argpm: argpm,\n    inclm: inclm,\n    xli: xli,\n    mm: mm,\n    xni: xni,\n    nodem: nodem,\n    dndt: dndt,\n    nm: nm\n  };\n}\n\n/*----------------------------------------------------------------------------\n *\n *                             procedure sgp4\n *\n *  this procedure is the sgp4 prediction model from space command. this is an\n *    updated and combined version of sgp4 and sdp4, which were originally\n *    published separately in spacetrack report //3. this version follows the\n *    methodology from the aiaa paper (2006) describing the history and\n *    development of the code.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    satrec  - initialised structure from sgp4init() call.\n *    tsince  - time since epoch (minutes)\n *\n *  outputs       :\n *    r           - position vector                     km\n *    v           - velocity                            km/sec\n *  return code - non-zero on error.\n *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n *                   2 - mean motion less than 0.0\n *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n *                   4 - semi-latus rectum < 0.0\n *                   5 - epoch elements are sub-orbital\n *                   6 - satellite has decayed\n *\n *  locals        :\n *    am          -\n *    axnl, aynl        -\n *    betal       -\n *    cosim   , sinim   , cosomm  , sinomm  , cnod    , snod    , cos2u   ,\n *    sin2u   , coseo1  , sineo1  , cosi    , sini    , cosip   , sinip   ,\n *    cosisq  , cossu   , sinsu   , cosu    , sinu\n *    delm        -\n *    delomg      -\n *    dndt        -\n *    eccm        -\n *    emsq        -\n *    ecose       -\n *    el2         -\n *    eo1         -\n *    eccp        -\n *    esine       -\n *    argpm       -\n *    argpp       -\n *    omgadf      -\n *    pl          -\n *    r           -\n *    rtemsq      -\n *    rdotl       -\n *    rl          -\n *    rvdot       -\n *    rvdotl      -\n *    su          -\n *    t2  , t3   , t4    , tc\n *    tem5, temp , temp1 , temp2  , tempa  , tempe  , templ\n *    u   , ux   , uy    , uz     , vx     , vy     , vz\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    nodem       - right asc of ascending node\n *    xinc        -\n *    xincp       -\n *    xl          -\n *    xlm         -\n *    mp          -\n *    xmdf        -\n *    xmx         -\n *    xmy         -\n *    nodedf      -\n *    xnode       -\n *    nodep       -\n *    np          -\n *\n *  coupling      :\n *    getgravconst-\n *    dpper\n *    dspace\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report //3 1980\n *    hoots, norad spacetrack report //6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction sgp4(satrec, tsince) {\n  /* eslint-disable no-param-reassign */\n  var coseo1;\n  var sineo1;\n  var cosip;\n  var sinip;\n  var cosisq;\n  var delm;\n  var delomg;\n  var eo1;\n  var argpm;\n  var argpp;\n  var su;\n  var t3;\n  var t4;\n  var tc;\n  var tem5;\n  var temp;\n  var tempa;\n  var tempe;\n  var templ;\n  var inclm;\n  var mm;\n  var nm;\n  var nodem;\n  var xincp;\n  var xlm;\n  var mp;\n  var nodep;\n  /* ------------------ set mathematical constants --------------- */\n  // sgp4fix divisor for divide by zero check on inclination\n  // the old check used 1.0 + cos(pi-1.0e-9), but then compared it to\n  // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n  var temp4 = 1.5e-12; // --------------------- clear sgp4 error flag -----------------\n\n  satrec.t = tsince;\n  satrec.error = 0; //  ------- update for secular gravity and atmospheric drag -----\n\n  var xmdf = satrec.mo + satrec.mdot * satrec.t;\n  var argpdf = satrec.argpo + satrec.argpdot * satrec.t;\n  var nodedf = satrec.nodeo + satrec.nodedot * satrec.t;\n  argpm = argpdf;\n  mm = xmdf;\n  var t2 = satrec.t * satrec.t;\n  nodem = nodedf + satrec.nodecf * t2;\n  tempa = 1.0 - satrec.cc1 * satrec.t;\n  tempe = satrec.bstar * satrec.cc4 * satrec.t;\n  templ = satrec.t2cof * t2;\n\n  if (satrec.isimp !== 1) {\n    delomg = satrec.omgcof * satrec.t; //  sgp4fix use mutliply for speed instead of pow\n\n    var delmtemp = 1.0 + satrec.eta * Math.cos(xmdf);\n    delm = satrec.xmcof * (delmtemp * delmtemp * delmtemp - satrec.delmo);\n    temp = delomg + delm;\n    mm = xmdf + temp;\n    argpm = argpdf - temp;\n    t3 = t2 * satrec.t;\n    t4 = t3 * satrec.t;\n    tempa = tempa - satrec.d2 * t2 - satrec.d3 * t3 - satrec.d4 * t4;\n    tempe += satrec.bstar * satrec.cc5 * (Math.sin(mm) - satrec.sinmao);\n    templ = templ + satrec.t3cof * t3 + t4 * (satrec.t4cof + satrec.t * satrec.t5cof);\n  }\n\n  nm = satrec.no;\n  var em = satrec.ecco;\n  inclm = satrec.inclo;\n\n  if (satrec.method === 'd') {\n    tc = satrec.t;\n    var dspaceOptions = {\n      irez: satrec.irez,\n      d2201: satrec.d2201,\n      d2211: satrec.d2211,\n      d3210: satrec.d3210,\n      d3222: satrec.d3222,\n      d4410: satrec.d4410,\n      d4422: satrec.d4422,\n      d5220: satrec.d5220,\n      d5232: satrec.d5232,\n      d5421: satrec.d5421,\n      d5433: satrec.d5433,\n      dedt: satrec.dedt,\n      del1: satrec.del1,\n      del2: satrec.del2,\n      del3: satrec.del3,\n      didt: satrec.didt,\n      dmdt: satrec.dmdt,\n      dnodt: satrec.dnodt,\n      domdt: satrec.domdt,\n      argpo: satrec.argpo,\n      argpdot: satrec.argpdot,\n      t: satrec.t,\n      tc: tc,\n      gsto: satrec.gsto,\n      xfact: satrec.xfact,\n      xlamo: satrec.xlamo,\n      no: satrec.no,\n      atime: satrec.atime,\n      em: em,\n      argpm: argpm,\n      inclm: inclm,\n      xli: satrec.xli,\n      mm: mm,\n      xni: satrec.xni,\n      nodem: nodem,\n      nm: nm\n    };\n    var dspaceResult = dspace(dspaceOptions);\n    em = dspaceResult.em;\n    argpm = dspaceResult.argpm;\n    inclm = dspaceResult.inclm;\n    mm = dspaceResult.mm;\n    nodem = dspaceResult.nodem;\n    nm = dspaceResult.nm;\n  }\n\n  if (nm <= 0.0) {\n    // printf(\"// error nm %f\\n\", nm);\n    satrec.error = 2; // sgp4fix add return\n\n    return [false, false];\n  }\n\n  var am = Math.pow(xke / nm, x2o3) * tempa * tempa;\n  nm = xke / Math.pow(am, 1.5);\n  em -= tempe; // fix tolerance for error recognition\n  // sgp4fix am is fixed from the previous nm check\n\n  if (em >= 1.0 || em < -0.001) {\n    // || (am < 0.95)\n    // printf(\"// error em %f\\n\", em);\n    satrec.error = 1; // sgp4fix to return if there is an error in eccentricity\n\n    return [false, false];\n  } //  sgp4fix fix tolerance to avoid a divide by zero\n\n\n  if (em < 1.0e-6) {\n    em = 1.0e-6;\n  }\n\n  mm += satrec.no * templ;\n  xlm = mm + argpm + nodem;\n  nodem %= twoPi;\n  argpm %= twoPi;\n  xlm %= twoPi;\n  mm = (xlm - argpm - nodem) % twoPi; // ----------------- compute extra mean quantities -------------\n\n  var sinim = Math.sin(inclm);\n  var cosim = Math.cos(inclm); // -------------------- add lunar-solar periodics --------------\n\n  var ep = em;\n  xincp = inclm;\n  argpp = argpm;\n  nodep = nodem;\n  mp = mm;\n  sinip = sinim;\n  cosip = cosim;\n\n  if (satrec.method === 'd') {\n    var dpperParameters = {\n      inclo: satrec.inclo,\n      init: 'n',\n      ep: ep,\n      inclp: xincp,\n      nodep: nodep,\n      argpp: argpp,\n      mp: mp,\n      opsmode: satrec.operationmode\n    };\n    var dpperResult = dpper(satrec, dpperParameters);\n    ep = dpperResult.ep;\n    nodep = dpperResult.nodep;\n    argpp = dpperResult.argpp;\n    mp = dpperResult.mp;\n    xincp = dpperResult.inclp;\n\n    if (xincp < 0.0) {\n      xincp = -xincp;\n      nodep += pi;\n      argpp -= pi;\n    }\n\n    if (ep < 0.0 || ep > 1.0) {\n      //  printf(\"// error ep %f\\n\", ep);\n      satrec.error = 3; //  sgp4fix add return\n\n      return [false, false];\n    }\n  } //  -------------------- long period periodics ------------------\n\n\n  if (satrec.method === 'd') {\n    sinip = Math.sin(xincp);\n    cosip = Math.cos(xincp);\n    satrec.aycof = -0.5 * j3oj2 * sinip; //  sgp4fix for divide by zero for xincp = 180 deg\n\n    if (Math.abs(cosip + 1.0) > 1.5e-12) {\n      satrec.xlcof = -0.25 * j3oj2 * sinip * (3.0 + 5.0 * cosip) / (1.0 + cosip);\n    } else {\n      satrec.xlcof = -0.25 * j3oj2 * sinip * (3.0 + 5.0 * cosip) / temp4;\n    }\n  }\n\n  var axnl = ep * Math.cos(argpp);\n  temp = 1.0 / (am * (1.0 - ep * ep));\n  var aynl = ep * Math.sin(argpp) + temp * satrec.aycof;\n  var xl = mp + argpp + nodep + temp * satrec.xlcof * axnl; // --------------------- solve kepler's equation ---------------\n\n  var u = (xl - nodep) % twoPi;\n  eo1 = u;\n  tem5 = 9999.9;\n  var ktr = 1; //    sgp4fix for kepler iteration\n  //    the following iteration needs better limits on corrections\n\n  while (Math.abs(tem5) >= 1.0e-12 && ktr <= 10) {\n    sineo1 = Math.sin(eo1);\n    coseo1 = Math.cos(eo1);\n    tem5 = 1.0 - coseo1 * axnl - sineo1 * aynl;\n    tem5 = (u - aynl * coseo1 + axnl * sineo1 - eo1) / tem5;\n\n    if (Math.abs(tem5) >= 0.95) {\n      if (tem5 > 0.0) {\n        tem5 = 0.95;\n      } else {\n        tem5 = -0.95;\n      }\n    }\n\n    eo1 += tem5;\n    ktr += 1;\n  } //  ------------- short period preliminary quantities -----------\n\n\n  var ecose = axnl * coseo1 + aynl * sineo1;\n  var esine = axnl * sineo1 - aynl * coseo1;\n  var el2 = axnl * axnl + aynl * aynl;\n  var pl = am * (1.0 - el2);\n\n  if (pl < 0.0) {\n    //  printf(\"// error pl %f\\n\", pl);\n    satrec.error = 4; //  sgp4fix add return\n\n    return [false, false];\n  }\n\n  var rl = am * (1.0 - ecose);\n  var rdotl = Math.sqrt(am) * esine / rl;\n  var rvdotl = Math.sqrt(pl) / rl;\n  var betal = Math.sqrt(1.0 - el2);\n  temp = esine / (1.0 + betal);\n  var sinu = am / rl * (sineo1 - aynl - axnl * temp);\n  var cosu = am / rl * (coseo1 - axnl + aynl * temp);\n  su = Math.atan2(sinu, cosu);\n  var sin2u = (cosu + cosu) * sinu;\n  var cos2u = 1.0 - 2.0 * sinu * sinu;\n  temp = 1.0 / pl;\n  var temp1 = 0.5 * j2 * temp;\n  var temp2 = temp1 * temp; // -------------- update for short period periodics ------------\n\n  if (satrec.method === 'd') {\n    cosisq = cosip * cosip;\n    satrec.con41 = 3.0 * cosisq - 1.0;\n    satrec.x1mth2 = 1.0 - cosisq;\n    satrec.x7thm1 = 7.0 * cosisq - 1.0;\n  }\n\n  var mrt = rl * (1.0 - 1.5 * temp2 * betal * satrec.con41) + 0.5 * temp1 * satrec.x1mth2 * cos2u; // sgp4fix for decaying satellites\n\n  if (mrt < 1.0) {\n    // printf(\"// decay condition %11.6f \\n\",mrt);\n    satrec.error = 6;\n    return {\n      position: false,\n      velocity: false\n    };\n  }\n\n  su -= 0.25 * temp2 * satrec.x7thm1 * sin2u;\n  var xnode = nodep + 1.5 * temp2 * cosip * sin2u;\n  var xinc = xincp + 1.5 * temp2 * cosip * sinip * cos2u;\n  var mvt = rdotl - nm * temp1 * satrec.x1mth2 * sin2u / xke;\n  var rvdot = rvdotl + nm * temp1 * (satrec.x1mth2 * cos2u + 1.5 * satrec.con41) / xke; // --------------------- orientation vectors -------------------\n\n  var sinsu = Math.sin(su);\n  var cossu = Math.cos(su);\n  var snod = Math.sin(xnode);\n  var cnod = Math.cos(xnode);\n  var sini = Math.sin(xinc);\n  var cosi = Math.cos(xinc);\n  var xmx = -snod * cosi;\n  var xmy = cnod * cosi;\n  var ux = xmx * sinsu + cnod * cossu;\n  var uy = xmy * sinsu + snod * cossu;\n  var uz = sini * sinsu;\n  var vx = xmx * cossu - cnod * sinsu;\n  var vy = xmy * cossu - snod * sinsu;\n  var vz = sini * cossu; // --------- position and velocity (in km and km/sec) ----------\n\n  var r = {\n    x: mrt * ux * earthRadius,\n    y: mrt * uy * earthRadius,\n    z: mrt * uz * earthRadius\n  };\n  var v = {\n    x: (mvt * ux + rvdot * vx) * vkmpersec,\n    y: (mvt * uy + rvdot * vy) * vkmpersec,\n    z: (mvt * uz + rvdot * vz) * vkmpersec\n  };\n  return {\n    position: r,\n    velocity: v\n  };\n  /* eslint-enable no-param-reassign */\n}\n\n/*-----------------------------------------------------------------------------\n *\n *                             procedure sgp4init\n *\n *  this procedure initializes variables for sgp4.\n *\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *  author        : david vallado                  719-573-2600   28 jun 2005\n *\n *  inputs        :\n *    opsmode     - mode of operation afspc or improved 'a', 'i'\n *    satn        - satellite number\n *    bstar       - sgp4 type drag coefficient              kg/m2er\n *    ecco        - eccentricity\n *    epoch       - epoch time in days from jan 0, 1950. 0 hr\n *    argpo       - argument of perigee (output if ds)\n *    inclo       - inclination\n *    mo          - mean anomaly (output if ds)\n *    no          - mean motion\n *    nodeo       - right ascension of ascending node\n *\n *  outputs       :\n *    rec      - common values for subsequent calls\n *    return code - non-zero on error.\n *                   1 - mean elements, ecc >= 1.0 or ecc < -0.001 or a < 0.95 er\n *                   2 - mean motion less than 0.0\n *                   3 - pert elements, ecc < 0.0  or  ecc > 1.0\n *                   4 - semi-latus rectum < 0.0\n *                   5 - epoch elements are sub-orbital\n *                   6 - satellite has decayed\n *\n *  locals        :\n *    cnodm  , snodm  , cosim  , sinim  , cosomm , sinomm\n *    cc1sq  , cc2    , cc3\n *    coef   , coef1\n *    cosio4      -\n *    day         -\n *    dndt        -\n *    em          - eccentricity\n *    emsq        - eccentricity squared\n *    eeta        -\n *    etasq       -\n *    gam         -\n *    argpm       - argument of perigee\n *    nodem       -\n *    inclm       - inclination\n *    mm          - mean anomaly\n *    nm          - mean motion\n *    perige      - perigee\n *    pinvsq      -\n *    psisq       -\n *    qzms24      -\n *    rtemsq      -\n *    s1, s2, s3, s4, s5, s6, s7          -\n *    sfour       -\n *    ss1, ss2, ss3, ss4, ss5, ss6, ss7         -\n *    sz1, sz2, sz3\n *    sz11, sz12, sz13, sz21, sz22, sz23, sz31, sz32, sz33        -\n *    tc          -\n *    temp        -\n *    temp1, temp2, temp3       -\n *    tsi         -\n *    xpidot      -\n *    xhdot1      -\n *    z1, z2, z3          -\n *    z11, z12, z13, z21, z22, z23, z31, z32, z33         -\n *\n *  coupling      :\n *    getgravconst-\n *    initl       -\n *    dscom       -\n *    dpper       -\n *    dsinit      -\n *    sgp4        -\n *\n *  references    :\n *    hoots, roehrich, norad spacetrack report #3 1980\n *    hoots, norad spacetrack report #6 1986\n *    hoots, schumacher and glover 2004\n *    vallado, crawford, hujsak, kelso  2006\n ----------------------------------------------------------------------------*/\n\nfunction sgp4init(satrec, options) {\n  /* eslint-disable no-param-reassign */\n  var opsmode = options.opsmode,\n      satn = options.satn,\n      epoch = options.epoch,\n      xbstar = options.xbstar,\n      xecco = options.xecco,\n      xargpo = options.xargpo,\n      xinclo = options.xinclo,\n      xmo = options.xmo,\n      xno = options.xno,\n      xnodeo = options.xnodeo;\n  var cosim;\n  var sinim;\n  var cc1sq;\n  var cc2;\n  var cc3;\n  var coef;\n  var coef1;\n  var cosio4;\n  var em;\n  var emsq;\n  var eeta;\n  var etasq;\n  var argpm;\n  var nodem;\n  var inclm;\n  var mm;\n  var nm;\n  var perige;\n  var pinvsq;\n  var psisq;\n  var qzms24;\n  var s1;\n  var s2;\n  var s3;\n  var s4;\n  var s5;\n  var sfour;\n  var ss1;\n  var ss2;\n  var ss3;\n  var ss4;\n  var ss5;\n  var sz1;\n  var sz3;\n  var sz11;\n  var sz13;\n  var sz21;\n  var sz23;\n  var sz31;\n  var sz33;\n  var tc;\n  var temp;\n  var temp1;\n  var temp2;\n  var temp3;\n  var tsi;\n  var xpidot;\n  var xhdot1;\n  var z1;\n  var z3;\n  var z11;\n  var z13;\n  var z21;\n  var z23;\n  var z31;\n  var z33;\n  /* ------------------------ initialization --------------------- */\n  // sgp4fix divisor for divide by zero check on inclination\n  // the old check used 1.0 + Math.cos(pi-1.0e-9), but then compared it to\n  // 1.5 e-12, so the threshold was changed to 1.5e-12 for consistency\n\n  var temp4 = 1.5e-12; // ----------- set all near earth variables to zero ------------\n\n  satrec.isimp = 0;\n  satrec.method = 'n';\n  satrec.aycof = 0.0;\n  satrec.con41 = 0.0;\n  satrec.cc1 = 0.0;\n  satrec.cc4 = 0.0;\n  satrec.cc5 = 0.0;\n  satrec.d2 = 0.0;\n  satrec.d3 = 0.0;\n  satrec.d4 = 0.0;\n  satrec.delmo = 0.0;\n  satrec.eta = 0.0;\n  satrec.argpdot = 0.0;\n  satrec.omgcof = 0.0;\n  satrec.sinmao = 0.0;\n  satrec.t = 0.0;\n  satrec.t2cof = 0.0;\n  satrec.t3cof = 0.0;\n  satrec.t4cof = 0.0;\n  satrec.t5cof = 0.0;\n  satrec.x1mth2 = 0.0;\n  satrec.x7thm1 = 0.0;\n  satrec.mdot = 0.0;\n  satrec.nodedot = 0.0;\n  satrec.xlcof = 0.0;\n  satrec.xmcof = 0.0;\n  satrec.nodecf = 0.0; // ----------- set all deep space variables to zero ------------\n\n  satrec.irez = 0;\n  satrec.d2201 = 0.0;\n  satrec.d2211 = 0.0;\n  satrec.d3210 = 0.0;\n  satrec.d3222 = 0.0;\n  satrec.d4410 = 0.0;\n  satrec.d4422 = 0.0;\n  satrec.d5220 = 0.0;\n  satrec.d5232 = 0.0;\n  satrec.d5421 = 0.0;\n  satrec.d5433 = 0.0;\n  satrec.dedt = 0.0;\n  satrec.del1 = 0.0;\n  satrec.del2 = 0.0;\n  satrec.del3 = 0.0;\n  satrec.didt = 0.0;\n  satrec.dmdt = 0.0;\n  satrec.dnodt = 0.0;\n  satrec.domdt = 0.0;\n  satrec.e3 = 0.0;\n  satrec.ee2 = 0.0;\n  satrec.peo = 0.0;\n  satrec.pgho = 0.0;\n  satrec.pho = 0.0;\n  satrec.pinco = 0.0;\n  satrec.plo = 0.0;\n  satrec.se2 = 0.0;\n  satrec.se3 = 0.0;\n  satrec.sgh2 = 0.0;\n  satrec.sgh3 = 0.0;\n  satrec.sgh4 = 0.0;\n  satrec.sh2 = 0.0;\n  satrec.sh3 = 0.0;\n  satrec.si2 = 0.0;\n  satrec.si3 = 0.0;\n  satrec.sl2 = 0.0;\n  satrec.sl3 = 0.0;\n  satrec.sl4 = 0.0;\n  satrec.gsto = 0.0;\n  satrec.xfact = 0.0;\n  satrec.xgh2 = 0.0;\n  satrec.xgh3 = 0.0;\n  satrec.xgh4 = 0.0;\n  satrec.xh2 = 0.0;\n  satrec.xh3 = 0.0;\n  satrec.xi2 = 0.0;\n  satrec.xi3 = 0.0;\n  satrec.xl2 = 0.0;\n  satrec.xl3 = 0.0;\n  satrec.xl4 = 0.0;\n  satrec.xlamo = 0.0;\n  satrec.zmol = 0.0;\n  satrec.zmos = 0.0;\n  satrec.atime = 0.0;\n  satrec.xli = 0.0;\n  satrec.xni = 0.0; // sgp4fix - note the following variables are also passed directly via satrec.\n  // it is possible to streamline the sgp4init call by deleting the \"x\"\n  // variables, but the user would need to set the satrec.* values first. we\n  // include the additional assignments in case twoline2rv is not used.\n\n  satrec.bstar = xbstar;\n  satrec.ecco = xecco;\n  satrec.argpo = xargpo;\n  satrec.inclo = xinclo;\n  satrec.mo = xmo;\n  satrec.no = xno;\n  satrec.nodeo = xnodeo; //  sgp4fix add opsmode\n\n  satrec.operationmode = opsmode; // ------------------------ earth constants -----------------------\n  // sgp4fix identify constants and allow alternate values\n\n  var ss = 78.0 / earthRadius + 1.0; // sgp4fix use multiply for speed instead of pow\n\n  var qzms2ttemp = (120.0 - 78.0) / earthRadius;\n  var qzms2t = qzms2ttemp * qzms2ttemp * qzms2ttemp * qzms2ttemp;\n  satrec.init = 'y';\n  satrec.t = 0.0;\n  var initlOptions = {\n    satn: satn,\n    ecco: satrec.ecco,\n    epoch: epoch,\n    inclo: satrec.inclo,\n    no: satrec.no,\n    method: satrec.method,\n    opsmode: satrec.operationmode\n  };\n  var initlResult = initl(initlOptions);\n  var ao = initlResult.ao,\n      con42 = initlResult.con42,\n      cosio = initlResult.cosio,\n      cosio2 = initlResult.cosio2,\n      eccsq = initlResult.eccsq,\n      omeosq = initlResult.omeosq,\n      posq = initlResult.posq,\n      rp = initlResult.rp,\n      rteosq = initlResult.rteosq,\n      sinio = initlResult.sinio;\n  satrec.no = initlResult.no;\n  satrec.con41 = initlResult.con41;\n  satrec.gsto = initlResult.gsto;\n  satrec.error = 0; // sgp4fix remove this check as it is unnecessary\n  // the mrt check in sgp4 handles decaying satellite cases even if the starting\n  // condition is below the surface of te earth\n  // if (rp < 1.0)\n  // {\n  //   printf(\"// *** satn%d epoch elts sub-orbital ***\\n\", satn);\n  //   satrec.error = 5;\n  // }\n\n  if (omeosq >= 0.0 || satrec.no >= 0.0) {\n    satrec.isimp = 0;\n\n    if (rp < 220.0 / earthRadius + 1.0) {\n      satrec.isimp = 1;\n    }\n\n    sfour = ss;\n    qzms24 = qzms2t;\n    perige = (rp - 1.0) * earthRadius; // - for perigees below 156 km, s and qoms2t are altered -\n\n    if (perige < 156.0) {\n      sfour = perige - 78.0;\n\n      if (perige < 98.0) {\n        sfour = 20.0;\n      } // sgp4fix use multiply for speed instead of pow\n\n\n      var qzms24temp = (120.0 - sfour) / earthRadius;\n      qzms24 = qzms24temp * qzms24temp * qzms24temp * qzms24temp;\n      sfour = sfour / earthRadius + 1.0;\n    }\n\n    pinvsq = 1.0 / posq;\n    tsi = 1.0 / (ao - sfour);\n    satrec.eta = ao * satrec.ecco * tsi;\n    etasq = satrec.eta * satrec.eta;\n    eeta = satrec.ecco * satrec.eta;\n    psisq = Math.abs(1.0 - etasq);\n    coef = qzms24 * Math.pow(tsi, 4.0);\n    coef1 = coef / Math.pow(psisq, 3.5);\n    cc2 = coef1 * satrec.no * (ao * (1.0 + 1.5 * etasq + eeta * (4.0 + etasq)) + 0.375 * j2 * tsi / psisq * satrec.con41 * (8.0 + 3.0 * etasq * (8.0 + etasq)));\n    satrec.cc1 = satrec.bstar * cc2;\n    cc3 = 0.0;\n\n    if (satrec.ecco > 1.0e-4) {\n      cc3 = -2.0 * coef * tsi * j3oj2 * satrec.no * sinio / satrec.ecco;\n    }\n\n    satrec.x1mth2 = 1.0 - cosio2;\n    satrec.cc4 = 2.0 * satrec.no * coef1 * ao * omeosq * (satrec.eta * (2.0 + 0.5 * etasq) + satrec.ecco * (0.5 + 2.0 * etasq) - j2 * tsi / (ao * psisq) * (-3.0 * satrec.con41 * (1.0 - 2.0 * eeta + etasq * (1.5 - 0.5 * eeta)) + 0.75 * satrec.x1mth2 * (2.0 * etasq - eeta * (1.0 + etasq)) * Math.cos(2.0 * satrec.argpo)));\n    satrec.cc5 = 2.0 * coef1 * ao * omeosq * (1.0 + 2.75 * (etasq + eeta) + eeta * etasq);\n    cosio4 = cosio2 * cosio2;\n    temp1 = 1.5 * j2 * pinvsq * satrec.no;\n    temp2 = 0.5 * temp1 * j2 * pinvsq;\n    temp3 = -0.46875 * j4 * pinvsq * pinvsq * satrec.no;\n    satrec.mdot = satrec.no + 0.5 * temp1 * rteosq * satrec.con41 + 0.0625 * temp2 * rteosq * (13.0 - 78.0 * cosio2 + 137.0 * cosio4);\n    satrec.argpdot = -0.5 * temp1 * con42 + 0.0625 * temp2 * (7.0 - 114.0 * cosio2 + 395.0 * cosio4) + temp3 * (3.0 - 36.0 * cosio2 + 49.0 * cosio4);\n    xhdot1 = -temp1 * cosio;\n    satrec.nodedot = xhdot1 + (0.5 * temp2 * (4.0 - 19.0 * cosio2) + 2.0 * temp3 * (3.0 - 7.0 * cosio2)) * cosio;\n    xpidot = satrec.argpdot + satrec.nodedot;\n    satrec.omgcof = satrec.bstar * cc3 * Math.cos(satrec.argpo);\n    satrec.xmcof = 0.0;\n\n    if (satrec.ecco > 1.0e-4) {\n      satrec.xmcof = -x2o3 * coef * satrec.bstar / eeta;\n    }\n\n    satrec.nodecf = 3.5 * omeosq * xhdot1 * satrec.cc1;\n    satrec.t2cof = 1.5 * satrec.cc1; // sgp4fix for divide by zero with xinco = 180 deg\n\n    if (Math.abs(cosio + 1.0) > 1.5e-12) {\n      satrec.xlcof = -0.25 * j3oj2 * sinio * (3.0 + 5.0 * cosio) / (1.0 + cosio);\n    } else {\n      satrec.xlcof = -0.25 * j3oj2 * sinio * (3.0 + 5.0 * cosio) / temp4;\n    }\n\n    satrec.aycof = -0.5 * j3oj2 * sinio; // sgp4fix use multiply for speed instead of pow\n\n    var delmotemp = 1.0 + satrec.eta * Math.cos(satrec.mo);\n    satrec.delmo = delmotemp * delmotemp * delmotemp;\n    satrec.sinmao = Math.sin(satrec.mo);\n    satrec.x7thm1 = 7.0 * cosio2 - 1.0; // --------------- deep space initialization -------------\n\n    if (2 * pi / satrec.no >= 225.0) {\n      satrec.method = 'd';\n      satrec.isimp = 1;\n      tc = 0.0;\n      inclm = satrec.inclo;\n      var dscomOptions = {\n        epoch: epoch,\n        ep: satrec.ecco,\n        argpp: satrec.argpo,\n        tc: tc,\n        inclp: satrec.inclo,\n        nodep: satrec.nodeo,\n        np: satrec.no,\n        e3: satrec.e3,\n        ee2: satrec.ee2,\n        peo: satrec.peo,\n        pgho: satrec.pgho,\n        pho: satrec.pho,\n        pinco: satrec.pinco,\n        plo: satrec.plo,\n        se2: satrec.se2,\n        se3: satrec.se3,\n        sgh2: satrec.sgh2,\n        sgh3: satrec.sgh3,\n        sgh4: satrec.sgh4,\n        sh2: satrec.sh2,\n        sh3: satrec.sh3,\n        si2: satrec.si2,\n        si3: satrec.si3,\n        sl2: satrec.sl2,\n        sl3: satrec.sl3,\n        sl4: satrec.sl4,\n        xgh2: satrec.xgh2,\n        xgh3: satrec.xgh3,\n        xgh4: satrec.xgh4,\n        xh2: satrec.xh2,\n        xh3: satrec.xh3,\n        xi2: satrec.xi2,\n        xi3: satrec.xi3,\n        xl2: satrec.xl2,\n        xl3: satrec.xl3,\n        xl4: satrec.xl4,\n        zmol: satrec.zmol,\n        zmos: satrec.zmos\n      };\n      var dscomResult = dscom(dscomOptions);\n      satrec.e3 = dscomResult.e3;\n      satrec.ee2 = dscomResult.ee2;\n      satrec.peo = dscomResult.peo;\n      satrec.pgho = dscomResult.pgho;\n      satrec.pho = dscomResult.pho;\n      satrec.pinco = dscomResult.pinco;\n      satrec.plo = dscomResult.plo;\n      satrec.se2 = dscomResult.se2;\n      satrec.se3 = dscomResult.se3;\n      satrec.sgh2 = dscomResult.sgh2;\n      satrec.sgh3 = dscomResult.sgh3;\n      satrec.sgh4 = dscomResult.sgh4;\n      satrec.sh2 = dscomResult.sh2;\n      satrec.sh3 = dscomResult.sh3;\n      satrec.si2 = dscomResult.si2;\n      satrec.si3 = dscomResult.si3;\n      satrec.sl2 = dscomResult.sl2;\n      satrec.sl3 = dscomResult.sl3;\n      satrec.sl4 = dscomResult.sl4;\n      sinim = dscomResult.sinim;\n      cosim = dscomResult.cosim;\n      em = dscomResult.em;\n      emsq = dscomResult.emsq;\n      s1 = dscomResult.s1;\n      s2 = dscomResult.s2;\n      s3 = dscomResult.s3;\n      s4 = dscomResult.s4;\n      s5 = dscomResult.s5;\n      ss1 = dscomResult.ss1;\n      ss2 = dscomResult.ss2;\n      ss3 = dscomResult.ss3;\n      ss4 = dscomResult.ss4;\n      ss5 = dscomResult.ss5;\n      sz1 = dscomResult.sz1;\n      sz3 = dscomResult.sz3;\n      sz11 = dscomResult.sz11;\n      sz13 = dscomResult.sz13;\n      sz21 = dscomResult.sz21;\n      sz23 = dscomResult.sz23;\n      sz31 = dscomResult.sz31;\n      sz33 = dscomResult.sz33;\n      satrec.xgh2 = dscomResult.xgh2;\n      satrec.xgh3 = dscomResult.xgh3;\n      satrec.xgh4 = dscomResult.xgh4;\n      satrec.xh2 = dscomResult.xh2;\n      satrec.xh3 = dscomResult.xh3;\n      satrec.xi2 = dscomResult.xi2;\n      satrec.xi3 = dscomResult.xi3;\n      satrec.xl2 = dscomResult.xl2;\n      satrec.xl3 = dscomResult.xl3;\n      satrec.xl4 = dscomResult.xl4;\n      satrec.zmol = dscomResult.zmol;\n      satrec.zmos = dscomResult.zmos;\n      nm = dscomResult.nm;\n      z1 = dscomResult.z1;\n      z3 = dscomResult.z3;\n      z11 = dscomResult.z11;\n      z13 = dscomResult.z13;\n      z21 = dscomResult.z21;\n      z23 = dscomResult.z23;\n      z31 = dscomResult.z31;\n      z33 = dscomResult.z33;\n      var dpperOptions = {\n        inclo: inclm,\n        init: satrec.init,\n        ep: satrec.ecco,\n        inclp: satrec.inclo,\n        nodep: satrec.nodeo,\n        argpp: satrec.argpo,\n        mp: satrec.mo,\n        opsmode: satrec.operationmode\n      };\n      var dpperResult = dpper(satrec, dpperOptions);\n      satrec.ecco = dpperResult.ep;\n      satrec.inclo = dpperResult.inclp;\n      satrec.nodeo = dpperResult.nodep;\n      satrec.argpo = dpperResult.argpp;\n      satrec.mo = dpperResult.mp;\n      argpm = 0.0;\n      nodem = 0.0;\n      mm = 0.0;\n      var dsinitOptions = {\n        cosim: cosim,\n        emsq: emsq,\n        argpo: satrec.argpo,\n        s1: s1,\n        s2: s2,\n        s3: s3,\n        s4: s4,\n        s5: s5,\n        sinim: sinim,\n        ss1: ss1,\n        ss2: ss2,\n        ss3: ss3,\n        ss4: ss4,\n        ss5: ss5,\n        sz1: sz1,\n        sz3: sz3,\n        sz11: sz11,\n        sz13: sz13,\n        sz21: sz21,\n        sz23: sz23,\n        sz31: sz31,\n        sz33: sz33,\n        t: satrec.t,\n        tc: tc,\n        gsto: satrec.gsto,\n        mo: satrec.mo,\n        mdot: satrec.mdot,\n        no: satrec.no,\n        nodeo: satrec.nodeo,\n        nodedot: satrec.nodedot,\n        xpidot: xpidot,\n        z1: z1,\n        z3: z3,\n        z11: z11,\n        z13: z13,\n        z21: z21,\n        z23: z23,\n        z31: z31,\n        z33: z33,\n        ecco: satrec.ecco,\n        eccsq: eccsq,\n        em: em,\n        argpm: argpm,\n        inclm: inclm,\n        mm: mm,\n        nm: nm,\n        nodem: nodem,\n        irez: satrec.irez,\n        atime: satrec.atime,\n        d2201: satrec.d2201,\n        d2211: satrec.d2211,\n        d3210: satrec.d3210,\n        d3222: satrec.d3222,\n        d4410: satrec.d4410,\n        d4422: satrec.d4422,\n        d5220: satrec.d5220,\n        d5232: satrec.d5232,\n        d5421: satrec.d5421,\n        d5433: satrec.d5433,\n        dedt: satrec.dedt,\n        didt: satrec.didt,\n        dmdt: satrec.dmdt,\n        dnodt: satrec.dnodt,\n        domdt: satrec.domdt,\n        del1: satrec.del1,\n        del2: satrec.del2,\n        del3: satrec.del3,\n        xfact: satrec.xfact,\n        xlamo: satrec.xlamo,\n        xli: satrec.xli,\n        xni: satrec.xni\n      };\n      var dsinitResult = dsinit(dsinitOptions);\n      satrec.irez = dsinitResult.irez;\n      satrec.atime = dsinitResult.atime;\n      satrec.d2201 = dsinitResult.d2201;\n      satrec.d2211 = dsinitResult.d2211;\n      satrec.d3210 = dsinitResult.d3210;\n      satrec.d3222 = dsinitResult.d3222;\n      satrec.d4410 = dsinitResult.d4410;\n      satrec.d4422 = dsinitResult.d4422;\n      satrec.d5220 = dsinitResult.d5220;\n      satrec.d5232 = dsinitResult.d5232;\n      satrec.d5421 = dsinitResult.d5421;\n      satrec.d5433 = dsinitResult.d5433;\n      satrec.dedt = dsinitResult.dedt;\n      satrec.didt = dsinitResult.didt;\n      satrec.dmdt = dsinitResult.dmdt;\n      satrec.dnodt = dsinitResult.dnodt;\n      satrec.domdt = dsinitResult.domdt;\n      satrec.del1 = dsinitResult.del1;\n      satrec.del2 = dsinitResult.del2;\n      satrec.del3 = dsinitResult.del3;\n      satrec.xfact = dsinitResult.xfact;\n      satrec.xlamo = dsinitResult.xlamo;\n      satrec.xli = dsinitResult.xli;\n      satrec.xni = dsinitResult.xni;\n    } // ----------- set variables if not deep space -----------\n\n\n    if (satrec.isimp !== 1) {\n      cc1sq = satrec.cc1 * satrec.cc1;\n      satrec.d2 = 4.0 * ao * tsi * cc1sq;\n      temp = satrec.d2 * tsi * satrec.cc1 / 3.0;\n      satrec.d3 = (17.0 * ao + sfour) * temp;\n      satrec.d4 = 0.5 * temp * ao * tsi * (221.0 * ao + 31.0 * sfour) * satrec.cc1;\n      satrec.t3cof = satrec.d2 + 2.0 * cc1sq;\n      satrec.t4cof = 0.25 * (3.0 * satrec.d3 + satrec.cc1 * (12.0 * satrec.d2 + 10.0 * cc1sq));\n      satrec.t5cof = 0.2 * (3.0 * satrec.d4 + 12.0 * satrec.cc1 * satrec.d3 + 6.0 * satrec.d2 * satrec.d2 + 15.0 * cc1sq * (2.0 * satrec.d2 + cc1sq));\n    }\n    /* finally propogate to zero epoch to initialize all others. */\n    // sgp4fix take out check to let satellites process until they are actually below earth surface\n    // if(satrec.error == 0)\n\n  }\n\n  sgp4(satrec, 0);\n  satrec.init = 'n';\n  /* eslint-enable no-param-reassign */\n}\n\n/* -----------------------------------------------------------------------------\n *\n *                           function twoline2rv\n *\n *  this function converts the two line element set character string data to\n *    variables and initializes the sgp4 variables. several intermediate varaibles\n *    and quantities are determined. note that the result is a structure so multiple\n *    satellites can be processed simultaneously without having to reinitialize. the\n *    verification mode is an important option that permits quick checks of any\n *    changes to the underlying technical theory. this option works using a\n *    modified tle file in which the start, stop, and delta time values are\n *    included at the end of the second line of data. this only works with the\n *    verification mode. the catalog mode simply propagates from -1440 to 1440 min\n *    from epoch and is useful when performing entire catalog runs.\n *\n *  author        : david vallado                  719-573-2600    1 mar 2001\n *\n *  inputs        :\n *    longstr1    - first line of the tle\n *    longstr2    - second line of the tle\n *    typerun     - type of run                    verification 'v', catalog 'c',\n *                                                 manual 'm'\n *    typeinput   - type of manual input           mfe 'm', epoch 'e', dayofyr 'd'\n *    opsmode     - mode of operation afspc or improved 'a', 'i'\n *    whichconst  - which set of constants to use  72, 84\n *\n *  outputs       :\n *    satrec      - structure containing all the sgp4 satellite information\n *\n *  coupling      :\n *    getgravconst-\n *    days2mdhms  - conversion of days to month, day, hour, minute, second\n *    jday        - convert day month year hour minute second into julian date\n *    sgp4init    - initialize the sgp4 variables\n *\n *  references    :\n *    norad spacetrack report #3\n *    vallado, crawford, hujsak, kelso  2006\n --------------------------------------------------------------------------- */\n\n/**\n * Return a Satellite imported from two lines of TLE data.\n *\n * Provide the two TLE lines as strings `longstr1` and `longstr2`,\n * and select which standard set of gravitational constants you want\n * by providing `gravity_constants`:\n *\n * `sgp4.propagation.wgs72` - Standard WGS 72 model\n * `sgp4.propagation.wgs84` - More recent WGS 84 model\n * `sgp4.propagation.wgs72old` - Legacy support for old SGP4 behavior\n *\n * Normally, computations are made using letious recent improvements\n * to the algorithm.  If you want to turn some of these off and go\n * back into \"afspc\" mode, then set `afspc_mode` to `True`.\n */\n\nfunction twoline2satrec(longstr1, longstr2) {\n  var opsmode = 'i';\n  var xpdotp = 1440.0 / (2.0 * pi); // 229.1831180523293;\n\n  var year = 0;\n  var satrec = {};\n  satrec.error = 0;\n  satrec.satnum = longstr1.substring(2, 7);\n  satrec.epochyr = parseInt(longstr1.substring(18, 20), 10);\n  satrec.epochdays = parseFloat(longstr1.substring(20, 32));\n  satrec.ndot = parseFloat(longstr1.substring(33, 43));\n  satrec.nddot = parseFloat(\".\".concat(parseInt(longstr1.substring(44, 50), 10), \"E\").concat(longstr1.substring(50, 52)));\n  satrec.bstar = parseFloat(\"\".concat(longstr1.substring(53, 54), \".\").concat(parseInt(longstr1.substring(54, 59), 10), \"E\").concat(longstr1.substring(59, 61))); // satrec.satnum = longstr2.substring(2, 7);\n\n  satrec.inclo = parseFloat(longstr2.substring(8, 16));\n  satrec.nodeo = parseFloat(longstr2.substring(17, 25));\n  satrec.ecco = parseFloat(\".\".concat(longstr2.substring(26, 33)));\n  satrec.argpo = parseFloat(longstr2.substring(34, 42));\n  satrec.mo = parseFloat(longstr2.substring(43, 51));\n  satrec.no = parseFloat(longstr2.substring(52, 63)); // ---- find no, ndot, nddot ----\n\n  satrec.no /= xpdotp; //   rad/min\n  // satrec.nddot= satrec.nddot * Math.pow(10.0, nexp);\n  // satrec.bstar= satrec.bstar * Math.pow(10.0, ibexp);\n  // ---- convert to sgp4 units ----\n\n  satrec.a = Math.pow(satrec.no * tumin, -2.0 / 3.0);\n  satrec.ndot /= xpdotp * 1440.0; // ? * minperday\n\n  satrec.nddot /= xpdotp * 1440.0 * 1440; // ---- find standard orbital elements ----\n\n  satrec.inclo *= deg2rad;\n  satrec.nodeo *= deg2rad;\n  satrec.argpo *= deg2rad;\n  satrec.mo *= deg2rad;\n  satrec.alta = satrec.a * (1.0 + satrec.ecco) - 1.0;\n  satrec.altp = satrec.a * (1.0 - satrec.ecco) - 1.0; // ----------------------------------------------------------------\n  // find sgp4epoch time of element set\n  // remember that sgp4 uses units of days from 0 jan 1950 (sgp4epoch)\n  // and minutes from the epoch (time)\n  // ----------------------------------------------------------------\n  // ---------------- temp fix for years from 1957-2056 -------------------\n  // --------- correct fix will occur when year is 4-digit in tle ---------\n\n  if (satrec.epochyr < 57) {\n    year = satrec.epochyr + 2000;\n  } else {\n    year = satrec.epochyr + 1900;\n  }\n\n  var mdhmsResult = days2mdhms(year, satrec.epochdays);\n  var mon = mdhmsResult.mon,\n      day = mdhmsResult.day,\n      hr = mdhmsResult.hr,\n      minute = mdhmsResult.minute,\n      sec = mdhmsResult.sec;\n  satrec.jdsatepoch = jday(year, mon, day, hr, minute, sec); //  ---------------- initialize the orbit at sgp4epoch -------------------\n\n  sgp4init(satrec, {\n    opsmode: opsmode,\n    satn: satrec.satnum,\n    epoch: satrec.jdsatepoch - 2433281.5,\n    xbstar: satrec.bstar,\n    xecco: satrec.ecco,\n    xargpo: satrec.argpo,\n    xinclo: satrec.inclo,\n    xmo: satrec.mo,\n    xno: satrec.no,\n    xnodeo: satrec.nodeo\n  });\n  return satrec;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction propagate() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  // Return a position and velocity vector for a given date and time.\n  var satrec = args[0];\n  var date = Array.prototype.slice.call(args, 1);\n  var j = jday.apply(void 0, _toConsumableArray(date));\n  var m = (j - satrec.jdsatepoch) * minutesPerDay;\n  return sgp4(satrec, m);\n}\n\nfunction dopplerFactor(location, position, velocity) {\n  var mfactor = 7.292115E-5;\n  var c = 299792.458; // Speed of light in km/s\n\n  var range = {\n    x: position.x - location.x,\n    y: position.y - location.y,\n    z: position.z - location.z\n  };\n  range.w = Math.sqrt(Math.pow(range.x, 2) + Math.pow(range.y, 2) + Math.pow(range.z, 2));\n  var rangeVel = {\n    x: velocity.x + mfactor * location.y,\n    y: velocity.y - mfactor * location.x,\n    z: velocity.z\n  };\n\n  function sign(value) {\n    return value >= 0 ? 1 : -1;\n  }\n\n  var rangeRate = (range.x * rangeVel.x + range.y * rangeVel.y + range.z * rangeVel.z) / range.w;\n  return 1 + rangeRate / c * sign(rangeRate);\n}\n\nfunction radiansToDegrees(radians) {\n  return radians * rad2deg;\n}\nfunction degreesToRadians(degrees) {\n  return degrees * deg2rad;\n}\nfunction degreesLat(radians) {\n  if (radians < -pi / 2 || radians > pi / 2) {\n    throw new RangeError('Latitude radians must be in range [-pi/2; pi/2].');\n  }\n\n  return radiansToDegrees(radians);\n}\nfunction degreesLong(radians) {\n  if (radians < -pi || radians > pi) {\n    throw new RangeError('Longitude radians must be in range [-pi; pi].');\n  }\n\n  return radiansToDegrees(radians);\n}\nfunction radiansLat(degrees) {\n  if (degrees < -90 || degrees > 90) {\n    throw new RangeError('Latitude degrees must be in range [-90; 90].');\n  }\n\n  return degreesToRadians(degrees);\n}\nfunction radiansLong(degrees) {\n  if (degrees < -180 || degrees > 180) {\n    throw new RangeError('Longitude degrees must be in range [-180; 180].');\n  }\n\n  return degreesToRadians(degrees);\n}\nfunction geodeticToEcf(geodetic) {\n  var longitude = geodetic.longitude,\n      latitude = geodetic.latitude,\n      height = geodetic.height;\n  var a = 6378.137;\n  var b = 6356.7523142;\n  var f = (a - b) / a;\n  var e2 = 2 * f - f * f;\n  var normal = a / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n  var x = (normal + height) * Math.cos(latitude) * Math.cos(longitude);\n  var y = (normal + height) * Math.cos(latitude) * Math.sin(longitude);\n  var z = (normal * (1 - e2) + height) * Math.sin(latitude);\n  return {\n    x: x,\n    y: y,\n    z: z\n  };\n}\nfunction eciToGeodetic(eci, gmst) {\n  // http://www.celestrak.com/columns/v02n03/\n  var a = 6378.137;\n  var b = 6356.7523142;\n  var R = Math.sqrt(eci.x * eci.x + eci.y * eci.y);\n  var f = (a - b) / a;\n  var e2 = 2 * f - f * f;\n  var longitude = Math.atan2(eci.y, eci.x) - gmst;\n\n  while (longitude < -pi) {\n    longitude += twoPi;\n  }\n\n  while (longitude > pi) {\n    longitude -= twoPi;\n  }\n\n  var kmax = 20;\n  var k = 0;\n  var latitude = Math.atan2(eci.z, Math.sqrt(eci.x * eci.x + eci.y * eci.y));\n  var C;\n\n  while (k < kmax) {\n    C = 1 / Math.sqrt(1 - e2 * (Math.sin(latitude) * Math.sin(latitude)));\n    latitude = Math.atan2(eci.z + a * C * e2 * Math.sin(latitude), R);\n    k += 1;\n  }\n\n  var height = R / Math.cos(latitude) - a * C;\n  return {\n    longitude: longitude,\n    latitude: latitude,\n    height: height\n  };\n}\nfunction ecfToEci(ecf, gmst) {\n  // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n  //\n  // [X]     [C -S  0][X]\n  // [Y]  =  [S  C  0][Y]\n  // [Z]eci  [0  0  1][Z]ecf\n  //\n  var X = ecf.x * Math.cos(gmst) - ecf.y * Math.sin(gmst);\n  var Y = ecf.x * Math.sin(gmst) + ecf.y * Math.cos(gmst);\n  var Z = ecf.z;\n  return {\n    x: X,\n    y: Y,\n    z: Z\n  };\n}\nfunction eciToEcf(eci, gmst) {\n  // ccar.colorado.edu/ASEN5070/handouts/coordsys.doc\n  //\n  // [X]     [C -S  0][X]\n  // [Y]  =  [S  C  0][Y]\n  // [Z]eci  [0  0  1][Z]ecf\n  //\n  //\n  // Inverse:\n  // [X]     [C  S  0][X]\n  // [Y]  =  [-S C  0][Y]\n  // [Z]ecf  [0  0  1][Z]eci\n  var x = eci.x * Math.cos(gmst) + eci.y * Math.sin(gmst);\n  var y = eci.x * -Math.sin(gmst) + eci.y * Math.cos(gmst);\n  var z = eci.z;\n  return {\n    x: x,\n    y: y,\n    z: z\n  };\n}\n\nfunction topocentric(observerGeodetic, satelliteEcf) {\n  // http://www.celestrak.com/columns/v02n02/\n  // TS Kelso's method, except I'm using ECF frame\n  // and he uses ECI.\n  var longitude = observerGeodetic.longitude,\n      latitude = observerGeodetic.latitude;\n  var observerEcf = geodeticToEcf(observerGeodetic);\n  var rx = satelliteEcf.x - observerEcf.x;\n  var ry = satelliteEcf.y - observerEcf.y;\n  var rz = satelliteEcf.z - observerEcf.z;\n  var topS = Math.sin(latitude) * Math.cos(longitude) * rx + Math.sin(latitude) * Math.sin(longitude) * ry - Math.cos(latitude) * rz;\n  var topE = -Math.sin(longitude) * rx + Math.cos(longitude) * ry;\n  var topZ = Math.cos(latitude) * Math.cos(longitude) * rx + Math.cos(latitude) * Math.sin(longitude) * ry + Math.sin(latitude) * rz;\n  return {\n    topS: topS,\n    topE: topE,\n    topZ: topZ\n  };\n}\n/**\n * @param {Object} tc\n * @param {Number} tc.topS Positive horizontal vector S due south.\n * @param {Number} tc.topE Positive horizontal vector E due east.\n * @param {Number} tc.topZ Vector Z normal to the surface of the earth (up).\n * @returns {Object}\n */\n\n\nfunction topocentricToLookAngles(tc) {\n  var topS = tc.topS,\n      topE = tc.topE,\n      topZ = tc.topZ;\n  var rangeSat = Math.sqrt(topS * topS + topE * topE + topZ * topZ);\n  var El = Math.asin(topZ / rangeSat);\n  var Az = Math.atan2(-topE, topS) + pi;\n  return {\n    azimuth: Az,\n    elevation: El,\n    rangeSat: rangeSat // Range in km\n\n  };\n}\n\nfunction ecfToLookAngles(observerGeodetic, satelliteEcf) {\n  var topocentricCoords = topocentric(observerGeodetic, satelliteEcf);\n  return topocentricToLookAngles(topocentricCoords);\n}\n\nexport { constants, degreesLat, degreesLong, degreesToRadians, dopplerFactor, ecfToEci, ecfToLookAngles, eciToEcf, eciToGeodetic, geodeticToEcf, gstime, invjday, jday, propagate, radiansLat, radiansLong, radiansToDegrees, sgp4, twoline2satrec };\n","export var SpaceObjectType;\n(function (SpaceObjectType) {\n    SpaceObjectType[SpaceObjectType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    SpaceObjectType[SpaceObjectType[\"PAYLOAD\"] = 1] = \"PAYLOAD\";\n    SpaceObjectType[SpaceObjectType[\"ROCKET_BODY\"] = 2] = \"ROCKET_BODY\";\n    SpaceObjectType[SpaceObjectType[\"DEBRIS\"] = 3] = \"DEBRIS\";\n    SpaceObjectType[SpaceObjectType[\"SPECIAL\"] = 4] = \"SPECIAL\";\n    SpaceObjectType[SpaceObjectType[\"RADAR_MEASUREMENT\"] = 5] = \"RADAR_MEASUREMENT\";\n    SpaceObjectType[SpaceObjectType[\"RADAR_TRACK\"] = 6] = \"RADAR_TRACK\";\n    SpaceObjectType[SpaceObjectType[\"RADAR_OBJECT\"] = 7] = \"RADAR_OBJECT\";\n    SpaceObjectType[SpaceObjectType[\"BALLISTIC_MISSILE\"] = 8] = \"BALLISTIC_MISSILE\";\n    SpaceObjectType[SpaceObjectType[\"STAR\"] = 9] = \"STAR\";\n    SpaceObjectType[SpaceObjectType[\"INTERGOVERNMENTAL_ORGANIZATION\"] = 10] = \"INTERGOVERNMENTAL_ORGANIZATION\";\n    SpaceObjectType[SpaceObjectType[\"SUBORBITAL_PAYLOAD_OPERATOR\"] = 11] = \"SUBORBITAL_PAYLOAD_OPERATOR\";\n    SpaceObjectType[SpaceObjectType[\"PAYLOAD_OWNER\"] = 12] = \"PAYLOAD_OWNER\";\n    SpaceObjectType[SpaceObjectType[\"METEOROLOGICAL_ROCKET_LAUNCH_AGENCY_OR_MANUFACTURER\"] = 13] = \"METEOROLOGICAL_ROCKET_LAUNCH_AGENCY_OR_MANUFACTURER\";\n    SpaceObjectType[SpaceObjectType[\"PAYLOAD_MANUFACTURER\"] = 14] = \"PAYLOAD_MANUFACTURER\";\n    SpaceObjectType[SpaceObjectType[\"LAUNCH_AGENCY\"] = 15] = \"LAUNCH_AGENCY\";\n    SpaceObjectType[SpaceObjectType[\"LAUNCH_SITE\"] = 16] = \"LAUNCH_SITE\";\n    SpaceObjectType[SpaceObjectType[\"LAUNCH_POSITION\"] = 17] = \"LAUNCH_POSITION\";\n    SpaceObjectType[SpaceObjectType[\"LAUNCH_FACILITY\"] = 18] = \"LAUNCH_FACILITY\";\n    SpaceObjectType[SpaceObjectType[\"CONTORL_FACILITY\"] = 19] = \"CONTORL_FACILITY\";\n    SpaceObjectType[SpaceObjectType[\"GROUND_SENSOR_STATION\"] = 20] = \"GROUND_SENSOR_STATION\";\n    SpaceObjectType[SpaceObjectType[\"OPTICAL\"] = 21] = \"OPTICAL\";\n    SpaceObjectType[SpaceObjectType[\"MECHANICAL\"] = 22] = \"MECHANICAL\";\n    SpaceObjectType[SpaceObjectType[\"PHASED_ARRAY_RADAR\"] = 23] = \"PHASED_ARRAY_RADAR\";\n    SpaceObjectType[SpaceObjectType[\"OBSERVER\"] = 24] = \"OBSERVER\";\n    SpaceObjectType[SpaceObjectType[\"BISTATIC_RADIO_TELESCOPE\"] = 25] = \"BISTATIC_RADIO_TELESCOPE\";\n    SpaceObjectType[SpaceObjectType[\"COUNTRY\"] = 26] = \"COUNTRY\";\n    SpaceObjectType[SpaceObjectType[\"LAUNCH_VEHICLE_MANUFACTURER\"] = 27] = \"LAUNCH_VEHICLE_MANUFACTURER\";\n    SpaceObjectType[SpaceObjectType[\"ENGINE_MANUFACTURER\"] = 28] = \"ENGINE_MANUFACTURER\";\n})(SpaceObjectType || (SpaceObjectType = {}));\n","export const ZOOM_EXP = 3;\nexport const PI = Math.PI;\nexport const TAU = 2 * Math.PI;\nexport const DEG2RAD = TAU / 360;\nexport const RAD2DEG = 360 / TAU;\n// export const MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;\n// TODO: this is really MILLISECONDS_TO_DAYS\nexport const MILLISECONDS_PER_DAY = 1.15741e-8;\nexport const MINUTES_PER_DAY = 1440;\nexport const PLANETARIUM_DIST = 3;\nexport const RADIUS_OF_DRAW_SUN = 9000;\nexport const SUN_SCALAR_DISTANCE = 250000;\nexport const RADIUS_OF_DRAW_MOON = 4000;\nexport const MOON_SCALAR_DISTANCE = 200000;\nexport const cMPerSec = 299792458;\nexport const cKmPerSec = 299792458 / 1000;\nexport const cKmPerMs = 299792458 / 1000 / 1000;\nexport const RADIUS_OF_EARTH = 6371; // Radius of Earth in kilometers\nexport const GROUND_BUFFER_DISTANCE = 1; // Distance objects are placed above earth to avoid z-buffer fighting\nexport const RADIUS_OF_SUN = 695700; // Radius of the Sun in kilometers\nexport const STAR_DISTANCE = 250000; // Artificial Star Distance - Lower numberrReduces webgl depth buffer\nexport const DISTANCE_TO_SUN = 149597870; // Distance from Earth to the Sun in kilometers\n","// @ts-nocheck\nconst A = { JMod: 2400000.5, J2000: 2451545, J1900: 2415020, B1900: 2415020.3135, B1950: 2433282.4235, JulianYear: 365.25, JulianCentury: 36525, BesselianYear: 365.2421988, AU: 149597870 };\nA.EclCoord = function (a, b, c) {\n    if (isNaN(a) || isNaN(b))\n        throw Error('Invalid EclCoord object: (' + a + ', ' + b + ')');\n    this.lat = a;\n    this.lng = b;\n    void 0 !== c && (this.h = c);\n};\nA.EclCoord.prototype = {\n    toWgs84String: function () {\n        return A.Math.formatNum((180 * this.lat) / Math.PI) + ', ' + A.Math.formatNum((180 * -this.lng) / Math.PI);\n    },\n};\nA.EclCoordfromWgs84 = function (a, b, c) {\n    return new A.EclCoord((a * Math.PI) / 180, (-b * Math.PI) / 180, c);\n};\nA.EqCoord = function (a, b) {\n    if (isNaN(a) || isNaN(b))\n        throw Error('Invalid EqCoord object: (' + a + ', ' + b + ')');\n    this.ra = a;\n    this.dec = b;\n};\nA.EqCoord.prototype = {\n    toString: function () {\n        return 'ra:' + A.Math.formatNum((180 * this.ra) / Math.PI) + ', dec:' + A.Math.formatNum((180 * this.dec) / Math.PI);\n    },\n};\nA.HzCoord = function (a, b) {\n    if (isNaN(a) || isNaN(b))\n        throw Error('Invalid HzCoord object: (' + a + ', ' + b + ')');\n    this.az = a;\n    this.alt = b;\n};\nA.HzCoord.prototype = {\n    toString: function () {\n        return 'azi:' + A.Math.formatNum((180 * this.az) / Math.PI) + ', alt:' + A.Math.formatNum((180 * this.alt) / Math.PI);\n    },\n};\nA.Coord = {\n    dmsToDeg: function (a, b, c, d) {\n        d = (60 * (60 * b + c) + d) / 3600;\n        return a ? -d : d;\n    },\n    calcAngle: function (a, b, c, d) {\n        return (A.Coord.dmsToDeg(a, b, c, d) * Math.PI) / 180;\n    },\n    calcRA: function (a, b, c) {\n        return ((A.Coord.dmsToDeg(!1, a, b, c) % 24) * 15 * Math.PI) / 180;\n    },\n    secondsToHMSStr: function (a) {\n        var b = Math.floor(a / 86400);\n        a = A.Math.pMod(a, 86400);\n        var c = Math.floor(a / 3600) % 24, d = Math.floor(a / 60) % 60;\n        a = Math.floor(a % 60);\n        return (0 !== b ? b + 'd ' : '') + (10 > c ? '0' : '') + c + ':' + (10 > d ? '0' : '') + d + ':' + (10 > a ? '0' : '') + a;\n    },\n    secondsToHMStr: function (a) {\n        var b = Math.floor(a / 86400);\n        a = A.Math.pMod(a, 86400);\n        var c = Math.floor(a / 3600) % 24;\n        a = Math.floor(a / 60) % 60;\n        return (0 !== b ? b + 'd ' : '') + (10 > c ? '0' : '') + c + ':' + (10 > a ? '0' : '') + a;\n    },\n    eqToEcl: function (a, b) {\n        var c = Math.sin(a.ra), d = Math.sin(a.dec), e = Math.cos(a.dec), f = Math.sin(b);\n        b = Math.cos(b);\n        return new A.EclCoord(Math.atan2(c * b + (d / e) * f, Math.cos(a.ra)), Math.asin(d * b - e * f * c));\n    },\n    eclToEq: function (a, b) {\n        var c = Math.sin(a.lat), d = Math.sin(a.lng), e = Math.cos(a.lng), f = Math.sin(b);\n        b = Math.cos(b);\n        let a2 = Math.atan2(c * b - (d / e) * f, Math.cos(a.lat));\n        0 > a2 && (a2 += 2 * Math.PI);\n        return new A.EqCoord(a2, Math.asin(d * b + e * f * c));\n    },\n    eqToHz: function (a, b, c) {\n        c = c - b.lng - a.ra;\n        var d = Math.cos(c), e = Math.sin(b.lat);\n        b = Math.cos(b.lat);\n        var f = Math.sin(a.dec);\n        a = Math.cos(a.dec);\n        return new A.HzCoord(Math.atan2(Math.sin(c), d * e - (f / a) * b), Math.asin(e * f + b * a * d));\n    },\n};\nA.DeltaT = {\n    jdToJde: function (a, b) {\n        b || (b = A.DeltaT.estimate(a));\n        return a + b / 86400;\n    },\n    jdeToJd: function (a, b) {\n        b || (b = A.DeltaT.estimate(a));\n        return a - b / 86400;\n    },\n    decimalYear: function (a) {\n        a = A.JulianDay.jdToCalendar(a);\n        return a.y + (a.m - 0.5) / 12;\n    },\n    estimate: function (a) {\n        var b = A.DeltaT.decimalYear(a);\n        a = Math.pow;\n        return -500 > b\n            ? -20 + 32 * a((b - 1820) / 100, 2)\n            : 500 > b\n                ? ((b /= 100), 10583.6 - 1014.41 * b + 33.78311 * a(b, 2) - 5.952053 * a(b, 3) - 0.1798452 * a(b, 4) + 0.022174192 * a(b, 5) + 0.0090316521 * a(b, 6))\n                : 1600 > b\n                    ? ((b = (b - 1e3) / 100), 1574.2 - 556.01 * b + 71.23472 * a(b, 2) + 0.319781 * a(b, 3) - 0.8503463 * a(b, 4) - 0.005050998 * a(b, 5) + 0.0083572073 * a(b, 6))\n                    : 1700 > b\n                        ? ((b -= 1600), 120 - 0.9808 * b - 0.01532 * a(b, 2) + a(b, 3) / 7129)\n                        : 1800 > b\n                            ? ((b -= 1700), 8.83 + 0.1603 * b - 0.0059285 * a(b, 2) + 1.3336e-4 * a(b, 3) - a(b, 4) / 1174e3)\n                            : 1860 > b\n                                ? ((b -= 1800), 13.72 - 0.332447 * b + 0.0068612 * a(b, 2) + 0.0041116 * a(b, 3) - 3.7436e-4 * a(b, 4) + 1.21272e-5 * a(b, 5) - 1.699e-7 * a(b, 6) + 8.75e-10 * a(b, 7))\n                                : 1900 > b\n                                    ? ((b -= 1860), 7.62 + 0.5737 * b - 0.251754 * a(b, 2) + 0.01680668 * a(b, 3) - 4.473624e-4 * a(b, 4) + a(b, 5) / 233174)\n                                    : 1920 > b\n                                        ? ((b -= 1900), -2.79 + 1.494119 * b - 0.0598939 * a(b, 2) + 0.0061966 * a(b, 3) - 1.97e-4 * a(b, 4))\n                                        : 1941 > b\n                                            ? ((b -= 1920), 21.2 + 0.84493 * b - 0.0761 * a(b, 2) + 0.0020936 * a(b, 3))\n                                            : 1961 > b\n                                                ? ((b -= 1950), 29.07 + 0.407 * b - a(b, 2) / 233 + a(b, 3) / 2547)\n                                                : 1986 > b\n                                                    ? ((b -= 1975), 45.45 + 1.067 * b - a(b, 2) / 260 - a(b, 3) / 718)\n                                                    : 2005 > b\n                                                        ? ((b -= 2e3), 63.86 + 0.3345 * b - 0.060374 * a(b, 2) + 0.0017275 * a(b, 3) + 6.51814e-4 * a(b, 4) + 2.373599e-5 * a(b, 5))\n                                                        : 2050 > b\n                                                            ? ((b -= 2e3), 62.92 + 0.32217 * b + 0.005589 * a(b, 2))\n                                                            : 2150 > b\n                                                                ? -20 + 32 * a((b - 1820) / 100, 2) - 0.5628 * (2150 - b)\n                                                                : -20 + 32 * a((b - 1820) / 100, 2);\n    },\n};\nA.Globe = {\n    Er: 6378.14,\n    Fl: 1 / 298.257,\n    parallaxConstants: function (a, b) {\n        b || (b = 0);\n        var c = 1 - A.Globe.Fl;\n        b = (0.001 * b) / A.Globe.Er;\n        return { rhoslat: Math.sin(Math.atan(c * Math.tan(a))) * c + b * Math.sin(a), rhoclat: Math.cos(Math.atan(c * Math.tan(a))) + b * Math.cos(a) };\n    },\n};\nA.Interp = {\n    newLen3: function (a, b, c) {\n        if (3 != c.length)\n            throw 'Error not 3';\n        if (b == a)\n            throw 'Error no x range';\n        var d = c[1] - c[0], e = c[2] - c[1];\n        return { x1: a, x3: b, y: c, a: d, b: e, c: e - d, abSum: d + e, xSum: b + a, xDiff: b - a };\n    },\n    interpolateX: function (a, b) {\n        return A.Interp.interpolateN(a, (2 * b - a.xSum) / a.xDiff);\n    },\n    interpolateN: function (a, b) {\n        return a.y[1] + 0.5 * b * (a.abSum + b * a.c);\n    },\n};\nA.JulianDay = function (a, b) {\n    a instanceof Date && (a = A.JulianDay.dateToJD(a));\n    this.jd = a;\n    this.deltaT = b ? b : A.DeltaT.estimate(this.jd);\n    this.jde = A.DeltaT.jdToJde(this.jd, this.deltaT);\n};\nA.JulianDay.prototype = {\n    toCalendar: function () {\n        return A.JulianDay.jdToCalendar(this.jd);\n    },\n    toDate: function () {\n        return A.JulianDay.jdToDate(this.jd);\n    },\n    jdJ2000Century: function () {\n        return (this.jd - A.J2000) / A.JulianCentury;\n    },\n    jdeJ2000Century: function () {\n        return (this.jde - A.J2000) / A.JulianCentury;\n    },\n    startOfDay: function () {\n        return new A.JulianDay(Math.floor(this.jde - 0.5) + 0.5, this.deltaT);\n    },\n};\nA.JulianDay.gregorianTimeStart = Date.UTC(1582, 9, 4);\nA.JulianDay.jdFromGregorian = function (a, b, c) {\n    return new A.JulianDay(A.JulianDay.jdFromGregorian(a, b, c));\n};\nA.JulianDay.jdFromJulian = function (a, b, c) {\n    return new A.JulianDay(A.JulianDay.calendarJulianToJD(a, b, c));\n};\nA.JulianDay.jdFromJDE = function (a) {\n    var b = A.DeltaT.estimate(a);\n    a = A.DeltaT.jdeToJd(a, b);\n    return new A.JulianDay(a, b);\n};\nA.JulianDay.dateToJD = function (a) {\n    var b = a.getUTCDate() + A.JulianDay.secondsFromHMS(a.getUTCHours(), a.getUTCMinutes(), a.getUTCSeconds()) / 86400;\n    return a.getTime() < A.JulianDay.gregorianTimeStart ? A.JulianDay.calendarJulianToJD(a.getUTCFullYear(), a.getUTCMonth() + 1, b) : A.JulianDay.calendarGregorianToJD(a.getUTCFullYear(), a.getUTCMonth() + 1, b);\n};\nA.JulianDay.calendarGregorianToJD = function (a, b, c) {\n    if (1 == b || 2 == b)\n        a--, (b += 12);\n    var d = Math.floor(a / 100);\n    return Math.floor((36525 * (a + 4716)) / 100) + Math.floor((306 * (b + 1)) / 10) + (2 - d + Math.floor(d / 4)) + c - 1524.5;\n};\nA.JulianDay.calendarJulianToJD = function (a, b, c) {\n    if (1 == b || 2 == b)\n        a--, (b += 12);\n    return Math.floor((36525 * (a + 4716)) / 100) + Math.floor((306 * (b + 1)) / 10) + c - 1524.5;\n};\nA.JulianDay.secondsFromHMS = function (a, b, c) {\n    return 3600 * a + 60 * b + c;\n};\nA.JulianDay.jdToDate = function (a) {\n    var b = A.JulianDay.jdToCalendar(a);\n    a = A.Math.modF(a + 0.5)[1];\n    a = Math.round(86400 * a);\n    return new Date(Date.UTC(b.y, b.m - 1, Math.floor(b.d), Math.floor(a / 3600) % 24, Math.floor(a / 60) % 60, Math.floor(a % 60)));\n};\nA.JulianDay.jdToCalendar = function (a) {\n    a = A.Math.modF(a + 0.5);\n    var b = a[0], c = b;\n    2299151 <= b && ((c = Math.floor((100 * b - 186721625) / 3652425)), (c = b + 1 + c - Math.floor(c / 4)));\n    var d = c + 1524;\n    b = Math.floor((100 * d - 12210) / 36525);\n    var e = Math.floor((36525 * b) / 100);\n    c = Math.floor((1e4 * (d - e)) / 306001);\n    a = d - e - Math.floor((306001 * c) / 1e4) + a[1];\n    c = 14 == c || 15 == c ? c - 13 : c - 1;\n    return { y: 1 == c || 2 == c ? Math.floor(b) - 4715 : Math.floor(b) - 4716, m: c, d: a };\n};\nA.JulianDay.leapYearGregorian = function (a) {\n    return (0 === a % 4 && 0 !== a % 100) || 0 === a % 400;\n};\nA.JulianDay.dayOfYear = function (a, b, c, d) {\n    a = 2;\n    d && a--;\n    return A.JulianDay._wholeMonths(b, a) + c;\n};\nA.JulianDay._wholeMonths = function (a, b) {\n    return Math.round((275 * a) / 9 - ((a + 9) / 12) * b - 30);\n};\nA.Math = {\n    pMod: function (a, b) {\n        a %= b;\n        0 > a && (a += b);\n        return a;\n    },\n    modF: function (a) {\n        return 0 > a ? ((a = -a), [-Math.floor(a), -(a % 1)]) : [Math.floor(a), a % 1];\n    },\n    horner: function (a, b) {\n        var c = b.length - 1;\n        if (0 >= c)\n            throw 'empty array not supported';\n        for (var d = b[c]; 0 < c;)\n            c--, (d = d * a + b[c]);\n        return d;\n    },\n    formatNum: function (a, b) {\n        b = Math.pow(10, b | 4);\n        return Math.round(a * b) / b;\n    },\n};\nA.Moon = {\n    parallax: function (a) {\n        return Math.asin(6378.14 / a);\n    },\n    apparentEquatorial: function (a) {\n        var b = A.Moon.geocentricPosition(a), c = A.Nutation.nutation(a);\n        a = A.Nutation.meanObliquityLaskar(a) + c.deltaobliquity;\n        return { eq: A.Coord.eclToEq(new A.EclCoord(b.lng + c.deltalng, b.lat), a), delta: b.delta };\n    },\n    apparentTopocentric: function (a, b, c) {\n        var d = A.Moon.apparentEquatorial(a), e = A.Globe.parallaxConstants(b.lat, b.h), f = A.Moon.parallax(d.delta);\n        c || (c = A.Sidereal.apparentInRa(a));\n        return { eq: A.Parallax.topocentric(d.eq, f, e.rhoslat, e.rhoclat, b.lng, c), delta: d.delta };\n    },\n    topocentricPosition: function (a, b, c) {\n        var d = A.Sidereal.apparentInRa(a);\n        a = A.Moon.apparentTopocentric(a, b, d);\n        var e = A.Coord.eqToHz(a.eq, b, d);\n        !0 === c && (e.alt += A.Refraction.bennett2(e.alt));\n        b = A.Moon.parallacticAngle(b.lat, d - (b.lng + a.eq.ra), a.eq.dec);\n        return { hz: e, eq: a.eq, delta: a.delta, q: b };\n    },\n    approxTransit: function (a, b) {\n        a = a.startOfDay();\n        return A.Rise.approxTransit(b, A.Sidereal.apparent0UT(a), A.Moon.apparentTopocentric(a, b).eq);\n    },\n    approxTimes: function (a, b) {\n        a = a.startOfDay();\n        var c = A.Moon.apparentTopocentric(a, b), d = A.Moon.parallax(c.delta);\n        d = A.Rise.stdh0Lunar(d);\n        a = A.Sidereal.apparent0UT(a);\n        return A.Rise.approxTimes(b, d, a, c.eq);\n    },\n    times: function (a, b) {\n        a = a.startOfDay();\n        var c = A.Moon.apparentTopocentric(new A.JulianDay(a.jd - 1, a.deltaT), b), d = A.Moon.apparentTopocentric(a, b), e = A.Moon.apparentTopocentric(new A.JulianDay(a.jd + 1, a.deltaT), b), f = A.Moon.parallax(d.delta);\n        f = A.Rise.stdh0Lunar(f);\n        var g = A.Sidereal.apparent0UT(a);\n        return A.Rise.times(b, a.deltaT, f, g, [c.eq, d.eq, e.eq]);\n    },\n    parallacticAngle: function (a, b, c) {\n        return Math.atan2(Math.sin(b), Math.tan(a) * Math.cos(c) - Math.sin(c) * Math.cos(b));\n    },\n    geocentricPosition: function (a) {\n        var b = Math.PI / 180, c = a.jdeJ2000Century();\n        a = A.Math.pMod(A.Math.horner(c, [218.3164477 * b, 481267.88123421 * b, -0.0015786 * b, b / 538841, -b / 65194e3]), 2 * Math.PI);\n        var d = A.Math.pMod(A.Math.horner(c, [297.8501921 * b, 445267.1114034 * b, -0.0018819 * b, b / 545868, -b / 113065e3]), 2 * Math.PI), e = A.Math.pMod(A.Math.horner(c, [357.5291092 * b, 35999.0502909 * b, -1.535e-4 * b, b / 2449e4]), 2 * Math.PI), f = A.Math.pMod(A.Math.horner(c, [134.9633964 * b, 477198.8675055 * b, 0.0087414 * b, b / 69699, -b / 14712e3]), 2 * Math.PI), g = A.Math.pMod(A.Math.horner(c, [93.272095 * b, 483202.0175233 * b, -0.0036539 * b, -b / 3526e3, b / 86331e4]), 2 * Math.PI), l = 119.75 * b + 131.849 * b * c, m = 53.09 * b + 479264.29 * b * c, h = 313.45 * b + 481266.484 * b * c;\n        c = A.Math.horner(c, [1, -0.002516, -7.4e-6]);\n        var p = c * c;\n        m = 3958 * Math.sin(l) + 1962 * Math.sin(a - g) + 318 * Math.sin(m);\n        var n = 0;\n        l = -2235 * Math.sin(a) + 382 * Math.sin(h) + 175 * Math.sin(l - g) + 175 * Math.sin(l + g) + 127 * Math.sin(a - f) - 115 * Math.sin(a + f);\n        for (h = 0; h < A.Moon.ta.length; h++) {\n            var k = A.Moon.ta[h];\n            var r = d * k[0] + e * k[1] + f * k[2] + g * k[3], q = Math.sin(r);\n            r = Math.cos(r);\n            switch (k[1]) {\n                case 0:\n                    m += k[4] * q;\n                    n += k[5] * r;\n                    break;\n                case 1:\n                case -1:\n                    m += k[4] * q * c;\n                    n += k[5] * r * c;\n                    break;\n                case 2:\n                case -2:\n                    m += k[4] * q * p;\n                    n += k[5] * r * p;\n                    break;\n                default:\n                    throw 'error';\n            }\n        }\n        for (h = 0; h < A.Moon.tb.length; h++)\n            switch (((k = A.Moon.tb[h]), (q = Math.sin(d * k[0] + e * k[1] + f * k[2] + g * k[3])), k[1])) {\n                case 0:\n                    l += k[4] * q;\n                    break;\n                case 1:\n                case -1:\n                    l += k[4] * q * c;\n                    break;\n                case 2:\n                case -2:\n                    l += k[4] * q * p;\n                    break;\n                default:\n                    throw 'error';\n            }\n        return { lng: A.Math.pMod(a, 2 * Math.PI) + 1e-6 * m * b, lat: 1e-6 * l * b, delta: 385000.56 + 0.001 * n };\n    },\n    ta: [\n        [0, 0, 1, 0, 6288774, -20905355],\n        [2, 0, -1, 0, 1274027, -3699111],\n        [2, 0, 0, 0, 658314, -2955968],\n        [0, 0, 2, 0, 213618, -569925],\n        [0, 1, 0, 0, -185116, 48888],\n        [0, 0, 0, 2, -114332, -3149],\n        [2, 0, -2, 0, 58793, 246158],\n        [2, -1, -1, 0, 57066, -152138],\n        [2, 0, 1, 0, 53322, -170733],\n        [2, -1, 0, 0, 45758, -204586],\n        [0, 1, -1, 0, -40923, -129620],\n        [1, 0, 0, 0, -34720, 108743],\n        [0, 1, 1, 0, -30383, 104755],\n        [2, 0, 0, -2, 15327, 10321],\n        [0, 0, 1, 2, -12528, 0],\n        [0, 0, 1, -2, 10980, 79661],\n        [4, 0, -1, 0, 10675, -34782],\n        [0, 0, 3, 0, 10034, -23210],\n        [4, 0, -2, 0, 8548, -21636],\n        [2, 1, -1, 0, -7888, 24208],\n        [2, 1, 0, 0, -6766, 30824],\n        [1, 0, -1, 0, -5163, -8379],\n        [1, 1, 0, 0, 4987, -16675],\n        [2, -1, 1, 0, 4036, -12831],\n        [2, 0, 2, 0, 3994, -10445],\n        [4, 0, 0, 0, 3861, -11650],\n        [2, 0, -3, 0, 3665, 14403],\n        [0, 1, -2, 0, -2689, -7003],\n        [2, 0, -1, 2, -2602, 0],\n        [2, -1, -2, 0, 2390, 10056],\n        [1, 0, 1, 0, -2348, 6322],\n        [2, -2, 0, 0, 2236, -9884],\n        [0, 1, 2, 0, -2120, 5751],\n        [0, 2, 0, 0, -2069, 0],\n        [2, -2, -1, 0, 2048, -4950],\n        [2, 0, 1, -2, -1773, 4130],\n        [2, 0, 0, 2, -1595, 0],\n        [4, -1, -1, 0, 1215, -3958],\n        [0, 0, 2, 2, -1110, 0],\n        [3, 0, -1, 0, -892, 3258],\n        [2, 1, 1, 0, -810, 2616],\n        [4, -1, -2, 0, 759, -1897],\n        [0, 2, -1, 0, -713, -2117],\n        [2, 2, -1, 0, -700, 2354],\n        [2, 1, -2, 0, 691, 0],\n        [2, -1, 0, -2, 596, 0],\n        [4, 0, 1, 0, 549, -1423],\n        [0, 0, 4, 0, 537, -1117],\n        [4, -1, 0, 0, 520, -1571],\n        [1, 0, -2, 0, -487, -1739],\n        [2, 1, 0, -2, -399, 0],\n        [0, 0, 2, -2, -381, -4421],\n        [1, 1, 1, 0, 351, 0],\n        [3, 0, -2, 0, -340, 0],\n        [4, 0, -3, 0, 330, 0],\n        [2, -1, 2, 0, 327, 0],\n        [0, 2, 1, 0, -323, 1165],\n        [1, 1, -1, 0, 299, 0],\n        [2, 0, 3, 0, 294, 0],\n        [2, 0, -1, -2, 0, 8752],\n    ],\n    tb: [\n        [0, 0, 0, 1, 5128122],\n        [0, 0, 1, 1, 280602],\n        [0, 0, 1, -1, 277693],\n        [2, 0, 0, -1, 173237],\n        [2, 0, -1, 1, 55413],\n        [2, 0, -1, -1, 46271],\n        [2, 0, 0, 1, 32573],\n        [0, 0, 2, 1, 17198],\n        [2, 0, 1, -1, 9266],\n        [0, 0, 2, -1, 8822],\n        [2, -1, 0, -1, 8216],\n        [2, 0, -2, -1, 4324],\n        [2, 0, 1, 1, 4200],\n        [2, 1, 0, -1, -3359],\n        [2, -1, -1, 1, 2463],\n        [2, -1, 0, 1, 2211],\n        [2, -1, -1, -1, 2065],\n        [0, 1, -1, -1, -1870],\n        [4, 0, -1, -1, 1828],\n        [0, 1, 0, 1, -1794],\n        [0, 0, 0, 3, -1749],\n        [0, 1, -1, 1, -1565],\n        [1, 0, 0, 1, -1491],\n        [0, 1, 1, 1, -1475],\n        [0, 1, 1, -1, -1410],\n        [0, 1, 0, -1, -1344],\n        [1, 0, 0, -1, -1335],\n        [0, 0, 3, 1, 1107],\n        [4, 0, 0, -1, 1021],\n        [4, 0, -1, 1, 833],\n        [0, 0, 1, -3, 777],\n        [4, 0, -2, 1, 671],\n        [2, 0, 0, -3, 607],\n        [2, 0, 2, -1, 596],\n        [2, -1, 1, -1, 491],\n        [2, 0, -2, 1, -451],\n        [0, 0, 3, -1, 439],\n        [2, 0, 2, 1, 422],\n        [2, 0, -3, -1, 421],\n        [2, 1, -1, 1, -366],\n        [2, 1, 0, 1, -351],\n        [4, 0, 0, 1, 331],\n        [2, -1, 1, 1, 315],\n        [2, -2, 0, -1, 302],\n        [0, 0, 1, 3, -283],\n        [2, 1, 1, -1, -229],\n        [1, 1, 0, -1, 223],\n        [1, 1, 0, 1, 223],\n        [0, 1, -2, -1, -220],\n        [2, 1, -1, -1, -220],\n        [1, 0, 1, 1, -185],\n        [2, -1, -2, -1, 181],\n        [0, 1, 2, 1, -177],\n        [4, 0, -2, -1, 176],\n        [4, -1, -1, -1, 166],\n        [1, 0, 1, -1, -164],\n        [4, 0, 1, -1, 132],\n        [1, 0, -1, -1, -119],\n        [4, -1, 0, -1, 115],\n        [2, -2, 0, 1, 107],\n    ],\n};\nA.MoonIllum = {\n    phaseAngleEq: function (a, b, c, d) {\n        a = A.MoonIllum._coselong(a, c);\n        return Math.atan2(d * Math.sin(Math.acos(a)), b - d * a);\n    },\n    phaseAngleEq2: function (a, b) {\n        return Math.acos(-A.MoonIllum._coselong(a, b));\n    },\n    illuminated: function (a) {\n        return (1 + Math.cos(a)) / 2;\n    },\n    positionAngle: function (a, b) {\n        var c = Math.cos(b.dec);\n        return Math.atan2(c * Math.sin(b.ra - a.ra), Math.sin(b.dec) * Math.cos(a.dec) - c * Math.sin(a.dec) * Math.cos(b.ra - a.ra));\n    },\n    _coselong: function (a, b) {\n        return Math.sin(b.dec) * Math.sin(a.dec) + Math.cos(b.dec) * Math.cos(a.dec) * Math.cos(b.ra - a.ra);\n    },\n};\nA.Nutation = {\n    nutation: function (a) {\n        a = a.jdeJ2000Century();\n        for (var b = (A.Math.horner(a, [297.85036, 445267.11148, -0.0019142, 1 / 189474]) * Math.PI) / 180, c = (A.Math.horner(a, [357.52772, 35999.05034, -1.603e-4, -1 / 3e5]) * Math.PI) / 180, d = (A.Math.horner(a, [134.96298, 477198.867398, 0.0086972, 1 / 5620]) * Math.PI) / 180, e = (A.Math.horner(a, [93.27191, 483202.017538, -0.0036825, 1 / 327270]) * Math.PI) / 180, f = (A.Math.horner(a, [125.04452, -1934.136261, 0.0020708, 1 / 45e4]) * Math.PI) / 180, g = 0, l = 0, m = A.Nutation.table22A.length - 1; 0 <= m; m--) {\n            var h = A.Nutation.table22A[m], p = h[0] * b + h[1] * c + h[2] * d + h[3] * e + h[4] * f, n = Math.cos(p);\n            g += Math.sin(p) * (h[5] + h[6] * a);\n            l += n * (h[7] + h[8] * a);\n        }\n        return { deltalng: (1e-4 / 3600) * g * (Math.PI / 180), deltaobliquity: (1e-4 / 3600) * l * (Math.PI / 180) };\n    },\n    nutationInRA: function (a) {\n        var b = A.Nutation.meanObliquityLaskar(a);\n        a = A.Nutation.nutation(a);\n        return a.deltalng * Math.cos(b + a.deltaobliquity);\n    },\n    trueObliquity: function (a) {\n        var b = A.Nutation.meanObliquityLaskar(a);\n        a = A.Nutation.nutation(a);\n        return b + a.deltaobliquity;\n    },\n    meanObliquity: function (a) {\n        return A.Math.horner(a.jdeJ2000Century(), [(84381.448 / 3600) * (Math.PI / 180), (-46.815 / 3600) * (Math.PI / 180), (-5.9e-4 / 3600) * (Math.PI / 180), (0.001813 / 3600) * (Math.PI / 180)]);\n    },\n    meanObliquityLaskar: function (a) {\n        return A.Math.horner(0.01 * a.jdeJ2000Century(), [\n            (84381.448 / 3600) * (Math.PI / 180),\n            (-4680.93 / 3600) * (Math.PI / 180),\n            (-1.55 / 3600) * (Math.PI / 180),\n            (1999.25 / 3600) * (Math.PI / 180),\n            (-51.38 / 3600) * (Math.PI / 180),\n            (-249.67 / 3600) * (Math.PI / 180),\n            (-39.05 / 3600) * (Math.PI / 180),\n            (7.12 / 3600) * (Math.PI / 180),\n            (27.87 / 3600) * (Math.PI / 180),\n            (5.79 / 3600) * (Math.PI / 180),\n            (2.45 / 3600) * (Math.PI / 180),\n        ]);\n    },\n    table22A: [\n        [0, 0, 0, 0, 1, -171996, -174.2, 92025, 8.9],\n        [-2, 0, 0, 2, 2, -13187, -1.6, 5736, -3.1],\n        [0, 0, 0, 2, 2, -2274, -0.2, 977, -0.5],\n        [0, 0, 0, 0, 2, 2062, 0.2, -895, 0.5],\n        [0, 1, 0, 0, 0, 1426, -3.4, 54, -0.1],\n        [0, 0, 1, 0, 0, 712, 0.1, -7, 0],\n        [-2, 1, 0, 2, 2, -517, 1.2, 224, -0.6],\n        [0, 0, 0, 2, 1, -386, -0.4, 200, 0],\n        [0, 0, 1, 2, 2, -301, 0, 129, -0.1],\n        [-2, -1, 0, 2, 2, 217, -0.5, -95, 0.3],\n        [-2, 0, 1, 0, 0, -158, 0, 0, 0],\n        [-2, 0, 0, 2, 1, 129, 0.1, -70, 0],\n        [0, 0, -1, 2, 2, 123, 0, -53, 0],\n        [2, 0, 0, 0, 0, 63, 0, 0, 0],\n        [0, 0, 1, 0, 1, 63, 0.1, -33, 0],\n        [2, 0, -1, 2, 2, -59, 0, 26, 0],\n        [0, 0, -1, 0, 1, -58, -0.1, 32, 0],\n        [0, 0, 1, 2, 1, -51, 0, 27, 0],\n        [-2, 0, 2, 0, 0, 48, 0, 0, 0],\n        [0, 0, -2, 2, 1, 46, 0, -24, 0],\n        [2, 0, 0, 2, 2, -38, 0, 16, 0],\n        [0, 0, 2, 2, 2, -31, 0, 13, 0],\n        [0, 0, 2, 0, 0, 29, 0, 0, 0],\n        [-2, 0, 1, 2, 2, 29, 0, -12, 0],\n        [0, 0, 0, 2, 0, 26, 0, 0, 0],\n        [-2, 0, 0, 2, 0, -22, 0, 0, 0],\n        [0, 0, -1, 2, 1, 21, 0, -10, 0],\n        [0, 2, 0, 0, 0, 17, -0.1, 0, 0],\n        [2, 0, -1, 0, 1, 16, 0, -8, 0],\n        [-2, 2, 0, 2, 2, -16, 0.1, 7, 0],\n        [0, 1, 0, 0, 1, -15, 0, 9, 0],\n        [-2, 0, 1, 0, 1, -13, 0, 7, 0],\n        [0, -1, 0, 0, 1, -12, 0, 6, 0],\n        [0, 0, 2, -2, 0, 11, 0, 0, 0],\n        [2, 0, -1, 2, 1, -10, 0, 5, 0],\n        [2, 0, 1, 2, 2, -8, 0, 3, 0],\n        [0, 1, 0, 2, 2, 7, 0, -3, 0],\n        [-2, 1, 1, 0, 0, -7, 0, 0, 0],\n        [0, -1, 0, 2, 2, -7, 0, 3, 0],\n        [2, 0, 0, 2, 1, -7, 0, 3, 0],\n        [2, 0, 1, 0, 0, 6, 0, 0, 0],\n        [-2, 0, 2, 2, 2, 6, 0, -3, 0],\n        [-2, 0, 1, 2, 1, 6, 0, -3, 0],\n        [2, 0, -2, 0, 1, -6, 0, 3, 0],\n        [2, 0, 0, 0, 1, -6, 0, 3, 0],\n        [0, -1, 1, 0, 0, 5, 0, 0, 0],\n        [-2, -1, 0, 2, 1, -5, 0, 3, 0],\n        [-2, 0, 0, 0, 1, -5, 0, 3, 0],\n        [0, 0, 2, 2, 1, -5, 0, 3, 0],\n        [-2, 0, 2, 0, 1, 4, 0, 0, 0],\n        [-2, 1, 0, 2, 1, 4, 0, 0, 0],\n        [0, 0, 1, -2, 0, 4, 0, 0, 0],\n        [-1, 0, 1, 0, 0, -4, 0, 0, 0],\n        [-2, 1, 0, 0, 0, -4, 0, 0, 0],\n        [1, 0, 0, 0, 0, -4, 0, 0, 0],\n        [0, 0, 1, 2, 0, 3, 0, 0, 0],\n        [0, 0, -2, 2, 2, -3, 0, 0, 0],\n        [-1, -1, 1, 0, 0, -3, 0, 0, 0],\n        [0, 1, 1, 0, 0, -3, 0, 0, 0],\n        [0, -1, 1, 2, 2, -3, 0, 0, 0],\n        [2, -1, -1, 2, 2, -3, 0, 0, 0],\n        [0, 0, 3, 2, 2, -3, 0, 0, 0],\n        [2, -1, 0, 2, 2, -3, 0, 0, 0],\n    ],\n};\nA.Parallax = {\n    earthsunParallax: ((8.794 / 60 / 60) * Math.PI) / 180,\n    horizontal: function (a) {\n        return ((8.794 / 60 / 60) * Math.PI) / 180 / a;\n    },\n    topocentric: function (a, b, c, d, e, f) {\n        e = A.Math.pMod(f - e - a.ra, 2 * Math.PI);\n        b = Math.sin(b);\n        f = Math.cos(e);\n        var g = Math.cos(a.dec);\n        e = Math.atan2(-d * b * Math.sin(e), g - d * b * f);\n        return new A.EqCoord(a.ra + e, Math.atan2((Math.sin(a.dec) - c * b) * Math.cos(e), g - d * b * f));\n    },\n    topocentric2: function (a, b, c, d, e, f) {\n        e = A.Math.pMod(f - e - a.ra, 2 * Math.PI);\n        f = Math.cos(a.dec);\n        return new A.EqCoord(a.ra + (-b * d * Math.sin(e)) / f, a.dec + -b * (c * f - d * Math.cos(e) * Math.sin(a.dec)));\n    },\n};\nA.Refraction = {\n    bennett: function (a) {\n        0 > a && (a = 0);\n        var b = Math.PI / 180;\n        return b / 60 / Math.tan(a + (7.31 * b * b) / (a + 4.4 * b));\n    },\n    bennett2: function (a) {\n        var b = Math.PI / 180, c = 60 / b, d = 0.06 / c;\n        c = 14.7 * c * b;\n        b *= 13;\n        a = A.Refraction.bennett(a);\n        return a - d * Math.sin(c * a + b);\n    },\n    saemundsson: function (a) {\n        var b = Math.PI / 180;\n        return (1.02 * b) / 60 / Math.tan(a + (10.3 * b * b) / (a + 5.11 * b));\n    },\n};\nA.Rise = {\n    meanRefraction: (0.5667 * Math.PI) / 180,\n    stdh0Stellar: (-0.5667 * Math.PI) / 180,\n    stdh0Solar: (-0.8333 * Math.PI) / 180,\n    stdh0LunarMean: (0.125 * Math.PI) / 180,\n    stdh0Lunar: function (a) {\n        return 0.7275 * a - A.Rise.meanRefraction;\n    },\n    circumpolar: function (a, b, c) {\n        a = (Math.sin(b) - Math.sin(a) * Math.sin(c)) / (Math.cos(a) * Math.cos(c));\n        return -1 > a || 1 < a ? null : a;\n    },\n    approxTransit: function (a, b, c) {\n        return (43200 * (c.ra + a.lng)) / Math.PI - b;\n    },\n    approxTimes: function (a, b, c, d) {\n        b = A.Rise.circumpolar(a.lat, b, d.dec);\n        if (!b)\n            return null;\n        b = (43200 * Math.acos(b)) / Math.PI;\n        a = (43200 * (d.ra + a.lng)) / Math.PI - c;\n        return { transit: A.Math.pMod(a, 86400), transitd: Math.floor(a / 86400), rise: A.Math.pMod(a - b, 86400), rised: Math.floor((a - b) / 86400), set: A.Math.pMod(a + b, 86400), setd: Math.floor((a + b) / 86400) };\n    },\n    times: function (a, b, c, d, e) {\n        function f(e) {\n            var f = A.Math.pMod(d + (360.985647 * e) / 360, 86400), g = e + b, h = A.Interp.interpolateX(l, g);\n            g = A.Interp.interpolateX(m, g);\n            f = (f * Math.PI) / 43200 - (a.lng + h);\n            h = Math.cos(g);\n            return A.Math.pMod(e + (((p * Math.sin(g) + n * h * Math.cos(f) - c) / (h * n * Math.sin(f))) * 43200) / Math.PI, 86400);\n        }\n        var g = A.Rise.approxTimes(a, c, d, e[1]);\n        if (!g)\n            return null;\n        var l = A.Interp.newLen3(-86400, 86400, [e[0].ra, e[1].ra, e[2].ra]), m = A.Interp.newLen3(-86400, 86400, [e[0].dec, e[1].dec, e[2].dec]);\n        e = d + (360.985647 * g.transit) / 360;\n        var h = A.Interp.interpolateX(l, g.transit + b);\n        g.transit = A.Math.pMod(g.transit - (e - (43200 * (a.lng + h)) / Math.PI), 86400);\n        var p = Math.sin(a.lat), n = Math.cos(a.lat);\n        g.rise = f(g.rise);\n        g.set = f(g.set);\n        return g;\n    },\n};\nA.Sidereal = {\n    iau82: [24110.54841, 8640184.812866, 0.093104, 6.2e-6],\n    jdToCFrac: function (a) {\n        a = A.Math.modF(a.jd + 0.5);\n        return [new A.JulianDay(a[0] - 0.5).jdJ2000Century(), a[1]];\n    },\n    mean: function (a) {\n        return A.Math.pMod(A.Sidereal._mean(a), 86400);\n    },\n    _mean: function (a) {\n        a = A.Sidereal._mean0UT(a);\n        return a.s + 86636.55536784 * a.f;\n    },\n    _meanInRA: function (a) {\n        a = A.Sidereal._mean0UT(a);\n        return (a.s * Math.PI) / 43200 + 2.0054758187 * a.f * Math.PI;\n    },\n    mean0UT: function (a) {\n        a = A.Sidereal._mean0UT(a);\n        return A.Math.pMod(a.s, 86400);\n    },\n    _mean0UT: function (a) {\n        a = A.Sidereal.jdToCFrac(a);\n        return { s: A.Math.horner(a[0], A.Sidereal.iau82), f: a[1] };\n    },\n    apparentInRa: function (a) {\n        var b = A.Sidereal._meanInRA(a);\n        a = A.Nutation.nutationInRA(a);\n        return A.Math.pMod(b + a, 2 * Math.PI);\n    },\n    apparent: function (a) {\n        var b = A.Sidereal._mean(a);\n        a = (648e3 * A.Nutation.nutationInRA(a)) / Math.PI / 15;\n        return A.Math.pMod(b + a, 86400);\n    },\n    apparentLocal: function (a, b) {\n        a = A.Sidereal.apparent(a);\n        return A.Math.pMod(a - (43200 * b) / Math.PI, 86400);\n    },\n    apparent0UT: function (a) {\n        var b = A.Math.modF(a.jd + 0.5);\n        a = A.Math.modF(a.jde + 0.5);\n        b = A.Math.horner((b[0] - 0.5 - A.J2000) / 36525, A.Sidereal.iau82) + 86636.55536784 * b[1];\n        a = (648e3 * A.Nutation.nutationInRA(new A.JulianDay(a[0]))) / Math.PI / 15;\n        return A.Math.pMod(b + a, 86400);\n    },\n};\nA.Solar = {\n    earthsunDelta: 149597870,\n    apparentEquatorial: function (a) {\n        var b = a.jdJ2000Century(), c = A.Solar.node(b);\n        b = A.Solar.apparentLongitude(b, c);\n        a = A.Nutation.meanObliquityLaskar(a) + ((0.00256 * Math.PI) / 180) * Math.cos(c);\n        c = Math.sin(b);\n        return new A.EqCoord(Math.atan2(Math.cos(a) * c, Math.cos(b)), Math.asin(Math.sin(a) * c));\n    },\n    apparentTopocentric: function (a, b, c) {\n        var d = A.Solar.apparentEquatorial(a), e = A.Globe.parallaxConstants(b.lat, b.h);\n        c || (c = A.Sidereal.apparentInRa(a));\n        return A.Parallax.topocentric2(d, A.Parallax.earthsunParallax, e.rhoslat, e.rhoclat, b.lng, c);\n    },\n    topocentricPosition: function (a, b, c) {\n        var d = A.Sidereal.apparentInRa(a);\n        a = A.Solar.apparentTopocentric(a, b, d);\n        b = A.Coord.eqToHz(a, b, d);\n        !0 === c && (b.alt += A.Refraction.bennett2(b.alt));\n        return { hz: b, eq: a };\n    },\n    approxTransit: function (a, b) {\n        a = a.startOfDay();\n        return A.Rise.approxTransit(b, A.Sidereal.apparent0UT(a), A.Solar.apparentTopocentric(a, b));\n    },\n    approxTimes: function (a, b) {\n        var c = a.startOfDay();\n        a = A.Solar.apparentTopocentric(c, b);\n        var d = A.Rise.stdh0Solar;\n        c = A.Sidereal.apparent0UT(c);\n        return A.Rise.approxTimes(b, d, c, a);\n    },\n    times: function (a, b) {\n        a = a.startOfDay();\n        var c = A.Solar.apparentTopocentric(new A.JulianDay(a.jd - 1, a.deltaT), b), d = A.Solar.apparentTopocentric(a, b), e = A.Solar.apparentTopocentric(new A.JulianDay(a.jd + 1, a.deltaT), b), f = A.Rise.stdh0Solar, g = A.Sidereal.apparent0UT(a);\n        return A.Rise.times(b, a.deltaT, f, g, [c, d, e]);\n    },\n    meanAnomaly: function (a) {\n        return (A.Math.horner(a, [357.52911, 35999.05029, -1.537e-4]) * Math.PI) / 180;\n    },\n    trueLongitude: function (a) {\n        var b = (A.Math.horner(a, [280.46646, 36000.76983, 3.032e-4]) * Math.PI) / 180, c = A.Solar.meanAnomaly(a);\n        a = ((A.Math.horner(a, [1.914602, -0.004817, -1.4e-5]) * Math.sin(c) + (0.019993 - 1.01e-4 * a) * Math.sin(2 * c) + 2.89e-4 * Math.sin(3 * c)) * Math.PI) / 180;\n        return { s: A.Math.pMod(b + a, 2 * Math.PI), v: A.Math.pMod(c + a, 2 * Math.PI) };\n    },\n    apparentLongitude: function (a, b) {\n        b || (b = A.Solar.node(a));\n        return A.Solar.trueLongitude(a).s - (0.00569 * Math.PI) / 180 - ((0.00478 * Math.PI) / 180) * Math.sin(b);\n    },\n    node: function (a) {\n        return ((125.04 - 1934.136 * a) * Math.PI) / 180;\n    },\n};\nA.Solistice = {\n    march: function (a) {\n        return 1e3 > a ? A.Solistice._eq(a, A.Solistice.mc0) : A.Solistice._eq(a - 2e3, A.Solistice.mc2);\n    },\n    june: function (a) {\n        return 1e3 > a ? A.Solistice._eq(a, A.Solistice.jc0) : A.Solistice._eq(a - 2e3, A.Solistice.jc2);\n    },\n    september: function (a) {\n        return 1e3 > a ? A.Solistice._eq(a, A.Solistice.sc0) : A.Solistice._eq(a - 2e3, A.Solistice.sc2);\n    },\n    december: function (a) {\n        return 1e3 > a ? A.Solistice._eq(a, A.Solistice.dc0) : A.Solistice._eq(a - 2e3, A.Solistice.dc2);\n    },\n    _eq: function (a, b) {\n        a = A.Math.horner(0.001 * a, b);\n        b = (a - A.J2000) / A.JulianCentury;\n        var c = ((35999.373 * Math.PI) / 180) * b - (2.47 * Math.PI) / 180;\n        c = 1 + 0.0334 * Math.cos(c) + 7e-4 * Math.cos(2 * c);\n        for (var d = 0, e = this.terms.length - 1; 0 <= e; e--) {\n            var f = this.terms[e];\n            d += f[0] * Math.cos(((f[1] + f[2] * b) * Math.PI) / 180);\n        }\n        return a + (1e-5 * d) / c;\n    },\n    mc0: [1721139.29189, 365242.1374, 0.06134, 0.00111, -7.1e-4],\n    jc0: [1721233.25401, 365241.72562, -0.05232, 0.00907, 2.5e-4],\n    sc0: [1721325.70455, 365242.49558, -0.11677, -0.00297, 7.4e-4],\n    dc0: [1721414.39987, 365242.88257, -0.00769, -0.00933, -6e-5],\n    mc2: [2451623.80984, 365242.37404, 0.05169, -0.00411, -5.7e-4],\n    jc2: [2451716.56767, 365241.62603, 0.00325, 0.00888, -3e-4],\n    sc2: [2451810.21715, 365242.01767, -0.11575, 0.00337, 7.8e-4],\n    dc2: [2451900.05952, 365242.74049, -0.06223, -0.00823, 3.2e-4],\n    terms: [\n        [485, 324.96, 1934.136],\n        [203, 337.23, 32964.467],\n        [199, 342.08, 20.186],\n        [182, 27.85, 445267.112],\n        [156, 73.14, 45036.886],\n        [136, 171.52, 22518.443],\n        [77, 222.54, 65928.934],\n        [74, 296.72, 3034.906],\n        [70, 243.58, 9037.513],\n        [58, 119.81, 33718.147],\n        [52, 297.17, 150.678],\n        [50, 21.02, 2281.226],\n        [45, 247.54, 29929.562],\n        [44, 325.15, 31555.956],\n        [29, 60.93, 4443.417],\n        [18, 155.12, 67555.328],\n        [17, 288.79, 4562.452],\n        [16, 198.04, 62894.029],\n        [14, 199.76, 31436.921],\n        [12, 95.39, 14577.848],\n        [12, 287.11, 31931.756],\n        [12, 320.81, 34777.259],\n        [9, 227.73, 1222.114],\n        [8, 15.45, 16859.074],\n    ],\n};\nexport { A };\n","import { MILLISECONDS_PER_DAY } from '../lib/constants';\nimport { dateFormat } from '../lib/external/dateFormat';\nexport const getDayOfYear = (date) => {\n    date = date || new Date();\n    const _isLeapYear = (date) => {\n        const year = date.getFullYear();\n        if ((year & 3) !== 0)\n            return false;\n        return year % 100 !== 0 || year % 400 === 0;\n    };\n    const dayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n    const mn = date.getMonth();\n    const dn = date.getUTCDate();\n    let dayOfYear = dayCount[mn] + dn;\n    if (mn > 1 && _isLeapYear(date))\n        dayOfYear++;\n    return dayOfYear;\n};\nexport const jday = (year, mon, day, hr, minute, sec) => {\n    if (!year) {\n        const now = new Date();\n        const jDayStart = new Date(now.getFullYear(), 0, 0);\n        const jDayDiff = now.getDate() - jDayStart.getDate();\n        return Math.floor(jDayDiff / MILLISECONDS_PER_DAY);\n    }\n    else {\n        return 367.0 * year - Math.floor(7 * (year + Math.floor((mon + 9) / 12.0)) * 0.25) + Math.floor((275 * mon) / 9.0) + day + 1721013.5 + ((sec / 60.0 + minute) / 60.0 + hr) / 24.0;\n    }\n};\nexport const localToZulu = (date) => {\n    const dateStr = dateFormat(date, 'isoDateTime', true);\n    const dateArr = dateStr.split(' ');\n    date = new Date(dateArr[0] + 'T' + dateArr[1] + 'Z');\n    return date;\n};\nexport const dateFromJday = (year, day) => {\n    const date = new Date(year, 0); // initialize a date in `year-01-01`\n    return new Date(date.setDate(day));\n};\nexport const dateToLocalInIso = (date) => {\n    const offsetMs = date.getTimezoneOffset() * 60 * 1000;\n    const msLocal = date.getTime() - offsetMs;\n    const dateLocal = new Date(msLocal);\n    let iso = dateLocal.toISOString();\n    iso = iso.replace('T', ' ');\n    const isoLocal = iso.slice(0, 19) + ' ' + dateLocal.toString().slice(25, 31);\n    return isoLocal;\n};\n","// //////////////////////////////////////////////////////////////////////////////\n// Code\n// //////////////////////////////////////////////////////////////////////////////\nexport const defaultGd = {\n    latitude: null,\n    longitude: 0,\n    height: 0,\n};\nexport const emptySensor = {\n    observerGd: {\n        latitude: null,\n        longitude: 0,\n        height: 0,\n    },\n    alt: null,\n    country: '',\n    lat: null,\n    lon: null,\n    name: '',\n    obsmaxaz: 0,\n    obsmaxel: 0,\n    obsmaxrange: 0,\n    obsminaz: 0,\n    obsminel: 0,\n    obsminrange: 0,\n    shortName: '',\n    staticNum: 0,\n    sun: '',\n    volume: false,\n    zoom: '',\n};\n","import * as satellite from 'satellite.js';\nimport { SpaceObjectType } from '../../api/SpaceObjectType';\nimport { DEG2RAD, MILLISECONDS_PER_DAY, PI, RAD2DEG } from '../../lib/constants';\nimport { A } from '../../lib/external/meuusjs';\nimport { jday } from '../../timeManager/transforms';\nimport { defaultGd } from '../constants';\n// TODO: create a way to determine if observerGd is using old satellite.js naming or lon,lat,alt\n// so that we can import satMath.ts instead\nexport const lookAnglesToEcf = (azDeg, elDeg, rng, obsLat, obsLong, obsAlt) => {\n    // site ecef in meters\n    const geodeticCoords = {\n        latitude: obsLat,\n        longitude: obsLong,\n        height: obsAlt,\n    };\n    const ecf = satellite.geodeticToEcf(geodeticCoords);\n    // some needed calculations\n    const slat = Math.sin(obsLat);\n    const slon = Math.sin(obsLong);\n    const clat = Math.cos(obsLat);\n    const clon = Math.cos(obsLong);\n    const azRad = DEG2RAD * azDeg;\n    const elRad = DEG2RAD * elDeg;\n    // az,el,range to sez convertion\n    const south = -rng * Math.cos(elRad) * Math.cos(azRad);\n    const east = rng * Math.cos(elRad) * Math.sin(azRad);\n    const zenith = rng * Math.sin(elRad);\n    const x = slat * clon * south + -slon * east + clat * clon * zenith + ecf.x;\n    const y = slat * slon * south + clon * east + clat * slon * zenith + ecf.y;\n    const z = -clat * south + slat * zenith + ecf.z;\n    return { x, y, z };\n};\n/* Returns Current Propagation Time */\nexport const propTime = (dynamicOffsetEpoch, staticOffset, propRate) => {\n    const now = new Date();\n    const dynamicPropOffset = now.getTime() - dynamicOffsetEpoch;\n    now.setTime(dynamicOffsetEpoch + staticOffset + dynamicPropOffset * propRate);\n    return now;\n};\nexport const checkSunExclusion = (sensor, j, gmst, now) => {\n    var jdo = new A.JulianDay(j); // now\n    var coord = A.EclCoordfromWgs84(0, 0, 0);\n    var coord2 = A.EclCoordfromWgs84(sensor.observerGd.latitude * RAD2DEG, sensor.observerGd.longitude * RAD2DEG, sensor.observerGd.height);\n    // AZ / EL Calculation\n    var tp = A.Solar.topocentricPosition(jdo, coord, false);\n    var tpRel = A.Solar.topocentricPosition(jdo, coord2, false);\n    const sunAz = tp.hz.az * RAD2DEG + (180 % 360);\n    const sunEl = (tp.hz.alt * RAD2DEG) % 360;\n    const sunElRel = (tpRel.hz.alt * RAD2DEG) % 360;\n    // Range Calculation\n    var T = new A.JulianDay(A.JulianDay.dateToJD(now)).jdJ2000Century();\n    let sunG = (A.Solar.meanAnomaly(T) * 180) / PI;\n    sunG = sunG % 360.0;\n    const sunR = 1.00014 - 0.01671 * Math.cos(sunG) - 0.00014 * Math.cos(2 * sunG);\n    const sunRange = (sunR * 149597870700) / 1000; // au to km conversion\n    // RAE to ECI\n    const sunECI = satellite.ecfToEci(lookAnglesToEcf(sunAz, sunEl, sunRange, 0, 0, 0), gmst);\n    return sensor.observerGd !== defaultGd && (sensor.type === SpaceObjectType.OPTICAL || sensor.type === SpaceObjectType.OBSERVER) && sunElRel > -6\n        ? [true, sunECI]\n        : [false, sunECI];\n};\nexport const isInFov = (lookangles, sensor) => {\n    const azimuth = lookangles.azimuth * RAD2DEG;\n    const elevation = lookangles.elevation * RAD2DEG;\n    const rangeSat = lookangles.rangeSat;\n    if (sensor.obsminaz > sensor.obsmaxaz) {\n        if (((azimuth >= sensor.obsminaz || azimuth <= sensor.obsmaxaz) &&\n            elevation >= sensor.obsminel &&\n            elevation <= sensor.obsmaxel &&\n            rangeSat <= sensor.obsmaxrange &&\n            rangeSat >= sensor.obsminrange) ||\n            ((azimuth >= sensor.obsminaz2 || azimuth <= sensor.obsmaxaz2) &&\n                elevation >= sensor.obsminel2 &&\n                elevation <= sensor.obsmaxel2 &&\n                rangeSat <= sensor.obsmaxrange2 &&\n                rangeSat >= sensor.obsminrange2)) {\n            return 1;\n        }\n    }\n    else {\n        if ((azimuth >= sensor.obsminaz &&\n            azimuth <= sensor.obsmaxaz &&\n            elevation >= sensor.obsminel &&\n            elevation <= sensor.obsmaxel &&\n            rangeSat <= sensor.obsmaxrange &&\n            rangeSat >= sensor.obsminrange) ||\n            (azimuth >= sensor.obsminaz2 &&\n                azimuth <= sensor.obsmaxaz2 &&\n                elevation >= sensor.obsminel2 &&\n                elevation <= sensor.obsmaxel2 &&\n                rangeSat <= sensor.obsmaxrange2 &&\n                rangeSat >= sensor.obsminrange2)) {\n            return 1;\n        }\n    }\n    return 0;\n};\nexport const setupTimeVariables = (dynamicOffsetEpoch, staticOffset, propRate, isSunlightView, isMultiSensor, sensor) => {\n    const now = propTime(dynamicOffsetEpoch, staticOffset, propRate);\n    const j = jday(now.getUTCFullYear(), now.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n    now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds()) +\n        now.getUTCMilliseconds() * MILLISECONDS_PER_DAY;\n    const gmst = satellite.gstime(j);\n    let isSunExclusion = false;\n    let sunEci = { x: 0, y: 0, z: 0 };\n    if (isSunlightView && !isMultiSensor) {\n        [isSunExclusion, sunEci] = checkSunExclusion(sensor, j, gmst, now);\n    }\n    const j2 = jday(now.getUTCFullYear(), now.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n    now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds() + 1) +\n        now.getUTCMilliseconds() * MILLISECONDS_PER_DAY;\n    const gmstNext = satellite.gstime(j2);\n    return {\n        now,\n        j,\n        gmst,\n        gmstNext,\n        isSunExclusion,\n        sunEci,\n    };\n};\nexport const createLatLonHei = (lat, lon, hei) => ({\n    longitude: lon,\n    latitude: lat,\n    height: hei,\n});\nexport const isInValidElevation = (lookangles, selectedSatFOV) => lookangles.elevation * RAD2DEG > 0 && 90 - lookangles.elevation * RAD2DEG < selectedSatFOV;\nexport const isSensorDeepSpace = (mSensor, sensor) => {\n    // TODO: This should use the sensors max range instead of sensor type\n    if (mSensor.length > 1 && sensor.type === SpaceObjectType.OPTICAL)\n        return true;\n    if (mSensor.length > 1 && sensor.type === SpaceObjectType.OBSERVER)\n        return true;\n    if (mSensor.length > 1 && sensor.type === SpaceObjectType.MECHANICAL)\n        return true;\n    return false;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as satellite from 'satellite.js';\nimport { DEG2RAD, RADIUS_OF_EARTH } from '../lib/constants';\nimport { jday } from '../timeManager/transforms';\nimport { propTime } from './positionCruncher/calculations';\nlet dynamicOffsetEpoch;\nlet staticOffset = 0;\nlet propRate = 1.0;\n/** CONSTANTS */\nconst satCache = [];\nlet NUM_SEGS;\nlet orbitFadeFactor = 1.0;\nonmessage = (m) => {\n    var _a;\n    if (m.data.isUpdate) {\n        // Add Satellites\n        if (!m.data.missile && m.data.satId < 99999) {\n            satCache[m.data.satId] = satellite.twoline2satrec(m.data.TLE1, m.data.TLE2);\n        }\n        // Add Missiles\n        if (m.data.missile) {\n            satCache[m.data.satId] = m.data;\n        }\n        // Don't Add Anything Else\n    }\n    dynamicOffsetEpoch = typeof m.data.dynamicOffsetEpoch !== 'undefined' ? m.data.dynamicOffsetEpoch : dynamicOffsetEpoch;\n    staticOffset = typeof m.data.staticOffset !== 'undefined' ? m.data.staticOffset : staticOffset;\n    propRate = typeof m.data.propRate !== 'undefined' ? m.data.propRate : propRate;\n    if (m.data.isInit) {\n        const satData = JSON.parse(m.data.satData);\n        orbitFadeFactor = JSON.parse(m.data.orbitFadeFactor);\n        const sLen = satData.length - 1;\n        let i = -1;\n        while (i < sLen) {\n            i++;\n            delete satData[i]['id'];\n            if (satData[i].static || satData[i].missile) {\n                satCache[i] = satData[i];\n            }\n            else {\n                satCache[i] = satellite.twoline2satrec(satData[i].TLE1, satData[i].TLE2);\n            }\n        }\n        NUM_SEGS = m.data.numSegs;\n    }\n    // NOTE: Without \"typeof\" vanguard 1 is falsly\n    if (typeof m.data.satId !== 'undefined') {\n        // TODO: figure out how to calculate the orbit points on constant\n        // position slices, not timeslices (ugly perigees on HEOs)\n        const satId = m.data.satId;\n        const pointsOut = new Float32Array((NUM_SEGS + 1) * 4);\n        const nowDate = propTime(dynamicOffsetEpoch, staticOffset, propRate);\n        const nowJ = jday(nowDate.getUTCFullYear(), nowDate.getUTCMonth() + 1, nowDate.getUTCDate(), nowDate.getUTCHours(), nowDate.getUTCMinutes(), nowDate.getUTCSeconds()) +\n            nowDate.getUTCMilliseconds() * 1.15741e-8; // days per millisecond\n        const now = (nowJ - satCache[satId].jdsatepoch) * 1440.0; // in minutes\n        const len = NUM_SEGS + 1;\n        let i = 0;\n        if (satCache[satId].missile) {\n            while (i < len) {\n                const missile = satCache[satId];\n                const x = Math.round(missile.altList.length * (i / NUM_SEGS));\n                const missileTime = propTime(dynamicOffsetEpoch, staticOffset, propRate);\n                const j = jday(missileTime.getUTCFullYear(), missileTime.getUTCMonth() + 1, // Note, this function requires months in range 1-12.\n                missileTime.getUTCDate(), missileTime.getUTCHours(), missileTime.getUTCMinutes(), missileTime.getUTCSeconds()) +\n                    missileTime.getUTCMilliseconds() * 1.15741e-8; // days per millisecond\n                const gmst = satellite.gstime(j);\n                const cosLat = Math.cos(missile.latList[x] * DEG2RAD);\n                const sinLat = Math.sin(missile.latList[x] * DEG2RAD);\n                const cosLon = Math.cos(missile.lonList[x] * DEG2RAD + gmst);\n                const sinLon = Math.sin(missile.lonList[x] * DEG2RAD + gmst);\n                pointsOut[i * 4] = (RADIUS_OF_EARTH + missile.altList[x]) * cosLat * cosLon;\n                pointsOut[i * 4 + 1] = (RADIUS_OF_EARTH + missile.altList[x]) * cosLat * sinLon;\n                pointsOut[i * 4 + 2] = (RADIUS_OF_EARTH + missile.altList[x]) * sinLat;\n                pointsOut[i * 4 + 3] = Math.min(orbitFadeFactor * (len / (i + 1)), 1.0);\n                i++;\n            }\n        }\n        else {\n            const period = (2 * Math.PI) / satCache[satId].no; // convert rads/min to min\n            let timeslice = period / NUM_SEGS;\n            while (i < len) {\n                const t = now + i * timeslice;\n                const p = (_a = satellite.sgp4(satCache[satId], t)) === null || _a === void 0 ? void 0 : _a.position;\n                if (p) {\n                    pointsOut[i * 4] = p.x;\n                    pointsOut[i * 4 + 1] = p.y;\n                    pointsOut[i * 4 + 2] = p.z;\n                    pointsOut[i * 4 + 3] = Math.min(orbitFadeFactor * (len / (i + 1)), 1.0);\n                }\n                else {\n                    pointsOut[i * 4] = 0;\n                    pointsOut[i * 4 + 1] = 0;\n                    pointsOut[i * 4 + 2] = 0;\n                    pointsOut[i * 4 + 3] = 0;\n                }\n                i++;\n            }\n        }\n        // TODO: figure out how this transferable buffer works\n        postMessage({\n            pointsOut: pointsOut.buffer,\n            satId: satId,\n        }, [pointsOut.buffer]);\n    }\n};\n"],"names":["pad","val","len","String","length","formats","masks","default","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","i18n","dayNames","monthNames","token","timezone","timezoneClip","dateFormat","date","mask","utc","arguments","Object","prototype","toString","call","test","undefined","Date","Number","isNaN","SyntaxError","slice","_","d","D","m","y","H","M","s","L","o","getTimezoneOffset","flags","dd","ddd","dddd","mm","mmm","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","Math","round","t","tt","T","TT","Z","match","pop","replace","floor","abs","S","$0"],"sourceRoot":""}