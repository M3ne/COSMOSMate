{"version":3,"file":"src_js_plugins_datetime_datetime_ts.09d0c09c6bd46da338f5.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA,4BAA4B,SAAI,IAAI,SAAI;AACxC,iCAAiC,uCAAuC,YAAY,KAAK,OAAO;AAChG;AACA;AACuD;AAChC;AAChB;AACP,aAAa,0EAAqB;AAClC,IAAI,6CAAC;AACL;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,IAAI,0EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL,IAAI,0EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,sBAAsB,sFAAiC;AACvD;AACA;AACA,IAAI,wFAAmC;AACvC;AACA;AACA,QAAQ,6CAAC;AACT,QAAQ,6CAAC;AACT;AACA;AACA;AACO;AACP,oBAAoB,oFAA+B;AACnD;AACA,IAAI,6CAAC,wBAAwB,sEAAiB;AAC9C,IAAI,6CAAC;AACL,IAAI,6CAAC;AACL;AACA;AACA,KAAK;AACL;AACA,IAAI,6CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C,KAAK;AACL;AACA;AACA,QAAQ,6CAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,aAAa,0EAAqB;AAClC,uBAAuB,6CAAC;AACxB;AACA;AACA,IAAI,6CAAC;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0GAAqD;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keeptrack.space/./src/js/plugins/datetime/datetime.ts"],"sourcesContent":["var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n};\nimport { keepTrackApi } from '@app/js/api/externalApi';\nimport $ from 'jquery';\nexport var updateDateTime = function (date) {\n    var _a = keepTrackApi.programs, satSet = _a.satSet, timeManager = _a.timeManager;\n    $('#datetime-input-tb').datepicker('setDate', date);\n    satSet.satCruncher.postMessage({\n        typ: 'offset',\n        dat: timeManager.propOffset.toString() + ' ' + timeManager.propRate.toString(),\n    });\n};\nexport var init = function () {\n    // Add HTML\n    keepTrackApi.register({\n        method: 'uiManagerInit',\n        cbName: 'datetime',\n        cb: uiManagerInit,\n    });\n    keepTrackApi.register({\n        method: 'updateDateTime',\n        cbName: 'datetime',\n        cb: updateDateTime,\n    });\n};\nexport var datetimeTextClick = function () {\n    var timeManager = keepTrackApi.programs.timeManager;\n    timeManager.propRealTime = Date.now();\n    timeManager.propTime();\n    keepTrackApi.methods.updateDateTime(new Date(timeManager.propTime()));\n    if (!settingsManager.isEditTime) {\n        // $('#datetime-text').fadeOut();\n        $('#datetime-input').fadeIn();\n        $('#datetime-input-tb').trigger('focus');\n        settingsManager.isEditTime = true;\n    }\n};\nexport var uiManagerInit = function () {\n    var uiManager = keepTrackApi.programs.uiManager;\n    // Bottom Icon\n    $('#nav-wrapper').append(keepTrackApi.html(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n        <ul id=\\\"nav-mobile\\\">\\n          <li id=\\\"jday\\\"></li>\\n          <div id=\\\"datetime\\\" class=\\\"tooltipped\\\" data-position=\\\"top\\\" data-delay=\\\"50\\\" data-tooltip=\\\"Time Menu\\\">\\n            <div id=\\\"datetime-text\\\">Placeholder Text</div>\\n            <div id=\\\"datetime-input\\\">\\n              <form id=\\\"datetime-input-form\\\">\\n                <input type=\\\"text\\\" id=\\\"datetime-input-tb\\\" readonly=\\\"true\\\" />\\n              </form>\\n            </div>\\n          </div>\\n        </ul>\\n      \"], [\"\\n        <ul id=\\\"nav-mobile\\\">\\n          <li id=\\\"jday\\\"></li>\\n          <div id=\\\"datetime\\\" class=\\\"tooltipped\\\" data-position=\\\"top\\\" data-delay=\\\"50\\\" data-tooltip=\\\"Time Menu\\\">\\n            <div id=\\\"datetime-text\\\">Placeholder Text</div>\\n            <div id=\\\"datetime-input\\\">\\n              <form id=\\\"datetime-input-form\\\">\\n                <input type=\\\"text\\\" id=\\\"datetime-input-tb\\\" readonly=\\\"true\\\" />\\n              </form>\\n            </div>\\n          </div>\\n        </ul>\\n      \"]))));\n    $('#datetime-text').on('click', datetimeTextClick);\n    $('#datetime-input-form').on('change', function (e) {\n        datetimeInputFormChange();\n        e.preventDefault();\n    });\n    // Initialize the date/time picker\n    $('#datetime-input-tb')\n        .datetimepicker({\n        dateFormat: 'yy-mm-dd',\n        timeFormat: 'HH:mm:ss',\n        timezone: '+0000',\n        gotoCurrent: true,\n        addSliderAccess: true,\n        // minDate: -14, // No more than 7 days in the past\n        // maxDate: 14, // or 7 days in the future to make sure ELSETs are valid\n        sliderAccessArgs: { touchonly: false },\n    })\n        .on('change.dp', function () {\n        // This code gets called when the done button is pressed or the time sliders are closed\n        $('#datetime-input').fadeOut();\n        // TODO: Migrate to watchlist.ts\n        try {\n            uiManager.updateNextPassOverlay(true);\n        }\n        catch (_a) {\n            // Intentionally ignored\n        }\n        settingsManager.isEditTime = false;\n    });\n};\nexport var datetimeInputFormChange = function (jestOverride) {\n    var _a = keepTrackApi.programs, timeManager = _a.timeManager, satSet = _a.satSet, uiManager = _a.uiManager;\n    var selectedDate = $('#datetime-input-tb').datepicker('getDate') || jestOverride;\n    var today = new Date();\n    var jday = timeManager.getDayOfYear(timeManager.propTime());\n    $('#jday').html(jday);\n    timeManager.propOffset = selectedDate.getTime() - today.getTime();\n    satSet.satCruncher.postMessage({\n        typ: 'offset',\n        dat: timeManager.propOffset.toString() + ' ' + timeManager.propRate.toString(),\n    });\n    timeManager.propRealTime = Date.now();\n    timeManager.propTime();\n    // Reset last update times when going backwards in time\n    settingsManager.lastBoxUpdateTime = timeManager.now;\n    // TODO: Migrate to watchlist.ts\n    try {\n        keepTrackApi.programs.watchlist.lastOverlayUpdateTime = timeManager.now * 1 - 7000;\n        uiManager.updateNextPassOverlay(true);\n    }\n    catch (_b) {\n        // Ignore\n    }\n    // radarDataManager.findFirstDataTime();\n};\nvar templateObject_1;\n"],"names":[],"sourceRoot":""}