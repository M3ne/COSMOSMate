{"version":3,"file":"src_js_plugins_plotAnalysis_plotAnalysis_ts.2bfbb841f8e69b8754c6.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACsH;AACjB;AACrG,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F;AACA,yEAAyE,2BAA2B,4BAA4B,GAAG,gCAAgC,iBAAiB,GAAG,0BAA0B,gBAAgB,gBAAgB,kBAAkB,cAAc,GAAG,SAAS,kIAAkI,YAAY,aAAa,OAAO,KAAK,UAAU,MAAM,KAAK,UAAU,UAAU,UAAU,UAAU,wDAAwD,2BAA2B,4BAA4B,GAAG,gCAAgC,iBAAiB,GAAG,0BAA0B,gBAAgB,gBAAgB,kBAAkB,cAAc,GAAG,qBAAqB;AACzxB;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNvC,MAA2G;AAC3G,MAAiG;AACjG,MAAwG;AACxG,MAA2H;AAC3H,MAAoH;AACpH,MAAoH;AACpH,MAA8H;AAC9H;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;;AAErC,uBAAuB,uGAAa;AACpC;AACA,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,qGAAO;;;;AAIwE;AAChG,OAAO,iEAAe,qGAAO,IAAI,4GAAc,GAAG,4GAAc,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;;AC1BtB;AACM;AACE;AACA;AACA;AACP;AACjD,+BAA+B,uEAAiB;AACvD;AACA;AACA;AACA,8BAA8B,6DAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6DAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6DAAe;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yDAAW;AACzC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/CwD;AACpB;AAC7B,6BAA6B,uEAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC5BwD;AACrB;AAC5B;AACP;AACA;AACA;AACA;AACA,wBAAwB,qDAAwB;AAChD;AACA,QAAQ,4CAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,4BAA4B;AAC5B;AACA,eAAe,yCAAY;AAC3B;AACA,UAAU,qBAAqB;AAC/B,UAAU,qBAAqB;AAC/B,UAAU,qBAAqB;AAC/B;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP;AACA,YAAY,mCAAmC,EAAE,2EAAqB;AACtE;AACA;AACA,gBAAgB,0HAA0H;AAC1I;AACA;AACA;AACA,oBAAoB,0HAA0H;AAC9I;AACA;AACA;;;;;;;;;;;;;;;;;;ACzGwD;AACrB;AAC5B;AACP;AACA;AACA;AACA;AACA,wBAAwB,qDAAwB;AAChD;AACA,QAAQ,4CAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,4BAA4B;AAC5B;AACA,eAAe,yCAAY;AAC3B;AACA,UAAU,qBAAqB;AAC/B,UAAU,qBAAqB;AAC/B,UAAU,qBAAqB;AAC/B;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP;AACA,YAAY,mCAAmC,EAAE,2EAAqB;AACtE;AACA;AACA,gBAAgB,0HAA0H;AAC1I;AACA;AACA;AACA,oBAAoB,0HAA0H;AAC9I;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7HwD;AACM;AACd;AACb;AAC5B;AACP;AACA;AACA;AACA;AACA,wBAAwB,qDAAwB;AAChD;AACA;AACA,mBAAmB,yCAAY;AAC/B;AACA;AACA;AACA,gBAAgB,4FAAsC;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,mBAAmB;AACnB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP,YAAY,oBAAoB,EAAE,2EAAqB;AACvD;AACA;AACA;AACA;AACA;AACA,sCAAsC,gFAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAO;AACrC;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,4CAA4C,0DAAO;AACnD;AACA;AACA;AACA;AACA,+CAA+C,0DAAO;AACtD;AACA;AACA;AACA;AACA;AACA,8CAA8C,0DAAO;AACrD;AACA;AACA,8CAA8C,0DAAO;AACrD;AACA;AACA,KAAK;AACL;AACA,UAAU,yBAAyB;AACnC,UAAU,6BAA6B;AACvC,UAAU,+BAA+B;AACzC,UAAU,6BAA6B;AACvC;AACA;;;;;;;;;;;;;;;;;;ACzLwD;AACrB;AAC5B;AACP;AACA;AACA;AACA;AACA,wBAAwB,qDAAwB;AAChD;AACA,QAAQ,4CAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,4BAA4B;AAC5B;AACA,eAAe,yCAAY;AAC3B;AACA,UAAU,0BAA0B;AACpC,UAAU,4BAA4B;AACtC,UAAU,+BAA+B;AACzC;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,mBAAmB;AACnB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP;AACA,YAAY,mCAAmC,EAAE,2EAAqB;AACtE;AACA;AACA;AACA;AACA;AACA,gBAAgB,oCAAoC;AACpD,gBAAgB,wFAAwF;AACxG;AACA;;;;;;;;;;;;;;;;;;;;ACrHwD;AACM;AACd;AACb;AAC5B;AACP;AACA;AACA;AACA;AACA,wBAAwB,qDAAwB;AAChD;AACA;AACA,mBAAmB,yCAAY;AAC/B;AACA;AACA;AACA,gBAAgB,4FAAsC;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,mBAAmB;AACnB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB,gBAAgB;AAChB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP,YAAY,iCAAiC,EAAE,2EAAqB;AACpE;AACA;AACA;AACA,sCAAsC,gFAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,0DAAO;AACzD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjLwD;AACrB;AACf;AACG;AACsD;AACJ;AACmB;AACA;AACY;AACZ;AACe;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,IAAI,6CAAC,uBAAuB,kFAAoB;AAChD,IAAI,6CAAC,yBAAyB,sFAAsB;AACpD,IAAI,6CAAC;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,IAAI,6CAAC;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL,IAAI,6CAAC;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,YAAY,2BAA2B,EAAE,2EAAqB;AAC9D;AACA;AACA,aAAa,6CAAC;AACd,YAAY,6CAAC;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAC,0CAA0C,iCAAiC;AACpF;AACA;AACA;AACA;AACA,mBAAmB,sFAAoB,CAAC,mFAAiB;AACzD;AACA;AACA;AACA,SAAS;AACT,QAAQ,6CAAC;AACT;AACA;AACA;AACO;AACP,YAAY,2BAA2B,EAAE,2EAAqB;AAC9D;AACA;AACA,aAAa,6CAAC;AACd,YAAY,6CAAC;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAC,2CAA2C,iCAAiC;AACrF;AACA;AACA;AACA;AACA,oBAAoB,sFAAoB,CAAC,mFAAiB;AAC1D;AACA;AACA;AACA,SAAS;AACT,QAAQ,6CAAC;AACT;AACA;AACA;AACO;AACP,YAAY,2BAA2B,EAAE,2EAAqB;AAC9D;AACA;AACA,aAAa,6CAAC;AACd,YAAY,6CAAC;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa,6CAAC;AACd,YAAY,6CAAC;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAC,2CAA2C,iCAAiC;AACrF;AACA;AACA;AACA;AACA,oBAAoB,sFAAoB,CAAC,mFAAiB;AAC1D;AACA;AACA;AACA,SAAS;AACT,QAAQ,6CAAC;AACT;AACA;AACA;AACO;AACP,YAAY,YAAY,EAAE,2EAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAC,2CAA2C,iCAAiC;AACrF;AACA;AACA,4BAA4B,qDAAwB;AACpD;AACA,wBAAwB,8FAAwB,CAAC,2FAAqB;AACtE;AACA;AACA;AACA,SAAS;AACT,QAAQ,6CAAC;AACT;AACA;AACA;AACO;AACP,YAAY,YAAY,EAAE,2EAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAC,2CAA2C,iCAAiC;AACrF;AACA;AACA,4BAA4B,qDAAwB;AACpD;AACA,wBAAwB,iGAAyB,CAAC,8FAAsB;AACxE;AACA;AACA;AACA,SAAS;AACT,QAAQ,6CAAC;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP,IAAI,6CAAC,0CAA0C,iCAAiC;AAChF,IAAI,6CAAC;AACL;AACA,IAAI,6CAAC,2CAA2C,iCAAiC;AACjF,IAAI,6CAAC;AACL;AACA,IAAI,6CAAC,2CAA2C,iCAAiC;AACjF,IAAI,6CAAC;AACL;AACA,IAAI,6CAAC,2CAA2C,iCAAiC;AACjF,IAAI,6CAAC;AACL;AACA,IAAI,6CAAC,2CAA2C,iCAAiC;AACjF,IAAI,6CAAC;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,QAAQ;AACnB,aAAa;AACb;AACO;AACP,YAAY,gBAAgB,EAAE,2EAAqB;AACnD;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAC;AACT;AACA,mBAAmB,sFAAoB,CAAC,mFAAiB;AACzD;AACA;AACA,QAAQ,6CAAC;AACT;AACA,oBAAoB,sFAAoB,CAAC,mFAAiB;AAC1D;AACA;AACA,QAAQ,6CAAC;AACT;AACA,oBAAoB,sFAAoB,CAAC,mFAAiB;AAC1D;AACA","sources":["webpack://keeptrack.space/./src/js/plugins/plotAnalysis/components/PlotAnalysisSideMenu.css","webpack://keeptrack.space/./src/js/plugins/plotAnalysis/components/PlotAnalysisSideMenu.css?09ec","webpack://keeptrack.space/./src/js/plugins/plotAnalysis/components/PlotAnalysisBottomIcon.ts","webpack://keeptrack.space/./src/js/plugins/plotAnalysis/components/PlotAnalysisSideMenu.ts","webpack://keeptrack.space/./src/js/plugins/plotAnalysis/components/plots/ecfScatterPlot.ts","webpack://keeptrack.space/./src/js/plugins/plotAnalysis/components/plots/eciScatterPlot.ts","webpack://keeptrack.space/./src/js/plugins/plotAnalysis/components/plots/inc2LonScatterPlot.ts","webpack://keeptrack.space/./src/js/plugins/plotAnalysis/components/plots/ricScatterPlot.ts","webpack://keeptrack.space/./src/js/plugins/plotAnalysis/components/plots/time2LonScatterPlot.ts","webpack://keeptrack.space/./src/js/plugins/plotAnalysis/plotAnalysis.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".plot-analysis-menu-maximized {\\n  width: 100% !important;\\n  height: 100% !important;\\n}\\n\\n.plot-analysis-menu-normal {\\n  width: 500px;\\n}\\n\\n.plot-analysis-chart {\\n  width: 100%;\\n  height: 90%;\\n  padding: 10px;\\n  margin: 0;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/js/plugins/plotAnalysis/components/PlotAnalysisSideMenu.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;EACX,WAAW;EACX,aAAa;EACb,SAAS;AACX\",\"sourcesContent\":[\".plot-analysis-menu-maximized {\\n  width: 100% !important;\\n  height: 100% !important;\\n}\\n\\n.plot-analysis-menu-normal {\\n  width: 500px;\\n}\\n\\n.plot-analysis-chart {\\n  width: 100%;\\n  height: 90%;\\n  padding: 10px;\\n  margin: 0;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!./PlotAnalysisSideMenu.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!./PlotAnalysisSideMenu.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import linePlotPng from '@app/img/icons/line-plot.png';\nimport scatterPlotPng from '@app/img/icons/scatter-plot.png';\nimport scatterPlotPng2 from '@app/img/icons/scatter-plot2.png';\nimport scatterPlotPng3 from '@app/img/icons/scatter-plot3.png';\nimport scatterPlotPng4 from '@app/img/icons/scatter-plot4.png';\nimport { keepTrackApi } from '@app/js/api/keepTrackApi';\nexport const PlotAnalysisBottomIcon = keepTrackApi.html `\n      <div id=\"menu-plot-analysis\" class=\"bmenu-item bmenu-item-disabled\">\n        <img\n          alt=\"ECI Plots\"\n          src=\"\" delayedsrc=${scatterPlotPng2}\n        />\n        <span class=\"bmenu-title\">ECI Plots</span>\n        <div class=\"status-icon\"></div>\n      </div>\n      <div id=\"menu-plot-analysis2\" class=\"bmenu-item bmenu-item-disabled\">\n        <img\n          alt=\"ECF Plots\"\n          src=\"\" delayedsrc=${scatterPlotPng3}\n        />\n        <span class=\"bmenu-title\">ECF Plots</span>\n        <div class=\"status-icon\"></div>\n      </div>\n      <div id=\"menu-plot-analysis3\" class=\"bmenu-item bmenu-item-disabled\">\n        <img\n          alt=\"RIC Plots\"\n          src=\"\" delayedsrc=${scatterPlotPng4}\n        />\n        <span class=\"bmenu-title\">RIC Plots</span>\n        <div class=\"status-icon\"></div>\n      </div>\n      <div id=\"menu-plot-analysis4\" class=\"bmenu-item\">\n        <img\n          alt=\"Inc v Lon Plots\"\n          src=\"\" delayedsrc=${scatterPlotPng}\n        />\n        <span class=\"bmenu-title\">Inc v Lon Plots</span>\n        <div class=\"status-icon\"></div>\n      </div>\n      <div id=\"menu-plot-analysis5\" class=\"bmenu-item\">\n        <img\n          alt=\"Time v Lon Plots\"\n          src=\"\" delayedsrc=${linePlotPng}\n        />\n        <span class=\"bmenu-title\">Time v Lon Plots</span>\n        <div class=\"status-icon\"></div>\n      </div>\n    `;\n","import { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport './PlotAnalysisSideMenu.css';\nexport const PlotAnalysisSideMenu = keepTrackApi.html `\n      <div id=\"plot-analysis-menu\" class=\"side-menu-parent start-hidden text-select plot-analysis-menu-normal\">\n        <div id=\"plot-analysis-content\" class=\"side-menu\">\n          <div id=\"plot-analysis-chart\" class=\"plot-analysis-chart\"\"></div>\n        </div>\n      </div>\n      <div id=\"plot-analysis-menu2\" class=\"side-menu-parent start-hidden text-select plot-analysis-menu-normal\">\n        <div id=\"plot-analysis-content2\" class=\"side-menu\">\n          <div id=\"plot-analysis-chart2\" class=\"plot-analysis-chart\"\"></div>\n        </div>\n      </div>\n      <div id=\"plot-analysis-menu3\" class=\"side-menu-parent start-hidden text-select plot-analysis-menu-normal\">\n        <div id=\"plot-analysis-content3\" class=\"side-menu\">\n          <div id=\"plot-analysis-chart3\" class=\"plot-analysis-chart\"\"></div>\n        </div>\n      </div>\n      <div id=\"plot-analysis-menu4\" class=\"side-menu-parent start-hidden text-select plot-analysis-menu-maximized\">\n        <div id=\"plot-analysis-content4\" class=\"side-menu\">\n          <div id=\"plot-analysis-chart4\" class=\"plot-analysis-chart\"\"></div>\n        </div>\n      </div>\n      <div id=\"plot-analysis-menu5\" class=\"side-menu-parent start-hidden text-select plot-analysis-menu-maximized\">\n        <div id=\"plot-analysis-content5\" class=\"side-menu\">\n          <div id=\"plot-analysis-chart5\" class=\"plot-analysis-chart\"></div>\n        </div>\n      </div>\n    `;\n","import { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport * as echarts from 'echarts';\nexport const createEcfScatterPlot = (data, isPlotAnalyisMenuOpen, curChart, chartDom) => {\n    // Dont Load Anything if the Chart is Closed\n    if (!isPlotAnalyisMenuOpen)\n        return curChart;\n    // Delete any old charts and start fresh\n    let existInstance = echarts.getInstanceByDom(chartDom);\n    if (existInstance) {\n        echarts.dispose(curChart);\n    }\n    // Setup Configuration\n    const app = {\n        config: {\n            xAxis3D: 'X',\n            yAxis3D: 'Y',\n            zAxis3D: 'Z',\n        },\n        configParameters: {},\n    };\n    curChart = echarts.init(chartDom);\n    const schema = [\n        { name: 'X', index: 0 },\n        { name: 'Y', index: 1 },\n        { name: 'Z', index: 2 },\n    ];\n    const fieldIndices = schema.reduce(function (obj, item) {\n        obj[item.name] = item.index;\n        return obj;\n    }, {});\n    let fieldNames = schema.map((item) => item.name);\n    fieldNames = fieldNames.slice(2, fieldNames.length - 2);\n    ['xAxis3D', 'yAxis3D', 'zAxis3D', 'color', 'symbolSize'].forEach((fieldName) => {\n        app.configParameters[fieldName] = {\n            options: fieldNames,\n        };\n    });\n    // Setup Chart\n    curChart.setOption({\n        tooltip: {},\n        xAxis3D: {\n            name: app.config.xAxis3D,\n            type: 'value',\n        },\n        yAxis3D: {\n            name: app.config.yAxis3D,\n            type: 'value',\n        },\n        zAxis3D: {\n            name: app.config.zAxis3D,\n            type: 'value',\n        },\n        grid3D: {\n            axisLine: {\n                lineStyle: {\n                    color: '#fff',\n                },\n            },\n            axisPointer: {\n                lineStyle: {\n                    color: '#ffbd67',\n                },\n            },\n            viewControl: {\n                rotateSensitivity: 10,\n                distance: 600,\n                zoomSensitivity: 5,\n            },\n        },\n        series: data.map((sat) => ({\n            type: 'scatter3D',\n            name: sat.name,\n            dimensions: [app.config.xAxis3D, app.config.yAxis3D, app.config.yAxis3D],\n            data: sat.value.map((item, idx) => ({\n                itemStyle: {\n                    opacity: 1 - idx / sat.value.length, // opacity by time\n                },\n                value: [item[fieldIndices[app.config.xAxis3D]], item[fieldIndices[app.config.yAxis3D]], item[fieldIndices[app.config.zAxis3D]]],\n            })),\n            symbolSize: 12,\n            itemStyle: {\n                borderWidth: 1,\n                borderColor: 'rgba(255,255,255,0.8)',\n            },\n            emphasis: {\n                itemStyle: {\n                    color: '#fff',\n                },\n            },\n        })),\n    });\n    return curChart;\n};\nexport const getEcfScatterData = () => {\n    const NUMBER_OF_POINTS = 100;\n    const { satSet, objectManager, satellite } = keepTrackApi.programs;\n    const data = [];\n    let sat = satSet.getSat(objectManager.selectedSat);\n    data.push({ name: sat.name, value: satellite.getEcfOfCurrentOrbit(sat, NUMBER_OF_POINTS).map((point) => [point.x, point.y, point.z]) });\n    const lastSat = objectManager.lastSelectedSat();\n    if (lastSat !== -1) {\n        sat = satSet.getSat(lastSat);\n        data.push({ name: sat.name, value: satellite.getEcfOfCurrentOrbit(sat, NUMBER_OF_POINTS).map((point) => [point.x, point.y, point.z]) });\n    }\n    return data;\n};\n","import { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport * as echarts from 'echarts';\nexport const createEciScatterPlot = (data, isPlotAnalyisMenuOpen, curChart, chartDom) => {\n    // Dont Load Anything if the Chart is Closed\n    if (!isPlotAnalyisMenuOpen)\n        return curChart;\n    // Delete any old charts and start fresh\n    let existInstance = echarts.getInstanceByDom(chartDom);\n    if (existInstance) {\n        echarts.dispose(curChart);\n    }\n    // Setup Configuration\n    const app = {\n        config: {\n            xAxis3D: 'X',\n            yAxis3D: 'Y',\n            zAxis3D: 'Z',\n        },\n        configParameters: {},\n    };\n    curChart = echarts.init(chartDom);\n    const schema = [\n        { name: 'X', index: 0 },\n        { name: 'Y', index: 1 },\n        { name: 'Z', index: 2 },\n    ];\n    const fieldIndices = schema.reduce(function (obj, item) {\n        obj[item.name] = item.index;\n        return obj;\n    }, {});\n    let fieldNames = schema.map((item) => item.name);\n    fieldNames = fieldNames.slice(2, fieldNames.length - 2);\n    ['xAxis3D', 'yAxis3D', 'zAxis3D', 'color', 'symbolSize'].forEach((fieldName) => {\n        app.configParameters[fieldName] = {\n            options: fieldNames,\n        };\n    });\n    // Get the Data\n    const dataRange = data.reduce((dataRange, sat) => {\n        const minDataX = sat.value.reduce((min, item) => Math.min(min, item[0]), Infinity);\n        const maxDataX = sat.value.reduce((max, item) => Math.max(max, item[0]), -Infinity);\n        const minDataY = sat.value.reduce((min, item) => Math.min(min, item[1]), Infinity);\n        const maxDataY = sat.value.reduce((max, item) => Math.max(max, item[1]), -Infinity);\n        const minDataZ = sat.value.reduce((min, item) => Math.min(min, item[2]), Infinity);\n        const maxDataZ = sat.value.reduce((max, item) => Math.max(max, item[2]), -Infinity);\n        const minData = Math.round(Math.min(minDataX, minDataY, minDataZ) / 1000) * 1000;\n        const maxData = Math.round(Math.max(maxDataX, maxDataY, maxDataZ) / 1000) * 1000;\n        const _dataRange = Math.max(maxData, Math.abs(minData));\n        return Math.max(dataRange, _dataRange);\n    }, 0);\n    // Setup Chart\n    curChart.setOption({\n        tooltip: {},\n        xAxis3D: {\n            name: app.config.xAxis3D,\n            type: 'value',\n            min: -dataRange,\n            max: dataRange,\n        },\n        yAxis3D: {\n            name: app.config.yAxis3D,\n            type: 'value',\n            min: -dataRange,\n            max: dataRange,\n        },\n        zAxis3D: {\n            name: app.config.zAxis3D,\n            type: 'value',\n            min: -dataRange,\n            max: dataRange,\n        },\n        grid3D: {\n            axisLine: {\n                lineStyle: {\n                    color: '#fff',\n                },\n            },\n            axisPointer: {\n                lineStyle: {\n                    color: '#ffbd67',\n                },\n            },\n            viewControl: {\n                rotateSensitivity: 10,\n                distance: 600,\n                zoomSensitivity: 5,\n            },\n        },\n        series: data.map((sat) => ({\n            type: 'scatter3D',\n            name: sat.name,\n            dimensions: [app.config.xAxis3D, app.config.yAxis3D, app.config.yAxis3D],\n            data: sat.value.map((item, idx) => ({\n                itemStyle: {\n                    opacity: 1 - idx / sat.value.length, // opacity by time\n                },\n                value: [item[fieldIndices[app.config.xAxis3D]], item[fieldIndices[app.config.yAxis3D]], item[fieldIndices[app.config.zAxis3D]]],\n            })),\n            symbolSize: 12,\n            // symbol: 'triangle',\n            itemStyle: {\n                borderWidth: 1,\n                borderColor: 'rgba(255,255,255,0.8)',\n            },\n            emphasis: {\n                itemStyle: {\n                    color: '#fff',\n                },\n            },\n        })),\n    });\n    return curChart;\n};\nexport const getEciScatterData = () => {\n    const NUMBER_OF_POINTS = 100;\n    const { satSet, objectManager, satellite } = keepTrackApi.programs;\n    const data = [];\n    let sat = satSet.getSat(objectManager.selectedSat);\n    data.push({ name: sat.name, value: satellite.getEciOfCurrentOrbit(sat, NUMBER_OF_POINTS).map((point) => [point.x, point.y, point.z]) });\n    const lastSat = objectManager.lastSelectedSat();\n    if (lastSat !== -1) {\n        sat = satSet.getSat(lastSat);\n        data.push({ name: sat.name, value: satellite.getEciOfCurrentOrbit(sat, NUMBER_OF_POINTS).map((point) => [point.x, point.y, point.z]) });\n    }\n    return data;\n};\n","import { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport { SpaceObjectType } from '@app/js/api/SpaceObjectType';\nimport { RAD2DEG } from '@app/js/lib/constants';\nimport * as echarts from 'echarts';\nexport const createInc2LonScatterPlot = (data, isPlotAnalyisMenuOpen, curChart, chartDom) => {\n    // Dont Load Anything if the Chart is Closed\n    if (!isPlotAnalyisMenuOpen)\n        return curChart;\n    // Delete any old charts and start fresh\n    let existInstance = echarts.getInstanceByDom(chartDom);\n    if (!existInstance) {\n        // Setup Configuration\n        curChart = echarts.init(chartDom);\n        curChart.on('click', function (event) {\n            var _a;\n            if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.id) {\n                keepTrackApi.programs.satSet.selectSat(event.data.id);\n            }\n        });\n    }\n    else {\n        return curChart;\n    }\n    // Setup Chart\n    curChart.setOption({\n        title: {\n            text: 'Inclination vs Longitude Scatter Plot',\n            textStyle: {\n                fontSize: 16,\n                color: '#fff',\n            },\n        },\n        legend: {\n            show: true,\n            textStyle: {\n                color: '#fff',\n            },\n        },\n        tooltip: {},\n        xAxis: {\n            name: 'Longitude',\n            type: 'value',\n            position: 'bottom',\n        },\n        yAxis: {\n            name: 'Inclination',\n            type: 'value',\n            position: 'left',\n        },\n        zAxis: {\n            name: 'Period',\n            type: 'value',\n        },\n        dataZoom: [\n            {\n                type: 'slider',\n                show: true,\n                xAxisIndex: [0],\n                start: -180,\n                end: 180,\n            },\n            {\n                type: 'slider',\n                show: true,\n                yAxisIndex: [0],\n                left: '93%',\n                start: 0,\n                end: 65,\n            },\n            {\n                type: 'inside',\n                xAxisIndex: [0],\n                start: -180,\n                end: 180,\n            },\n            {\n                type: 'inside',\n                yAxisIndex: [0],\n                start: 0,\n                end: 65,\n            },\n        ],\n        visualMap: [\n            {\n                left: 'left',\n                top: '10%',\n                dimension: 2,\n                min: 1240,\n                max: 1640,\n                itemWidth: 30,\n                itemHeight: 500,\n                calculable: true,\n                precision: 0.05,\n                text: ['Period (minutes)'],\n                textGap: 30,\n                textStyle: {\n                    color: '#fff',\n                },\n                inRange: {\n                // symbolSize: [10, 70],\n                },\n                outOfRange: {\n                    // symbolSize: [10, 70],\n                    opacity: 0,\n                    symbol: 'none',\n                },\n                controller: {\n                    inRange: {\n                        color: ['#41577c'],\n                    },\n                    outOfRange: {\n                        color: ['#999'],\n                    },\n                },\n            },\n        ],\n        series: data.map((country) => ({\n            type: 'scatter',\n            name: country.name,\n            data: country.value.map((item) => ({\n                name: item[3],\n                id: item[4],\n                value: [item[1], item[0], item[2]],\n            })),\n            symbolSize: 12,\n            itemStyle: {\n                borderWidth: 1,\n                borderColor: 'rgba(255,255,255,0.8)',\n            },\n            emphasis: {\n                itemStyle: {\n                    color: '#fff',\n                },\n            },\n        })),\n    });\n    return curChart;\n};\nexport const getInc2LonScatterData = () => {\n    const { satSet, satellite } = keepTrackApi.programs;\n    const china = [];\n    const usa = [];\n    const russia = [];\n    const other = [];\n    satSet.satData.forEach((sat) => {\n        if (!sat.TLE1 || sat.type !== SpaceObjectType.PAYLOAD)\n            return;\n        if (sat.eccentricity > 0.1)\n            return;\n        if (sat.period < 1240)\n            return;\n        if (sat.period > 1640)\n            return;\n        if (sat.inclination * RAD2DEG > 17)\n            return;\n        sat = satSet.getSatPosOnly(sat.id);\n        sat = Object.assign(Object.assign({}, sat), satellite.eci2ll(sat.position.x, sat.position.y, sat.position.z));\n        switch (sat.country) {\n            case 'United States of America':\n            case 'United States':\n            case 'US':\n                usa.push([sat.inclination * RAD2DEG, sat.lon, sat.period, sat.name, sat.id]);\n                return;\n            case 'Russian Federation':\n            case 'CIS':\n            case 'Russia':\n                russia.push([sat.inclination * RAD2DEG, sat.lon, sat.period, sat.name, sat.id]);\n                return;\n            case 'China':\n            case `China, People's Republic of`:\n            case `Hong Kong Special Administrative Region, China`:\n            case 'China (Republic)':\n                china.push([sat.inclination * RAD2DEG, sat.lon, sat.period, sat.name, sat.id]);\n                return;\n            default:\n                other.push([sat.inclination * RAD2DEG, sat.lon, sat.period, sat.name, sat.id]);\n                return;\n        }\n    });\n    return [\n        { name: 'USA', value: usa },\n        { name: 'Other', value: other },\n        { name: 'Russia', value: russia },\n        { name: 'China', value: china },\n    ];\n};\n","import { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport * as echarts from 'echarts';\nexport const createRicScatterPlot = (data, isPlotAnalyisMenuOpen, curChart, chartDom) => {\n    // Dont Load Anything if the Chart is Closed\n    if (!isPlotAnalyisMenuOpen)\n        return curChart;\n    // Delete any old charts and start fresh\n    let existInstance = echarts.getInstanceByDom(chartDom);\n    if (existInstance) {\n        echarts.dispose(curChart);\n    }\n    // Setup Configuration\n    const app = {\n        config: {\n            xAxis3D: 'Radial',\n            yAxis3D: 'In-Track',\n            zAxis3D: 'Cross-Track',\n        },\n        configParameters: {},\n    };\n    curChart = echarts.init(chartDom);\n    const schema = [\n        { name: 'Radial', index: 0 },\n        { name: 'In-Track', index: 1 },\n        { name: 'Cross-Track', index: 2 },\n    ];\n    const fieldIndices = schema.reduce(function (obj, item) {\n        obj[item.name] = item.index;\n        return obj;\n    }, {});\n    let fieldNames = schema.map((item) => item.name);\n    fieldNames = fieldNames.slice(2, fieldNames.length - 2);\n    ['xAxis3D', 'yAxis3D', 'zAxis3D', 'color', 'symbolSize'].forEach((fieldName) => {\n        app.configParameters[fieldName] = {\n            options: fieldNames,\n        };\n    });\n    // Setup Chart\n    curChart.setOption({\n        title: {\n            text: 'RIC Scatter Plot',\n            textStyle: {\n                fontSize: 16,\n                color: '#fff',\n            },\n        },\n        legend: {\n            show: true,\n            textStyle: {\n                color: '#fff',\n            },\n        },\n        tooltip: {},\n        xAxis3D: {\n            name: app.config.xAxis3D,\n            type: 'value',\n        },\n        yAxis3D: {\n            name: app.config.yAxis3D,\n            type: 'value',\n        },\n        zAxis3D: {\n            name: app.config.zAxis3D,\n            type: 'value',\n        },\n        grid3D: {\n            axisLine: {\n                lineStyle: {\n                    color: '#fff',\n                },\n            },\n            axisPointer: {\n                lineStyle: {\n                    color: '#ffbd67',\n                },\n            },\n            viewControl: {\n                rotateSensitivity: 10,\n                distance: 600,\n                zoomSensitivity: 5,\n            },\n        },\n        series: data.map((sat) => ({\n            type: 'scatter3D',\n            name: sat.name,\n            dimensions: [app.config.xAxis3D, app.config.yAxis3D, app.config.yAxis3D],\n            data: sat.value.map((item, idx) => ({\n                itemStyle: {\n                    opacity: 1 - idx / sat.value.length, // opacity by time\n                },\n                value: [item[fieldIndices[app.config.xAxis3D]], item[fieldIndices[app.config.yAxis3D]], item[fieldIndices[app.config.zAxis3D]]],\n            })),\n            symbolSize: 12,\n            itemStyle: {\n                borderWidth: 1,\n                borderColor: 'rgba(255,255,255,0.8)',\n            },\n            emphasis: {\n                itemStyle: {\n                    color: '#fff',\n                },\n            },\n        })),\n    });\n    return curChart;\n};\nexport const getRicScatterData = () => {\n    const NUMBER_OF_POINTS = 500;\n    const { satSet, objectManager, satellite } = keepTrackApi.programs;\n    const data = [];\n    if (objectManager.selectedSat === -1 || objectManager.secondarySat === -1)\n        return [];\n    const sat = satSet.getSat(objectManager.selectedSat);\n    const sat2 = objectManager.secondarySatObj;\n    data.push({ name: sat.name, value: [[0, 0, 0]] });\n    data.push({ name: sat2.name, value: satellite.getRicOfCurrentOrbit(sat2, sat, NUMBER_OF_POINTS, 5) });\n    return data;\n};\n","import { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport { SpaceObjectType } from '@app/js/api/SpaceObjectType';\nimport { RAD2DEG } from '@app/js/lib/constants';\nimport * as echarts from 'echarts';\nexport const createTime2LonScatterPlot = (data, isPlotAnalyisMenuOpen, curChart, chartDom) => {\n    // Dont Load Anything if the Chart is Closed\n    if (!isPlotAnalyisMenuOpen)\n        return curChart;\n    // Delete any old charts and start fresh\n    let existInstance = echarts.getInstanceByDom(chartDom);\n    if (!existInstance) {\n        // Setup Configuration\n        curChart = echarts.init(chartDom);\n        curChart.on('click', function (event) {\n            var _a;\n            if ((_a = event.data) === null || _a === void 0 ? void 0 : _a.id) {\n                keepTrackApi.programs.satSet.selectSat(event.data.id);\n            }\n        });\n    }\n    else {\n        return curChart;\n    }\n    // Setup Chart\n    curChart.setOption({\n        title: {\n            text: 'Time vs Longitude Scatter Plot',\n            textStyle: {\n                fontSize: 16,\n                color: '#fff',\n            },\n        },\n        tooltip: {},\n        xAxis: {\n            name: 'Longitude',\n            type: 'value',\n            position: 'bottom',\n        },\n        yAxis: {\n            name: 'Time',\n            type: 'value',\n            position: 'left',\n        },\n        zAxis: {\n            name: 'Mean Motion',\n            type: 'value',\n        },\n        dataZoom: [\n            {\n                type: 'slider',\n                show: true,\n                xAxisIndex: [0],\n                start: -180,\n                end: 180,\n            },\n            {\n                type: 'slider',\n                show: true,\n                yAxisIndex: [0],\n                left: '93%',\n                start: 0,\n                end: 1440,\n            },\n            {\n                type: 'inside',\n                xAxisIndex: [0],\n                start: -180,\n                end: 180,\n            },\n            {\n                type: 'inside',\n                yAxisIndex: [0],\n                start: 0,\n                end: 1440,\n            },\n        ],\n        // visualMap: [\n        //   {\n        //     left: 'left',\n        //     top: '10%',\n        //     dimension: 2,\n        //     min: 0,\n        //     max: 18,\n        //     itemWidth: 30,\n        //     itemHeight: 500,\n        //     calculable: true,\n        //     precision: 0.05,\n        //     text: ['Mean Motion'],\n        //     textGap: 30,\n        //     textStyle: {\n        //       color: '#fff',\n        //     },\n        //     inRange: {\n        //       // symbolSize: [10, 70],\n        //     },\n        //     outOfRange: {\n        //       // symbolSize: [10, 70],\n        //       opacity: 0,\n        //       symbol: 'none',\n        //     },\n        //     controller: {\n        //       inRange: {\n        //         color: ['#41577c'],\n        //       },\n        //       outOfRange: {\n        //         color: ['#999'],\n        //       },\n        //     },\n        //   },\n        // ],\n        series: data.map((item) => ({\n            type: 'line',\n            name: item.name,\n            data: item.data.map((dataPoint) => ({\n                name: item.country,\n                id: item.satId,\n                value: [dataPoint[1], dataPoint[0]],\n            })),\n            // symbolSize: 8,\n            // itemStyle: {\n            // borderWidth: 1,\n            // borderColor: 'rgba(255,255,255,0.8)',\n            // },\n            emphasis: {\n                itemStyle: {\n                    color: '#fff',\n                },\n            },\n        })),\n    });\n    return curChart;\n};\nexport const getTime2LonScatterData = () => {\n    const { satSet, satellite, timeManager } = keepTrackApi.programs;\n    const now = timeManager.calculateSimulationTime().getTime();\n    const data = [];\n    satSet.satData.forEach((sat) => {\n        if (!sat.TLE1 || sat.type !== SpaceObjectType.PAYLOAD)\n            return;\n        if (sat.eccentricity > 0.1)\n            return;\n        if (sat.period < 1240)\n            return;\n        if (sat.period > 1640)\n            return;\n        switch (sat.country) {\n            case 'United States of America':\n            case 'United States':\n            case 'US':\n            case 'Russian Federation':\n            case 'CIS':\n            case 'Russia':\n            case 'China':\n            case `China, People's Republic of`:\n            case `Hong Kong Special Administrative Region, China`:\n            case 'China (Republic)':\n                break;\n            default:\n                return;\n        }\n        sat = satSet.getSatPosOnly(sat.id);\n        const plotPoints = satellite.getLlaOfCurrentOrbit(sat, 24);\n        const plotData = [];\n        plotPoints.forEach((point) => {\n            const pointTime = (point.time - now) / 1000 / 60;\n            if (pointTime > 1440 || pointTime < 0)\n                return;\n            plotData.push([pointTime, point.lon * RAD2DEG]);\n        });\n        data.push({\n            name: sat.name,\n            satId: sat.id,\n            country: sat.country,\n            data: plotData,\n        });\n    });\n    return data;\n};\n","import { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport * as echarts from 'echarts';\nimport 'echarts-gl';\nimport $ from 'jquery';\nimport { PlotAnalysisBottomIcon } from './components/PlotAnalysisBottomIcon';\nimport { PlotAnalysisSideMenu } from './components/PlotAnalysisSideMenu';\nimport { createEcfScatterPlot, getEcfScatterData } from './components/plots/ecfScatterPlot';\nimport { createEciScatterPlot, getEciScatterData } from './components/plots/eciScatterPlot';\nimport { createInc2LonScatterPlot, getInc2LonScatterData } from './components/plots/inc2LonScatterPlot';\nimport { createRicScatterPlot, getRicScatterData } from './components/plots/ricScatterPlot';\nimport { createTime2LonScatterPlot, getTime2LonScatterData } from './components/plots/time2LonScatterPlot';\nexport let isPlotAnalyisMenuOpen = false;\nexport let isPlotAnalyisMenuOpen2 = false;\nexport let isPlotAnalyisMenuOpen3 = false;\nexport let isPlotAnalyisMenuOpen4 = false;\nexport let isPlotAnalyisMenuOpen5 = false;\nexport let curChart;\nexport let curChart2;\nexport let curChart3;\nexport let curChart4;\nexport let curChart5;\nexport const init = () => {\n    // Add HTML\n    keepTrackApi.register({\n        method: 'uiManagerInit',\n        cbName: 'plotAnalysis',\n        cb: () => uiManagerInit(),\n    });\n    // Add JavaScript\n    keepTrackApi.register({\n        method: 'bottomMenuClick',\n        cbName: 'plotAnalysis',\n        cb: (iconName) => bottomMenuClick(iconName),\n    });\n    keepTrackApi.register({\n        method: 'hideSideMenus',\n        cbName: 'plotAnalysis',\n        cb: () => hideSideMenus(),\n    });\n    keepTrackApi.register({\n        method: 'selectSatData',\n        cbName: 'plotAnalysis',\n        cb: selectSatData,\n    });\n};\nexport const uiManagerInit = () => {\n    $('#left-menus').append(PlotAnalysisSideMenu);\n    $('#bottom-icons').append(PlotAnalysisBottomIcon);\n    $('#plot-analysis-menu').resizable({\n        handles: 'e',\n        stop: function () {\n            curChart.resize();\n        },\n        maxWidth: 1200,\n        minWidth: 500,\n    });\n    $('#plot-analysis-menu2').resizable({\n        handles: 'e',\n        stop: function () {\n            curChart2.resize();\n        },\n        maxWidth: 1200,\n        minWidth: 500,\n    });\n    $('#plot-analysis-menu3').resizable({\n        handles: 'e',\n        stop: function () {\n            curChart3.resize();\n        },\n        maxWidth: 1200,\n        minWidth: 500,\n    });\n};\n/**\n * This function is called when the user clicks on a bottom icon\n * @param {string} iconName The name of the icon that was clicked\n * @returns {void}\n */\nexport const bottomMenuClick = (iconName) => {\n    switch (iconName) {\n        case 'menu-plot-analysis':\n            onEciPlotBtnClick();\n            break;\n        case 'menu-plot-analysis2':\n            onEcfPlotBtnClick();\n            break;\n        case 'menu-plot-analysis3':\n            onRicPlotBtnClick();\n            break;\n        case 'menu-plot-analysis4':\n            onInc2LonPlotBtnClick();\n            break;\n        case 'menu-plot-analysis5':\n            onTime2LonPlotBtnClick();\n            break;\n        default:\n            break;\n    }\n};\nexport const onEciPlotBtnClick = () => {\n    const { objectManager, uiManager } = keepTrackApi.programs;\n    if (objectManager.selectedSat === -1) {\n        uiManager.toast(`Select a Satellite First!`, 'caution');\n        if (!$('#menu-plot-analysis:animated').length) {\n            $('#menu-plot-analysis').effect('shake', {\n                distance: 10,\n            });\n        }\n        return;\n    }\n    if (isPlotAnalyisMenuOpen) {\n        uiManager.hideSideMenus();\n        isPlotAnalyisMenuOpen = false;\n        return;\n    }\n    else {\n        uiManager.hideSideMenus();\n        $('#plot-analysis-menu').effect('slide', { direction: 'left', mode: 'show' }, 1000);\n        isPlotAnalyisMenuOpen = true;\n        const chartDom = document.getElementById('plot-analysis-chart');\n        // let existInstance = echarts.getInstanceByDom(chartDom);\n        // if (!existInstance) {\n        curChart = createEciScatterPlot(getEciScatterData(), isPlotAnalyisMenuOpen, curChart, chartDom);\n        // }\n        setTimeout(() => {\n            curChart.resize();\n        }, 1000);\n        $('#menu-plot-analysis').addClass('bmenu-item-selected');\n        return;\n    }\n};\nexport const onEcfPlotBtnClick = () => {\n    const { objectManager, uiManager } = keepTrackApi.programs;\n    if (objectManager.selectedSat === -1) {\n        uiManager.toast(`Select a Satellite First!`, 'caution');\n        if (!$('#menu-plot-analysis2:animated').length) {\n            $('#menu-plot-analysis2').effect('shake', {\n                distance: 10,\n            });\n        }\n        return;\n    }\n    if (isPlotAnalyisMenuOpen2) {\n        uiManager.hideSideMenus();\n        isPlotAnalyisMenuOpen2 = false;\n        return;\n    }\n    else {\n        uiManager.hideSideMenus();\n        $('#plot-analysis-menu2').effect('slide', { direction: 'left', mode: 'show' }, 1000);\n        isPlotAnalyisMenuOpen2 = true;\n        const chartDom2 = document.getElementById('plot-analysis-chart2');\n        // let existInstance = echarts.getInstanceByDom(chartDom2);\n        // if (!existInstance) {\n        curChart2 = createEcfScatterPlot(getEcfScatterData(), isPlotAnalyisMenuOpen2, curChart2, chartDom2);\n        // }\n        setTimeout(() => {\n            curChart2.resize();\n        }, 1000);\n        $('#menu-plot-analysis2').addClass('bmenu-item-selected');\n        return;\n    }\n};\nexport const onRicPlotBtnClick = () => {\n    const { objectManager, uiManager } = keepTrackApi.programs;\n    if (objectManager.secondarySat === -1) {\n        uiManager.toast(`Select a Secondary Satellite First!`, 'caution');\n        if (!$('#menu-plot-analysis3:animated').length) {\n            $('#menu-plot-analysis3').effect('shake', {\n                distance: 10,\n            });\n        }\n        return;\n    }\n    if (objectManager.selectedSat === -1 || objectManager.lastSelectedSat() === -1) {\n        uiManager.toast(`Select a Primary Satellite First!`, 'caution');\n        if (!$('#menu-plot-analysis3:animated').length) {\n            $('#menu-plot-analysis3').effect('shake', {\n                distance: 10,\n            });\n        }\n        return;\n    }\n    if (isPlotAnalyisMenuOpen3) {\n        uiManager.hideSideMenus();\n        isPlotAnalyisMenuOpen3 = false;\n        return;\n    }\n    else {\n        uiManager.hideSideMenus();\n        $('#plot-analysis-menu3').effect('slide', { direction: 'left', mode: 'show' }, 1000);\n        isPlotAnalyisMenuOpen3 = true;\n        const chartDom3 = document.getElementById('plot-analysis-chart3');\n        // let existInstance = echarts.getInstanceByDom(chartDom3);\n        // if (!existInstance) {\n        curChart3 = createRicScatterPlot(getRicScatterData(), isPlotAnalyisMenuOpen3, curChart3, chartDom3);\n        // }\n        setTimeout(() => {\n            curChart3.resize();\n        }, 1000);\n        $('#menu-plot-analysis3').addClass('bmenu-item-selected');\n        return;\n    }\n};\nexport const onInc2LonPlotBtnClick = () => {\n    const { uiManager } = keepTrackApi.programs;\n    if (isPlotAnalyisMenuOpen4) {\n        uiManager.hideSideMenus();\n        isPlotAnalyisMenuOpen4 = false;\n        return;\n    }\n    else {\n        uiManager.hideSideMenus();\n        $('#plot-analysis-menu4').effect('slide', { direction: 'left', mode: 'show' }, 1000);\n        isPlotAnalyisMenuOpen4 = true;\n        const chartDom4 = document.getElementById('plot-analysis-chart4');\n        let existInstance = echarts.getInstanceByDom(chartDom4);\n        if (!existInstance) {\n            curChart4 = createInc2LonScatterPlot(getInc2LonScatterData(), isPlotAnalyisMenuOpen4, curChart4, chartDom4);\n        }\n        setTimeout(() => {\n            curChart4.resize();\n        }, 1000);\n        $('#menu-plot-analysis4').addClass('bmenu-item-selected');\n        return;\n    }\n};\nexport const onTime2LonPlotBtnClick = () => {\n    const { uiManager } = keepTrackApi.programs;\n    if (isPlotAnalyisMenuOpen5) {\n        uiManager.hideSideMenus();\n        isPlotAnalyisMenuOpen5 = false;\n        return;\n    }\n    else {\n        uiManager.hideSideMenus();\n        $('#plot-analysis-menu5').effect('slide', { direction: 'left', mode: 'show' }, 1000);\n        isPlotAnalyisMenuOpen5 = true;\n        const chartDom5 = document.getElementById('plot-analysis-chart5');\n        let existInstance = echarts.getInstanceByDom(chartDom5);\n        if (!existInstance) {\n            curChart5 = createTime2LonScatterPlot(getTime2LonScatterData(), isPlotAnalyisMenuOpen5, curChart5, chartDom5);\n        }\n        setTimeout(() => {\n            curChart5.resize();\n        }, 1000);\n        $('#menu-plot-analysis5').addClass('bmenu-item-selected');\n        return;\n    }\n};\n/**\n * This function is called when the user clicks on a menu item\n * @returns {void}\n */\nexport const hideSideMenus = () => {\n    $('#plot-analysis-menu').effect('slide', { direction: 'left', mode: 'hide' }, 1000);\n    $('#menu-plot-analysis').removeClass('bmenu-item-selected');\n    isPlotAnalyisMenuOpen = false;\n    $('#plot-analysis-menu2').effect('slide', { direction: 'left', mode: 'hide' }, 1000);\n    $('#menu-plot-analysis2').removeClass('bmenu-item-selected');\n    isPlotAnalyisMenuOpen2 = false;\n    $('#plot-analysis-menu3').effect('slide', { direction: 'left', mode: 'hide' }, 1000);\n    $('#menu-plot-analysis3').removeClass('bmenu-item-selected');\n    isPlotAnalyisMenuOpen3 = false;\n    $('#plot-analysis-menu4').effect('slide', { direction: 'left', mode: 'hide' }, 1000);\n    $('#menu-plot-analysis4').removeClass('bmenu-item-selected');\n    isPlotAnalyisMenuOpen4 = false;\n    $('#plot-analysis-menu5').effect('slide', { direction: 'left', mode: 'hide' }, 1000);\n    $('#menu-plot-analysis5').removeClass('bmenu-item-selected');\n    isPlotAnalyisMenuOpen5 = false;\n};\n/**\n * Update Plots When Satellite Clicked\n * - This does not apply to all plots\n * @param {SatObject} _sat - The satellite object (currently unused)\n * @param {number} satId - The id of the satellite\n * @returns {void}\n */\nexport const selectSatData = (_sat, satId) => {\n    const { objectManager } = keepTrackApi.programs;\n    if (satId === -1) {\n        hideSideMenus();\n        return;\n    }\n    if (isPlotAnalyisMenuOpen) {\n        $('#menu-plot-analysis').addClass('bmenu-item-selected');\n        const chartDom = document.getElementById('plot-analysis-chart');\n        curChart = createEciScatterPlot(getEciScatterData(), isPlotAnalyisMenuOpen, curChart, chartDom);\n    }\n    if (isPlotAnalyisMenuOpen2) {\n        $('#menu-plot-analysis2').addClass('bmenu-item-selected');\n        const chartDom2 = document.getElementById('plot-analysis-chart2');\n        curChart2 = createEcfScatterPlot(getEcfScatterData(), isPlotAnalyisMenuOpen2, curChart2, chartDom2);\n    }\n    if (objectManager.secondarySat !== -1 && isPlotAnalyisMenuOpen3) {\n        $('#menu-plot-analysis3').addClass('bmenu-item-selected');\n        const chartDom3 = document.getElementById('plot-analysis-chart3');\n        curChart3 = createRicScatterPlot(getRicScatterData(), isPlotAnalyisMenuOpen3, curChart3, chartDom3);\n    }\n};\n"],"names":[],"sourceRoot":""}