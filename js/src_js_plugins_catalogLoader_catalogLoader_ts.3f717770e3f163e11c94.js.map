{"version":3,"file":"src_js_plugins_catalogLoader_catalogLoader_ts.3f717770e3f163e11c94.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACwD;AACR;AAChD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC,QAAQ,iCAAiC;AACtD;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY,CAAC,QAAQ,iCAAiC;AACtD;AACA,gCAAgC,oBAAoB;AACpD;AACA,6BAA6B,+DAAc;AAC3C;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,kBAAkB,CAAC,QAAQ,iCAAiC;AAC5D;AACA;AACA,kBAAkB,CAAC,QAAQ,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACO;AACP,YAAY,wBAAwB,EAAE,2EAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,YAAY,sBAAsB,EAAE,2EAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC;AACjB;AACA,gBAAgB,CAAC;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP,YAAY,qCAAqC,EAAE,2EAAqB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,yBAAyB,+DAAc;AACvC;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2BAA2B;AACvD;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD,0CAA0C,gBAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B,0CAA0C,iBAAiB;AAC3D,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4BAA4B;AAC/D,sCAAsC,KAAK,GAAG,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B,0CAA0C,oBAAoB;AAC9D,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE,sCAAsC,KAAK,GAAG,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC;AACT;AACA,YAAY,CAAC;AACb,YAAY,CAAC;AACb,YAAY,CAAC;AACb,YAAY,CAAC,uGAAuG,kCAAkC;AACtJ,YAAY,CAAC,uGAAuG,kCAAkC;AACtJ,YAAY,CAAC,uGAAuG,kCAAkC;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oCAAoC;AACpD;AACA;AACA;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA,gBAAgB,yCAAyC;AACzD;AACA;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL","sources":["webpack://keeptrack.space/./src/js/plugins/catalogLoader/catalogLoader.ts"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport { stringPad } from '@app/js/lib/helpers';\n/**\n *  @returns {Promise<any>}\n *  This function will load the catalog and will return the catalog.\n *\n *  There are three catalog files that are loaded:\n *\n *  1. TLE.json - this contains extended object information including launch location and RCS.\n *  2. extra.json - this contains supplemental information about the catalog.\n *  3. TLE.txt - this contains ASCII TLE data similar to that found on space-track.org.\n *\n *  The catalog is loaded in the above order appending the information each step of the way.\n *\n *  If a file is missing, the function will skip it and continue loading the next file.\n *\n *  If all files are missing, the function will return an error.\n */\nexport const catalogLoader = () => __awaiter(void 0, void 0, void 0, function* () {\n    const settingsManager = window.settingsManager;\n    // let extraSats: any;\n    // See if we are running jest right now for testing\n    // if (typeof process !== 'undefined') {\n    //   try {\n    //     await import('@app/offline/extra.js').then((resp) => {\n    //       extraSats = resp.satelliteList;\n    //     });\n    //     const satData = await import('@app/offline/tle.js').then((resp) => {\n    //       parseCatalog(resp.jsTLEfile, extraSats);\n    //     });\n    //     return satData;\n    //   } catch (error) {\n    //     console.debug(error);\n    //   }\n    // }\n    try {\n        let extraSats = [];\n        if (settingsManager.offline) {\n            $.get(`${settingsManager.installDirectory}tle/extra.json`).then((resp) => {\n                extraSats = JSON.parse(resp);\n            });\n        }\n        const asciiCatalog = [];\n        if (!settingsManager.isDisableAsciiCatalog) {\n            $.get(`${settingsManager.installDirectory}tle/TLE.txt`).then((resp) => {\n                const content = resp.split('\\n');\n                for (let i = 0; i < content.length; i = i + 2) {\n                    asciiCatalog.push({\n                        SCC: stringPad.pad0(content[i].substr(2, 5).trim(), 5),\n                        TLE1: content[i],\n                        TLE2: content[i + 1],\n                    });\n                }\n            });\n        }\n        if (settingsManager.isUseDebrisCatalog) {\n            yield $.get(`${settingsManager.installDirectory}tle/TLEdebris.json`).then((resp) => parseCatalog(resp, extraSats, asciiCatalog));\n        }\n        else {\n            yield $.get(`${settingsManager.installDirectory}tle/TLE2.json`).then((resp) => parseCatalog(resp, extraSats, asciiCatalog));\n        }\n    }\n    catch (e) {\n        // console.debug(e);\n    }\n});\n// Parse the Catalog from satSet.loadCatalog and then return it back -- they are chained together!\nexport const parseCatalog = (resp, extraSats, asciiCatalog) => {\n    const { satSet, objectManager } = keepTrackApi.programs;\n    const settingsManager = window.settingsManager;\n    const limitSatsArray = setupGetVariables();\n    // Filter TLEs\n    // SatCruncher will use this when it returns so we need to expose it now\n    if (typeof resp === 'string')\n        resp = JSON.parse(resp);\n    satSet.satData = filterTLEDatabase(resp, limitSatsArray, extraSats, asciiCatalog);\n    satSet.numSats = satSet.satData.length;\n    resp = null; // Force Garbage Collection\n    /** Send satDataString to satCruncher to begin propagation loop */\n    satSet.satCruncher.postMessage({\n        typ: 'satdata',\n        dat: JSON.stringify(satSet.satData),\n        fieldOfViewSetLength: objectManager.fieldOfViewSet.length,\n        isLowPerf: settingsManager.lowPerf,\n    });\n};\nexport const setupGetVariables = () => {\n    const { satSet, timeManager } = keepTrackApi.programs;\n    let obslatitude;\n    let obslongitude;\n    let obsheight;\n    let obsminaz;\n    let obsmaxaz;\n    let obsminel;\n    let obsmaxel;\n    let obsminrange;\n    let obsmaxrange;\n    let limitSatsArray = [];\n    /** Parses GET variables for SatCruncher initialization */\n    // This should be somewhere else!!\n    const queryStr = window.location.search.substring(1);\n    const params = queryStr.split('&');\n    for (let i = 0; i < params.length; i++) {\n        const key = params[i].split('=')[0];\n        const val = params[i].split('=')[1];\n        switch (key) {\n            case 'limitSats':\n                settingsManager.limitSats = val;\n                $('#limitSats').val(val);\n                // document.getElementById('settings-limitSats-enabled').checked = true;\n                $('#limitSats-Label').addClass('active');\n                limitSatsArray = val.split(',');\n                break;\n        }\n    }\n    // Make sure everyone agrees on what time it is\n    timeManager.synchronize();\n    satSet.satCruncher.postMessage({\n        setlatlong: true,\n        lat: obslatitude,\n        lon: obslongitude,\n        alt: obsheight,\n        obsminaz: obsminaz,\n        obsmaxaz: obsmaxaz,\n        obsminel: obsminel,\n        obsmaxel: obsmaxel,\n        obsminrange: obsminrange,\n        obsmaxrange: obsmaxrange,\n    });\n    return limitSatsArray;\n};\nexport const filterTLEDatabase = (resp, limitSatsArray, extraSats, asciiCatalog) => {\n    const { dotsManager, objectManager, satSet } = keepTrackApi.programs;\n    const tempSatData = [];\n    satSet.sccIndex = {};\n    satSet.cosparIndex = {};\n    if (typeof limitSatsArray === 'undefined' || limitSatsArray.length == 0 || limitSatsArray[0] == null) {\n        // If there are no limits then just process like normal\n        settingsManager.limitSats = '';\n    }\n    let year;\n    let prefix;\n    let rest;\n    let i = 0;\n    for (i = 0; i < resp.length; i++) {\n        resp[i].sccNum = stringPad.pad0(resp[i].TLE1.substr(2, 5).trim(), 5);\n        if (settingsManager.limitSats === '') {\n            // If there are no limits then just process like normal\n            year = resp[i].TLE1.substr(9, 8).trim().substring(0, 2); // clean up intl des for display\n            if (year === '') {\n                resp[i].intlDes = 'none';\n            }\n            else {\n                prefix = parseInt(year) > 50 ? '19' : '20';\n                year = prefix + year;\n                rest = resp[i].TLE1.substr(9, 8).trim().substring(2);\n                resp[i].intlDes = year + '-' + rest;\n            }\n            resp[i].id = i;\n            satSet.sccIndex[`${resp[i].sccNum}`] = resp[i].id;\n            satSet.cosparIndex[`${resp[i].intlDes}`] = resp[i].id;\n            resp[i].active = true;\n            tempSatData.push(resp[i]);\n            continue;\n        }\n        else {\n            // If there are limited satellites\n            for (let x = 0; x < limitSatsArray.length; x++) {\n                if (resp[i].sccNum === limitSatsArray[x].sccNum) {\n                    year = resp[i].TLE1.substr(9, 8).trim().substring(0, 2); // clean up intl des for display\n                    if (year === '') {\n                        resp[i].intlDes = 'none';\n                    }\n                    else {\n                        prefix = parseInt(year) > 50 ? '19' : '20';\n                        year = prefix + year;\n                        rest = resp[i].TLE1.substr(9, 8).trim().substring(2);\n                        resp[i].intlDes = year + '-' + rest;\n                    }\n                    resp[i].id = i;\n                    satSet.sccIndex[`${resp[i].sccNum}`] = resp[i].id;\n                    satSet.cosparIndex[`${resp[i].intlDes}`] = resp[i].id;\n                    resp[i].active = true;\n                    tempSatData.push(resp[i]);\n                }\n            }\n        }\n    }\n    let extrasSatInfo;\n    if (typeof extraSats !== 'undefined' && settingsManager.offline) {\n        // If extra catalogue\n        for (let s = 0; s < extraSats.length; s++) {\n            if (typeof extraSats[s].SCC == 'undefined')\n                continue;\n            if (typeof extraSats[s].TLE1 == 'undefined')\n                continue; // Don't Process Bad Satellite Information\n            if (typeof extraSats[s].TLE2 == 'undefined')\n                continue; // Don't Process Bad Satellite Information\n            if (typeof satSet.sccIndex[`${extraSats[s].SCC}`] !== 'undefined') {\n                i = satSet.sccIndex[`${extraSats[s].SCC}`];\n                if (typeof extraSats[s].ON != 'undefined')\n                    tempSatData[i].ON = extraSats[s].ON;\n                if (typeof extraSats[s].OT != 'undefined')\n                    tempSatData[i].OT = extraSats[s].OT;\n                tempSatData[i].TLE1 = extraSats[s].TLE1;\n                tempSatData[i].TLE2 = extraSats[s].TLE2;\n            }\n            else {\n                if (typeof extraSats[s].TLE1 == 'undefined')\n                    continue; // Don't Process Bad Satellite Information\n                if (typeof extraSats[s].TLE2 == 'undefined')\n                    continue; // Don't Process Bad Satellite Information\n                settingsManager.isExtraSatellitesAdded = true;\n                if (typeof extraSats[s].ON == 'undefined') {\n                    extraSats[s].ON = 'Unknown';\n                }\n                if (typeof extraSats[s].OT == 'undefined') {\n                    extraSats[s].OT = 4;\n                }\n                year = extraSats[s].TLE1.substr(9, 8).trim().substring(0, 2); // clean up intl des for display\n                prefix = year > 50 ? '19' : '20';\n                year = prefix + year;\n                rest = extraSats[s].TLE1.substr(9, 8).trim().substring(2);\n                extrasSatInfo = {\n                    static: false,\n                    missile: false,\n                    active: true,\n                    ON: extraSats[s].ON,\n                    OT: extraSats[s].OT,\n                    C: 'Unknown',\n                    LV: 'Unknown',\n                    LS: 'Unknown',\n                    sccNum: extraSats[s].SCC.toString(),\n                    TLE1: extraSats[s].TLE1,\n                    TLE2: extraSats[s].TLE2,\n                    intlDes: year + '-' + rest,\n                    typ: 'sat',\n                    id: tempSatData.length,\n                    vmag: extraSats[s].vmag,\n                };\n                satSet.sccIndex[`${extraSats[s].SCC.toString()}`] = tempSatData.length;\n                satSet.cosparIndex[`${year}-${rest}`] = tempSatData.length;\n                tempSatData.push(extrasSatInfo);\n            }\n        }\n        extraSats = null;\n    }\n    let asciiSatInfo;\n    if (typeof asciiCatalog !== 'undefined' && settingsManager.offline) {\n        // If asciiCatalog catalogue\n        for (let s = 0; s < asciiCatalog.length; s++) {\n            if (typeof asciiCatalog[s].TLE1 == 'undefined')\n                continue; // Don't Process Bad Satellite Information\n            if (typeof asciiCatalog[s].TLE2 == 'undefined')\n                continue; // Don't Process Bad Satellite Information\n            if (typeof satSet.sccIndex[`${asciiCatalog[s].SCC}`] !== 'undefined') {\n                i = satSet.sccIndex[`${asciiCatalog[s].SCC}`];\n                tempSatData[i].TLE1 = asciiCatalog[s].TLE1;\n                tempSatData[i].TLE2 = asciiCatalog[s].TLE2;\n            }\n            else {\n                if (typeof asciiCatalog[s].TLE1 == 'undefined')\n                    continue; // Don't Process Bad Satellite Information\n                if (typeof asciiCatalog[s].TLE2 == 'undefined')\n                    continue; // Don't Process Bad Satellite Information\n                settingsManager.isExtraSatellitesAdded = true;\n                if (typeof asciiCatalog[s].ON == 'undefined') {\n                    asciiCatalog[s].ON = 'Unknown';\n                }\n                if (typeof asciiCatalog[s].OT == 'undefined') {\n                    asciiCatalog[s].OT = 4;\n                }\n                year = asciiCatalog[s].TLE1.substr(9, 8).trim().substring(0, 2); // clean up intl des for display\n                prefix = year > 50 ? '19' : '20';\n                year = prefix + year;\n                rest = asciiCatalog[s].TLE1.substr(9, 8).trim().substring(2);\n                asciiSatInfo = {\n                    static: false,\n                    missile: false,\n                    active: true,\n                    ON: asciiCatalog[s].ON,\n                    OT: asciiCatalog[s].OT,\n                    C: 'Unknown',\n                    LV: 'Unknown',\n                    LS: 'Unknown',\n                    sccNum: asciiCatalog[s].SCC.toString(),\n                    TLE1: asciiCatalog[s].TLE1,\n                    TLE2: asciiCatalog[s].TLE2,\n                    intlDes: year + '-' + rest,\n                    typ: 'sat',\n                    id: tempSatData.length,\n                };\n                satSet.sccIndex[`${asciiCatalog[s].SCC.toString()}`] = tempSatData.length;\n                satSet.cosparIndex[`${year}-${rest}`] = tempSatData.length;\n                tempSatData.push(asciiSatInfo);\n            }\n        }\n        asciiCatalog = null;\n    }\n    if (settingsManager.isExtraSatellitesAdded) {\n        $('.legend-pink-box').show();\n        try {\n            $('.legend-trusat-box')[1].parentElement.style.display = '';\n            $('.legend-trusat-box')[2].parentElement.style.display = '';\n            $('.legend-trusat-box')[3].parentElement.style.display = '';\n            $('.legend-trusat-box')[1].parentElement.innerHTML = `<div class=\"Square-Box legend-trusat-box\"></div>${settingsManager.nameOfSpecialSats}`;\n            $('.legend-trusat-box')[2].parentElement.innerHTML = `<div class=\"Square-Box legend-trusat-box\"></div>${settingsManager.nameOfSpecialSats}`;\n            $('.legend-trusat-box')[3].parentElement.innerHTML = `<div class=\"Square-Box legend-trusat-box\"></div>${settingsManager.nameOfSpecialSats}`;\n        }\n        catch (e) {\n            // Intentionally Blank\n        }\n    }\n    satSet.orbitalSats = tempSatData.length;\n    dotsManager.starIndex1 = objectManager.starIndex1 + satSet.orbitalSats;\n    dotsManager.starIndex2 = objectManager.starIndex2 + satSet.orbitalSats;\n    // if ((<any>settingsManager).isEnableGsCatalog) satSet.initGsData();\n    for (i = 0; i < objectManager.staticSet.length; i++) {\n        objectManager.staticSet[i].id = tempSatData.length;\n        tempSatData.push(objectManager.staticSet[i]);\n    }\n    for (i = 0; i < objectManager.analSatSet.length; i++) {\n        objectManager.analSatSet[i].id = tempSatData.length;\n        tempSatData.push(objectManager.analSatSet[i]);\n    }\n    // radarDataManager.satDataStartIndex = tempSatData.length + 1;\n    for (let i = 0; i < objectManager.radarDataSet.length; i++) {\n        tempSatData.push(objectManager.radarDataSet[i]);\n    }\n    for (i = 0; i < objectManager.missileSet.length; i++) {\n        tempSatData.push(objectManager.missileSet[i]);\n    }\n    satSet.missileSats = tempSatData.length;\n    for (i = 0; i < objectManager.fieldOfViewSet.length; i++) {\n        objectManager.fieldOfViewSet[i].id = tempSatData.length;\n        tempSatData.push(objectManager.fieldOfViewSet[i]);\n    }\n    // console.log(tempSatData.length);\n    return tempSatData;\n};\nexport const init = () => {\n    keepTrackApi.register({\n        method: 'loadCatalog',\n        cbName: 'catalogLoader',\n        cb: catalogLoader,\n    });\n};\n"],"names":[],"sourceRoot":""}