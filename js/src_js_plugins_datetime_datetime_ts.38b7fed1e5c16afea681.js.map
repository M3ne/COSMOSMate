{"version":3,"file":"src_js_plugins_datetime_datetime_ts.38b7fed1e5c16afea681.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAwD;AACjC;AAChB;AACP,YAAY,cAAc,EAAE,2EAAqB;AACjD,IAAI,6CAAC;AACL;AACA;AACO;AACP;AACA,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL,IAAI,2EAAqB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,YAAY,cAAc,EAAE,2EAAqB;AACjD;AACA,IAAI,yFAAmC;AACvC;AACA;AACA,QAAQ,6CAAC;AACT,QAAQ,6CAAC;AACT;AACA;AACA;AACO;AACP,YAAY,YAAY,EAAE,2EAAqB;AAC/C;AACA,IAAI,6CAAC,wBAAwB,uEAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,6CAAC;AACL,IAAI,6CAAC;AACL;AACA;AACA,KAAK;AACL;AACA,IAAI,6CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C,KAAK;AACL;AACA;AACA,QAAQ,6CAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP,YAAY,yBAAyB,EAAE,2EAAqB;AAC5D,yBAAyB,6CAAC;AAC1B;AACA;AACA,IAAI,6CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2GAAqD;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://keeptrack.space/./src/js/plugins/datetime/datetime.ts"],"sourcesContent":["import { keepTrackApi } from '@app/js/api/keepTrackApi';\nimport $ from 'jquery';\nexport const updateDateTime = (date) => {\n    const { timeManager } = keepTrackApi.programs;\n    $('#datetime-input-tb').datepicker('setDate', date);\n    timeManager.synchronize();\n};\nexport const init = () => {\n    // Add HTML\n    keepTrackApi.register({\n        method: 'uiManagerInit',\n        cbName: 'datetime',\n        cb: uiManagerInit,\n    });\n    keepTrackApi.register({\n        method: 'updateDateTime',\n        cbName: 'datetime',\n        cb: updateDateTime,\n    });\n};\nexport const datetimeTextClick = () => {\n    const { timeManager } = keepTrackApi.programs;\n    timeManager.calculateSimulationTime();\n    keepTrackApi.methods.updateDateTime(new Date(timeManager.calculateSimulationTime()));\n    if (!settingsManager.isEditTime) {\n        // $('#datetime-text').fadeOut();\n        $('#datetime-input').fadeIn();\n        $('#datetime-input-tb').trigger('focus');\n        settingsManager.isEditTime = true;\n    }\n};\nexport const uiManagerInit = () => {\n    const { uiManager } = keepTrackApi.programs;\n    // Bottom Icon\n    $('#nav-wrapper').append(keepTrackApi.html `\n        <ul id=\"nav-mobile\">\n          <li id=\"jday\"></li>\n          <div id=\"datetime\" class=\"tooltipped\" data-position=\"top\" data-delay=\"50\" data-tooltip=\"Time Menu\">\n            <div id=\"datetime-text\">Placeholder Text</div>\n            <div id=\"datetime-input\">\n              <form id=\"datetime-input-form\">\n                <input type=\"text\" id=\"datetime-input-tb\" readonly=\"true\" />\n              </form>\n            </div>\n          </div>\n        </ul>\n      `);\n    $('#datetime-text').on('click', datetimeTextClick);\n    $('#datetime-input-form').on('change', function (e) {\n        datetimeInputFormChange();\n        e.preventDefault();\n    });\n    // Initialize the date/time picker\n    $('#datetime-input-tb')\n        .datetimepicker({\n        dateFormat: 'yy-mm-dd',\n        timeFormat: 'HH:mm:ss',\n        timezone: '+0000',\n        gotoCurrent: true,\n        addSliderAccess: true,\n        // minDate: -14, // No more than 7 days in the past\n        // maxDate: 14, // or 7 days in the future to make sure ELSETs are valid\n        sliderAccessArgs: { touchonly: false },\n    })\n        .on('change.dp', function () {\n        // This code gets called when the done button is pressed or the time sliders are closed\n        $('#datetime-input').fadeOut();\n        // TODO: Migrate to watchlist.ts\n        try {\n            uiManager.updateNextPassOverlay(true);\n        }\n        catch (_a) {\n            // Intentionally ignored\n        }\n        settingsManager.isEditTime = false;\n    });\n};\nexport const datetimeInputFormChange = (jestOverride) => {\n    const { timeManager, uiManager } = keepTrackApi.programs;\n    const selectedDate = $('#datetime-input-tb').datepicker('getDate') || jestOverride;\n    const today = new Date();\n    const jday = timeManager.getDayOfYear(timeManager.calculateSimulationTime());\n    $('#jday').html(jday);\n    timeManager.changeStaticOffset(selectedDate.getTime() - today.getTime());\n    timeManager.calculateSimulationTime();\n    // Reset last update times when going backwards in time\n    settingsManager.lastBoxUpdateTime = timeManager.realTime;\n    // TODO: Migrate to watchlist.ts\n    try {\n        keepTrackApi.programs.watchlist.lastOverlayUpdateTime = timeManager.realTime * 1 - 7000;\n        uiManager.updateNextPassOverlay(true);\n    }\n    catch (_a) {\n        // Ignore\n    }\n    // radarDataManager.findFirstDataTime();\n};\n"],"names":[],"sourceRoot":""}